## <summary>Policy for kernel module utilities</summary>

########################################
## <summary>
##	Read the dependencies of kernel modules.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
interface(`modutils_read_module_deps',`
	gen_require(`
		type modules_dep_t;
	')

	files_list_kernel_modules($1)
	allow $1 modules_dep_t:file r_file_perms;
')

########################################
## <summary>
##	Read the configuration options used when
##	loading modules.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
interface(`modutils_read_module_config',`
	gen_require(`
		type modules_conf_t;
	')

	# This file type can be in /etc or
	# /lib(64)?/modules
	files_search_etc($1)
	files_search_boot($1)

	allow $1 modules_conf_t:{ file lnk_file } r_file_perms;
')

########################################
## <summary>
##	Rename a file with the configuration options used when
##	loading modules.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
interface(`modutils_rename_module_config',`
	gen_require(`
		type modules_conf_t;
	')

	allow $1 modules_conf_t:file rename;
')

########################################
## <summary>
##	Unconditionally execute insmod in the insmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
# cjp: this is added for pppd, due to nested
# conditionals not working.
interface(`modutils_domtrans_insmod_uncond',`
	gen_require(`
		type insmod_t, insmod_exec_t;
	')

	corecmd_search_sbin($1)
	domain_auto_trans($1, insmod_exec_t, insmod_t)

	allow $1 insmod_t:fd use;
	allow insmod_t $1:fd use;
	allow insmod_t $1:fifo_file rw_file_perms;
	#allow insmod_t $1:process sigchld;
')

########################################
## <summary>
##	Execute insmod in the insmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
interface(`modutils_domtrans_insmod',`
	gen_require(`
		bool secure_mode_insmod;
	')

#	if (!secure_mode_insmod) {
#		modutils_domtrans_insmod_uncond($1)
#	}
')

########################################
## <summary>
##	Execute insmod in the insmod domain, and
##	allow the specified role the insmod domain,
##	and use the caller's terminal.  Has a sigchld
##	backchannel.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the insmod domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the insmod domain to use.
##	</summary>
## </param>
#
interface(`modutils_run_insmod',`
	gen_require(`
		type insmod_t;
	')

	modutils_domtrans_insmod($1)
	role $2 types insmod_t;
	allow insmod_t $3:chr_file rw_term_perms;
')

########################################
#
# modutils_exec_insmod(domain)
#
interface(`modutils_exec_insmod',`
	gen_require(`
		type insmod_exec_t;
	')

	corecmd_search_sbin($1)
	can_exec($1, insmod_exec_t)
')

########################################
## <summary>
##	Execute depmod in the depmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
interface(`modutils_domtrans_depmod',`
	gen_require(`
		type depmod_t, depmod_exec_t;
	')

	corecmd_search_sbin($1)
	domain_auto_trans($1, depmod_exec_t, depmod_t)

	allow $1 depmod_t:fd use;
	allow depmod_t $1:fd use;
	allow depmod_t $1:fifo_file rw_file_perms;
	#allow depmod_t $1:process sigchld;
')

########################################
## <summary>
##	Execute depmod in the depmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the depmod domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the depmod domain to use.
##	</summary>
## </param>
#
interface(`modutils_run_depmod',`
	gen_require(`
		type depmod_t;
	')

	modutils_domtrans_depmod($1)
	role $2 types depmod_t;
	allow insmod_t $3:chr_file rw_term_perms;
')

########################################
#
# modutils_exec_depmod(domain)
#
interface(`modutils_exec_depmod',`
	gen_require(`
		type depmod_exec_t;
	')

	corecmd_search_sbin($1)
	can_exec($1, depmod_exec_t)
')

########################################
## <summary>
##	Execute depmod in the depmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
interface(`modutils_domtrans_update_mods',`
	gen_require(`
		type update_modules_t, update_modules_exec_t;
	')

	corecmd_search_sbin($1)
	domain_auto_trans($1, update_modules_exec_t, update_modules_t)

	allow $1 update_modules_t:fd use;
	allow update_modules_t $1:fd use;
	allow update_modules_t $1:fifo_file rw_file_perms;
	#allow update_modules_t $1:process sigchld;
')

########################################
## <summary>
##	Execute update_modules in the update_modules domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the update_modules domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the update_modules domain to use.
##	</summary>
## </param>
#
interface(`modutils_run_update_mods',`
	gen_require(`
		type update_modules_t;
	')

	modutils_domtrans_update_mods($1)
	role $2 types update_modules_t;
	allow update_modules_t $3:chr_file rw_term_perms;
')

########################################
#
# modutils_exec_update_mods(domain)
#
interface(`modutils_exec_update_mods',`
	gen_require(`
		type update_modules_exec_t;
	')

	corecmd_search_sbin($1)
	can_exec($1, update_modules_exec_t)
')
