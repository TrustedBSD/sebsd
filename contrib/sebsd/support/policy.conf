#line 1 "tmp/pre_te_files.conf"
# FLASK

#
# Define the security object classes 
#

# Classes marked as userspace are classes
# for userspace object managers

class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

# network-related classes
class socket
class tcp_socket
class udp_socket
class rawip_socket
class node
class netif
class netlink_socket
class packet_socket
class key_socket
class unix_stream_socket
class unix_dgram_socket

# sysv-ipc-related classes
class sem
class msg
class msgq
class shm
class ipc

#
# userspace object manager classes
#

# passwd/chfn/chsh
class passwd			# userspace

# SE-X Windows stuff
class drawable			# userspace
class window			# userspace
class gc			# userspace
class font			# userspace
class colormap			# userspace
class property			# userspace
class cursor			# userspace
class xclient			# userspace
class xinput			# userspace
class xserver			# userspace
class xextension		# userspace

# pax flags
class pax

# extended netlink sockets
class netlink_route_socket
class netlink_firewall_socket
class netlink_tcpdiag_socket
class netlink_nflog_socket
class netlink_xfrm_socket
class netlink_selinux_socket
class netlink_audit_socket
class netlink_ip6fw_socket
class netlink_dnrt_socket

class dbus			# userspace
class nscd			# userspace

# IPSec association
class association

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket

# FLASK
# FLASK

#
# Define initial security identifiers 
#

sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull

# FLASK
#
# Define common prefixes for access vectors
#
# common common_name { permission_name ... }


#
# Define a common prefix for file access vectors.
#

common file
{
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
	unlink
	link
	rename
	execute
	swapon
	quotaon
	mounton
}


#
# Define a common prefix for socket access vectors.
#

common socket
{
# inherited from file
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
# socket-specific
	bind
	connect
	listen
	accept
	getopt
	setopt
	shutdown
	recvfrom
	sendto
	recv_msg
	send_msg
	name_bind
}	

#
# Define a common prefix for ipc access vectors.
#

common ipc
{
	create
	destroy
	getattr
	setattr
	read
	write
	associate
	unix_read
	unix_write
}

#
# Define the access vectors.
#
# class class_name [ inherits common_name ] { permission_name ... }


#
# Define the access vector interpretation for file-related objects.
#

class filesystem
{
	mount
	remount
	unmount
	getattr
	relabelfrom
	relabelto
	transition
	associate
	quotamod
	quotaget
}

class dir
inherits file
{
	add_name
	remove_name
	reparent
	search
	rmdir
}

class file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
}

class lnk_file
inherits file

class chr_file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
}

class blk_file
inherits file

class sock_file
inherits file

class fifo_file
inherits file

class fd
{
	use
}


#
# Define the access vector interpretation for network-related objects.
#

class socket
inherits socket

class tcp_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
	node_bind
	name_connect
}

class udp_socket
inherits socket
{
	node_bind
}

class rawip_socket
inherits socket
{
	node_bind
}

class node 
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	enforce_dest
}

class netif
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
}

class netlink_socket
inherits socket

class packet_socket
inherits socket

class key_socket
inherits socket

class unix_stream_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
}

class unix_dgram_socket
inherits socket


#
# Define the access vector interpretation for process-related objects
#

class process
{
	fork
	transition
	sigchld # commonly granted from child to parent
	sigkill # cannot be caught or ignored
	sigstop # cannot be caught or ignored
	signull # for kill(pid, 0)
	signal  # all other signals
	ptrace
	getsched
	setsched
	getsession
	getpgid
	setpgid
	getcap
	setcap
	share
	getattr
	setexec
	setfscreate
	noatsecure
	siginh
	setrlimit
	rlimitinh
	dyntransition
	setcurrent
	execmem
	execstack
	execheap
}


#
# Define the access vector interpretation for ipc-related objects
#

class ipc
inherits ipc

class sem
inherits ipc

class msgq
inherits ipc
{
	enqueue
}

class msg
{
	send
	receive
}

class shm
inherits ipc
{
	lock
}


#
# Define the access vector interpretation for the security server. 
#

class security
{
	compute_av
	compute_create
	compute_member
	check_context
	load_policy
	compute_relabel
	compute_user
	setenforce     # was avc_toggle in system class
	setbool
	setsecparam
	setcheckreqprot
}


#
# Define the access vector interpretation for system operations.
#

class system
{
	ipc_info
	syslog_read  
	syslog_mod
	syslog_console
}

#
# Define the access vector interpretation for controling capabilies
#

class capability
{
	# The capabilities are defined in include/linux/capability.h
	# Care should be taken to ensure that these are consistent with
	# those definitions. (Order matters)

	chown           
	dac_override    
	dac_read_search 
	fowner          
	fsetid          
	kill            
	setgid           
	setuid           
	setpcap          
	linux_immutable  
	net_bind_service 
	net_broadcast    
	net_admin        
	net_raw          
	ipc_lock         
	ipc_owner        
	sys_module       
	sys_rawio        
	sys_chroot       
	sys_ptrace       
	sys_pacct        
	sys_admin        
	sys_boot         
	sys_nice         
	sys_resource     
	sys_time         
	sys_tty_config  
	mknod
	lease
	audit_write
	audit_control
}


#
# Define the access vector interpretation for controlling
# changes to passwd information.
#
class passwd
{
	passwd	# change another user passwd
	chfn	# change another user finger info
	chsh	# change another user shell
	rootok  # pam_rootok check (skip auth)
	crontab # crontab on another user
}

#
# SE-X Windows stuff
#
class drawable
{
	create
	destroy
	draw
	copy
	getattr
}

class gc
{
	create
	free
	getattr
	setattr
}

class window 
{
	addchild
	create
	destroy
	map
	unmap
	chstack
	chproplist
	chprop	
	listprop
	getattr
	setattr
	setfocus
	move
	chselection
	chparent
	ctrllife
	enumerate
	transparent
	mousemotion
	clientcomevent
	inputevent
	drawevent
	windowchangeevent
	windowchangerequest
	serverchangeevent
	extensionevent
}

class font
{
	load
	free
	getattr
	use
}

class colormap
{
	create
	free
	install
	uninstall
	list
	read
	store
	getattr
	setattr
}

class property
{
	create
	free
	read
	write
}

class cursor
{
	create
	createglyph
	free
	assign
	setattr
}

class xclient
{
	kill
}

class xinput
{
	lookup
	getattr
	setattr
	setfocus
	warppointer
	activegrab
	passivegrab
	ungrab
	bell
	mousemotion
	relabelinput
}

class xserver
{
	screensaver
	gethostlist
	sethostlist
	getfontpath
	setfontpath
	getattr
	grab
	ungrab
}

class xextension
{
	query
	use
}

#
# Define the access vector interpretation for controlling
# PaX flags
#
class pax
{
	pageexec	# Paging based non-executable pages
	emutramp	# Emulate trampolines
	mprotect	# Restrict mprotect()
	randmmap	# Randomize mmap() base
	randexec	# Randomize ET_EXEC base
	segmexec	# Segmentation based non-executable pages
}

#
# Extended Netlink classes
#
class netlink_route_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_firewall_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_tcpdiag_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_nflog_socket
inherits socket

class netlink_xfrm_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_selinux_socket
inherits socket

class netlink_audit_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
	nlmsg_relay
	nlmsg_readpriv
}

class netlink_ip6fw_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_dnrt_socket
inherits socket

# Define the access vector interpretation for controlling
# access and communication through the D-BUS messaging
# system.
#
class dbus
{
	acquire_svc
	send_msg
}

# Define the access vector interpretation for controlling
# access through the name service cache daemon (nscd).
#
class nscd
{
	getpwd
	getgrp
	gethost
	getstat
	admin
	shmempwd
	shmemgrp
	shmemhost
}

# Define the access vector interpretation for controlling
# access to IPSec network data by association
#
class association
{
	sendto
	recvfrom
	setcontext
}

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket
inherits socket
########################################
#
# Macros for switching between source policy
# and loadable policy module support
#

##############################
#
# For adding the module statement
#


##############################
#
# For use in interfaces, to optionally insert a require block
#


# helper function, since m4 wont expand macros
# if a line is a comment (#):

##############################
#
# In the future interfaces should be in loadable modules
#
# template(name,rules)
#


##############################
#
# In the future interfaces should be in loadable modules
#
# interface(name,rules)
#




##############################
#
# Optional policy handling
#


##############################
#
# Determine if we should use the default
# tunable value as specified by the policy
# or if the override value should be used
#


##############################
#
# Extract booleans out of an expression.
# This needs to be reworked so expressions
# with parentheses can work.



##############################
#
# Tunable declaration
#


##############################
#
# Tunable policy handling
#


########################################
#
# Helper macros
#

#
# shiftn(num,list...)
#
# shift the list num times
#


#
# __endline__
#
# dummy macro to insert a newline.  used for 
# errprint, so the close parentheses can be
# indented correctly.
#


########################################
#
# gen_user(username, prefix, role_set, mls_defaultlevel, mls_range, [mcs_categories])
#


########################################
#
# gen_context(context,mls_sensitivity,[mcs_categories])
#
 
########################################
#
# can_exec(domain,executable)
#


########################################
#
# gen_bool(name,default_value)
#

########################################
# 
# Support macros for sets of object classes and permissions
#
# This file should only have object class and permission set macros - they
# can only reference object classes and/or permissions.

#
# All directory and file classes
#


#
# All non-directory file classes.
#


#
# Non-device file classes.
#


#
# Device file classes.
#


#
# All socket classes.
#



#
# Datagram socket classes.
# 


#
# Stream socket classes.
#


#
# Unprivileged socket classes (exclude rawip, netlink, packet).
#


########################################
# 
# Macros for sets of permissions
#

# 
# Permissions for getting file attributes.
#


# 
# Permissions for executing files.
#


# 
# Permissions for reading files and their attributes.
#


# 
# Permissions for reading and executing files.
#


# 
# Permissions for reading and appending to files.
#


#
# Permissions for linking, unlinking and renaming files.
# 


#
# Permissions for creating lnk_files.
#


#
# Permissions for creating and using files.
# 


# 
# Permissions for reading directories and their attributes.
#


# 
# Permissions for reading and writing directories and their attributes.
#


# 
# Permissions for reading and adding names to directories.
#



#
# Permissions for creating and using directories.
# 


#
# Permissions to mount and unmount file systems.
#


#
# Permissions for using sockets.
# 


#
# Permissions for creating and using sockets.
# 


#
# Permissions for using stream sockets.
# 


#
# Permissions for creating and using stream sockets.
# 


#
# Permissions for creating and using sockets.
# 


#
# Permissions for creating and using sockets.
# 



#
# Permissions for creating and using netlink sockets.
# 


#
# Permissions for using netlink sockets for operations that modify state.
# 


#
# Permissions for using netlink sockets for operations that observe state.
# 


#
# Permissions for sending all signals.
#


#
# Permissions for sending and receiving network packets.
#


#
# Permissions for using System V IPC
#










########################################
#
# New permission sets
#

#
# Directory
#








#
# File
#









#
# Use (read and write) terminals
#


#
# Sockets
#



  #line 1 "tmp/generated_definitions.conf"


















































































































#line 1 "tmp/all_interfaces.conf"
########################################
#
# Macros for switching between source policy
# and loadable policy module support
#

##############################
#
# For adding the module statement
#


##############################
#
# For use in interfaces, to optionally insert a require block
#


# helper function, since m4 wont expand macros
# if a line is a comment (#):

##############################
#
# In the future interfaces should be in loadable modules
#
# template(name,rules)
#


##############################
#
# In the future interfaces should be in loadable modules
#
# interface(name,rules)
#




##############################
#
# Optional policy handling
#


##############################
#
# Determine if we should use the default
# tunable value as specified by the policy
# or if the override value should be used
#


##############################
#
# Extract booleans out of an expression.
# This needs to be reworked so expressions
# with parentheses can work.



##############################
#
# Tunable declaration
#


##############################
#
# Tunable policy handling
#


########################################
#
# Helper macros
#

#
# shiftn(num,list...)
#
# shift the list num times
#


#
# __endline__
#
# dummy macro to insert a newline.  used for 
# errprint, so the close parentheses can be
# indented correctly.
#


########################################
#
# gen_user(username, prefix, role_set, mls_defaultlevel, mls_range, [mcs_categories])
#


########################################
#
# gen_context(context,mls_sensitivity,[mcs_categories])
#
 
########################################
#
# can_exec(domain,executable)
#


########################################
#
# gen_bool(name,default_value)
#

########################################
# 
# Support macros for sets of object classes and permissions
#
# This file should only have object class and permission set macros - they
# can only reference object classes and/or permissions.

#
# All directory and file classes
#


#
# All non-directory file classes.
#


#
# Non-device file classes.
#


#
# Device file classes.
#


#
# All socket classes.
#



#
# Datagram socket classes.
# 


#
# Stream socket classes.
#


#
# Unprivileged socket classes (exclude rawip, netlink, packet).
#


########################################
# 
# Macros for sets of permissions
#

# 
# Permissions for getting file attributes.
#


# 
# Permissions for executing files.
#


# 
# Permissions for reading files and their attributes.
#


# 
# Permissions for reading and executing files.
#


# 
# Permissions for reading and appending to files.
#


#
# Permissions for linking, unlinking and renaming files.
# 


#
# Permissions for creating lnk_files.
#


#
# Permissions for creating and using files.
# 


# 
# Permissions for reading directories and their attributes.
#


# 
# Permissions for reading and writing directories and their attributes.
#


# 
# Permissions for reading and adding names to directories.
#



#
# Permissions for creating and using directories.
# 


#
# Permissions to mount and unmount file systems.
#


#
# Permissions for using sockets.
# 


#
# Permissions for creating and using sockets.
# 


#
# Permissions for using stream sockets.
# 


#
# Permissions for creating and using stream sockets.
# 


#
# Permissions for creating and using sockets.
# 


#
# Permissions for creating and using sockets.
# 



#
# Permissions for creating and using netlink sockets.
# 


#
# Permissions for using netlink sockets for operations that modify state.
# 


#
# Permissions for using netlink sockets for operations that observe state.
# 


#
# Permissions for sending all signals.
#


#
# Permissions for sending and receiving network packets.
#


#
# Permissions for using System V IPC
#










########################################
#
# New permission sets
#

#
# Directory
#








#
# File
#









#
# Use (read and write) terminals
#


#
# Sockets
#


## <summary>
## Core policy for shells, and generic programs
## in /bin, /sbin, /usr/bin, and /usr/sbin.
## </summary>
## <required val="true">
##	Contains the base bin and sbin directory types
##	which need to be searched for the kernel to
##	run init.
## </required>

########################################
## <summary>
##	Create a aliased type to generic bin files.
## </summary>
## <desc>
##	<p>
##	Create a aliased type to generic bin files.
##	</p>
##	<p>
##	This is added to support targeted policy.  Its
##	use should be limited.  It has no effect
##	on the strict policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Alias type for bin_t.
##	</summary>
## </param>
 	 	


########################################
## <summary>
##	Make the shell an entrypoint for the specified domain.
## </summary>
## <param name="domain">
##	<summary>
##	The domain for which the shell is an entrypoint.
##	</summary>
## </param>
 	 	


########################################
#
# corecmd_search_bin(domain)
#
 	 	


########################################
#
# corecmd_list_bin(domain)
#
 	 	


########################################
## <summary>
##	Get the attributes of files in bin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files in bin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links in bin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read pipes in bin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read named sockets in bin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# corecmd_exec_bin(domain)
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete bin files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel to and from the bin type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mmap a bin file as executable.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a file in a bin directory
##	in the specified domain but do not
##	do it automatically. This is an explicit
##	transition, requiring the caller to use setexeccon().
## </summary>
## <desc>
##	<p>
##	Execute a file in a bin directory
##	in the specified domain.  This allows
##	the specified domain to execute any file
##	on these filesystems in the specified
##	domain.  This is not suggested.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
##	<p>
##	This interface was added to handle
##	the userhelper policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the new process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Execute a file in a bin directory
##      in the specified domain.
## </summary>
## <desc>
##      <p>
##      Execute a file in a bin directory
##      in the specified domain.  This allows
##      the specified domain to execute any file
##      on these filesystems in the specified
##      domain.  This is not suggested.
##      </p>
##      <p>
##      No interprocess communication (signals, pipes,
##      etc.) is provided by this interface since
##      the domains are not owned by this module.
##      </p>
##      <p>
##      This interface was added to handle
##      the ssh-agent policy.
##      </p>
## </desc>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##      The type of the new process.
##	</summary>
## </param>
#
 	 	


########################################
#
# corecmd_search_sbin(domain)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search
##	sbin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
#
# corecmd_list_sbin(domain)
#
 	 	


########################################
#
# corecmd_getattr_sbin_files(domain)
#
 	 	


########################################
#
# corecmd_dontaudit_getattr_sbin_files(domain)
#
 	 	


########################################
## <summary>
##	Read files in sbin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links in sbin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read named pipes in sbin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read named sockets in sbin directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# corecmd_exec_sbin(domain)
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete sbin files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Relabel to and from the sbin type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Mmap a sbin file as executable.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Execute a file in a sbin directory
##	in the specified domain.
## </summary>
## <desc>
##	<p>
##	Execute a file in a sbin directory
##	in the specified domain.  This allows
##	the specified domain to execute any file
##	on these filesystems in the specified
##	domain.  This is not suggested.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
##	<p>
##	This interface was added to handle
##	the ssh-agent policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the new process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a file in a sbin directory
##	in the specified domain but do not
##	do it automatically. This is an explicit
##	transition, requiring the caller to use setexeccon().
## </summary>
## <desc>
##	<p>
##	Execute a file in a sbin directory
##	in the specified domain.  This allows
##	the specified domain to execute any file
##	on these filesystems in the specified
##	domain.  This is not suggested.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
##	<p>
##	This interface was added to handle
##	the userhelper policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the new process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Check if a shell is executable (DAC-wise).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# corecmd_exec_shell(domain)
#
 	 	


########################################
#
# corecmd_exec_ls(domain)
#
 	 	


########################################
## <summary>
##	Execute a shell in the target domain.  This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <desc>
##	<p>
##	Execute a shell in the target domain.  This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the shell process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a shell in the specified domain.
## </summary>
## <desc>
##	<p>
##	Execute a shell in the specified domain.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the shell process.
##	</summary>
## </param>
#
 	 	


########################################
#
# corecmd_exec_chroot(domain)
#
 	 	


#
# This is a generated file!  Instead of modifying this file, the
# corenetwork.if.in or corenetwork.if.m4 file should be modified.
#
## <summary>Policy controlling access to network objects</summary>
## <required val="true">
##	Contains the initial SIDs for network objects.
## </required>

########################################
## <summary>
##	Send and receive TCP network traffic on the generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and Receive UDP network traffic on generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on generic interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on all interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to generic nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind raw sockets to all nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
# rawip_socket node_bind does not make much sense. 
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect TCP sockets to generic ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attepts to bind TCP sockets to any ports.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect TCP sockets to all ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect TCP sockets to generic reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive TCP network traffic on all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to bind TCP sockets to all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to bind UDP sockets to all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Connect TCP sockets to reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##      The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to connect TCP sockets
##	all reserved ports.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the TUN/TAP virtual network device.
## </summary>
## <param name="domain">
##	<summary>
##	The domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the point-to-point device.
## </summary>
## <param name="domain">
##	<summary>
##	The domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive messages on a
##	non-encrypted (no IPSEC) network
##	session.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to network objects.
## </summary>
## <param name="domain">
##	<summary>
##	The domain allowed access.
##	</summary>
## </param>
#
 	 	

#
# shiftn(num,list...)
#
# shift the list num times
#


########################################
#
# Network Interface generated macros 
#
########################################

 
########################################
#
# Network node generated macros 
#
########################################

 
########################################
#
# Network port generated macros 
#
########################################

 
#
# create_netif_*_interfaces(linux_interfacename)
#



#
# network_interface(linux_interfacename,mls_sensitivity)
#


#
# create_node_*_interfaces(node_name)
#



#
# network_node(node_name,mls_sensitivity,address,netmask)
#


# These next three macros have formatting, and should not me indented
 
#
# create_port_*_interfaces(port_name, protocol,portnum,mls_sensitivity [,protocol portnum mls_sensitivity[,...]])
# (these wrap create_port_interfaces to handle attributes and types)



#
# network_port(port_name,protocol portnum mls_sensitivity [,protocol,portnum,mls_sensitivity[,...]])
#



########################################
## <summary>
##	Send and receive TCP traffic on the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the afs_bos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the afs_fs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the afs_ka port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the afs_pt port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the afs_vl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the amanda port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the amavisd_recv port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the amavisd_send port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the asterisk port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the auth port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the bgp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the clamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the clockspeed port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the comsat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the cvs port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the dcc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the dbskkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the dhcpc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the dhcpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the dict port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the distccd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the dns port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the fingerd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ftp_data port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the gatekeeper port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the giftd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the gopher port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the http_cache port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


 # 8118 is for privoxy


########################################
## <summary>
##	Send and receive TCP traffic on the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the howl port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the hplip port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the i18n_input port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the imaze port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the inetd_child port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the innd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ipp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ircd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the isakmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the jabber_client port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the jabber_interserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the kerberos_admin port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the kerberos_master port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the kerberos port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ktalkd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ldap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the mail port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the monopd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the mysqld port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the nessus port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the nmbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ntp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the openvpn port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the pegasus_http port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the pegasus_https port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the pop port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the portmap port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the postgresql port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the postgrey port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the printer port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ptal port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the pxe port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the pyzor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the radacct port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the radius port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the razor port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the rlogind port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the rndc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the router port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the rsh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the rsync port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the smbd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the smtp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the snmp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the spamd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the ssh port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the soundd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the swat port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the syslogd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the telnetd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the tftp port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the transproxy port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the uucpd port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the vnc port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the xserver port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the zebra port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	





########################################
## <summary>
##	Send and receive TCP traffic on the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Make a TCP connection to the zope port.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	






########################################
## <summary>
##	Send and receive TCP traffic on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node compat_ipv4.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the compat_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node inaddr_any.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the inaddr_any node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node link_local.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the link_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node lo.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the lo node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node mapped_ipv4.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the mapped_ipv4 node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node multicast.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the multicast node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node site_local.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the site_local node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP traffic on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP traffic on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP traffic on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP traffic on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Bind TCP sockets to node unspec.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	


########################################
## <summary>
##	Bind UDP sockets to the unspec node.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="none"/>
#
 	 	







########################################
## <summary>
##	Send and receive TCP network traffic on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive UDP network traffic on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive UDP network traffic on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send raw IP packets on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="write" weight="10"/>
#
 	 	


########################################
## <summary>
##	Receive raw IP packets on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="read" weight="10"/>
#
 	 	


########################################
## <summary>
##	Send and receive raw IP packets on the lo interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <infoflow type="both" weight="10"/>
#
 	 	




## <summary>
## Device nodes and interfaces for many basic system devices.
## </summary>
## <desc>
## <p>
## This module creates the device node concept and provides
## the policy for many of the device files. Notable exceptions are
## the mass storage and terminal devices that are covered by other
## modules.
## </p>
## <p>
## This module creates the concept of a device node. That is a
## char or block device file, usually in /dev. All types that
## are used to label device nodes should use the dev_node macro.
## </p>
## <p>
## Additionally, this module controls access to three things:
##	<ul>
##		<li>the device directories containing device nodes</li>
##		<li>device nodes as a group</li>
##		<li>individual access to specific device nodes covered by
##		this module.</li>
##	</ul>
## </p>
## </desc>
## <required val="true">
##	Depended on by other required modules.
## </required>

########################################
## <summary>
##	Make the passed in type a type appropriate for
##	use on device nodes (usually files in /dev).
## </summary>
## <param name="object_type">
##	<summary>
##	The object type that will be used on device nodes.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow full relabeling (to and from) of all device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to relabel.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List all of the device nodes in a device directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to list device nodes.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of /dev directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit attempts to list all device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit listing of device nodes.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a directory in the device directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to create the directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow full relabeling (to and from) of directories in /dev.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to relabel.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write generic files in /dev.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete generic files in /dev.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a file in the device directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to create the files.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit getattr on generic pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow getattr on generic block devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit getattr on generic block devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit setattr on generic block devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow read, write, and create for generic character device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow getattr for generic character device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit getattr for generic character device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit setattr for generic character device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the attributes
##	of symbolic links in device directories (/dev).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete symbolic links in device directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, delete, read, and write symbolic links in device directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel symbolic links in device directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, delete, read, and write device nodes in device directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit getattr for generic device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, delete, read, and write block device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, delete, read, and write character device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, and write device nodes. The node
##	will be transitioned to the type provided.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file">
##	<summary>
##	Type to which the created node will be transitioned.
##	</summary>
## </param>
## <param name="objectclass(es)">
##	<summary>
##	Object class(es) (single or set including {}) for which this
##	the transition will occur.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Getattr on all block file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit getattr on all block file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Getattr on all character file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit getattr on all character file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Setattr on all block file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Setattr on all character file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit read on all block file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit read on all character file device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read, write, create, and delete all block device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read, write, create, and delete all character device files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Getattr the agp devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the agp devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the apm bios device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes of
##	the apm bios device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the apm bios device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the attributes of
##	the apm bios device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the apm bios.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the PCMCIA card manager device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and
##	write the PCMCIA card manager device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	the PCMCIA card manager device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	the PCMCIA card manager device
##	with the correct type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the CPU
##	microcode and id interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the CPU identity.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the the CPU microcode device. This
##	is required to load CPU microcode.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the the hardware SSL accelerator.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	getattr the dri devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Setattr the dri devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the dri devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit read and write on the dri devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to dontaudit access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete the dri devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read input event devices (/dev/input).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read input event devices (/dev/input).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the framebuffer device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the framebuffer device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dot not audit attempts to set the attributes
##	of the framebuffer device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the framebuffer.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read the framebuffer.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write the framebuffer.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the framebuffer.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the lvm comtrol device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the lvm control device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete the lvm control device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	dontaudit getattr raw memory devices (e.g. /dev/mem).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read raw memory devices (e.g. /dev/mem).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write raw memory devices (e.g. /dev/mem).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and execute raw memory devices (e.g. /dev/mem).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write and execute raw memory devices (e.g. /dev/mem).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the attributes
##	of miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and write miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the mouse devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the mouse devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the mouse devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Read and write to mouse devices.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the mtrr device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the mtrr device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write the mtrr device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the mtrr device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write to the null device (/dev/null).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the printer device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Append the printer device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for lpd/checkpc_t
 	 	


########################################
## <summary>
##	Read and write the printer device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read from random number generator
##	devices (e.g., /dev/random)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read from random
##	number generator devices (e.g., /dev/random)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to the random device (e.g., /dev/random). This adds
##	entropy used to generate the random data read from the
##	random device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the realtime clock (/dev/rtc).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the realtime clock (/dev/rtc).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and set the realtime clock (/dev/rtc).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the scanner device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes of
##	the scanner device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the scanner device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the attributes of
##	the scanner device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the scanner device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the sound devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the sound devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the sound devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write the sound devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the sound mixer devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write the sound mixer devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the the power management device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the the power management device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the the power management device.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of sysfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the sysfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search sysfs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of the sysfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to read hardware state information.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading hardware state information.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to modify hardware state information.
## </summary>
## <param name="domain">
##	<summary>
##	The process type modifying hardware state information.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read from pseudo random devices (e.g., /dev/urandom)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to the pseudo random device (e.g., /dev/urandom). This
##	sets the random number generator seed.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write generic the USB devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a usbfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Associate a file to a usbfs filesystem.
## </summary>
## <param name="file_type">
##	<summary>
##	The type of the file to be associated to usbfs.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a directory in the usb filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of a directory in the usb filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the directory containing USB hardware information.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to get a list of usb hardware.
## </summary>
## <param name="domain">
##	<summary>
##	The process type getting the list.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read USB hardware information using
##	the usbfs filesystem interface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to modify usb hardware configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	The process type modifying the options.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of video4linux devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of video4linux device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of video4linux device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the attributes
##	of video4linux device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of X server miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of X server miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write X server miscellaneous devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write to the zero device (/dev/zero).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read, write, and execute the zero device (/dev/zero).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


## <summary>Core policy for domains.</summary>
## <required val="true">
##	Contains the concept of a domain.
## </required>

########################################
## <summary>
##	Make the specified type usable as a basic domain.
## </summary>
## <desc>
##	<p>
##	Make the specified type usable as a basic domain.
##	</p>
##	<p>
##	This is primarily used for kernel threads;
##	generally the domain_type() interface is
##	more appropriate for userland processes.
##	</p>
## </desc>
## <param name="type">
##	<summary>
##	Type to be used as a basic domain type.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type usable as a domain.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used as a domain type.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type usable as
##	an entry point for the domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to be entered.
##	</summary>
## </param>
## <param name="type">
##	<summary>
##	Type of program used for entering
##	the domain.
##	</summary>
## </param>
#
 	 	


########################################
#
# domain_interactive_fd(domain)
#
 	 	


########################################
#
# domain_dyntrans_type(domain)
#
 	 	


########################################
## <summary>
##	Makes caller and execption to the constraint
##	preventing changing to the system user
##	identity and system role.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Makes caller an exception to the constraint preventing
##	changing of user identity.
## </summary>
## <param name="domain">
##	<summary>
##	The process type to make an exception to the constraint.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Makes caller an exception to the constraint preventing
##	changing of role.
## </summary>
## <param name="domain">
##	<summary>
##	The process type to make an exception to the constraint.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Makes caller an exception to the constraint preventing
##	changing the user identity in object contexts.
## </summary>
## <param name="domain">
##	<summary>
##	The process type to make an exception to the constraint.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified domain the target of
##	the user domain exception of the
##	SELinux role and identity change
##	constraints.
## </summary>
## <desc>
##	<p>
##	Make the specified domain the target of
##	the user domain exception of the
##	SELinux role and identity change
##	constraints.
##	</p>
##	<p>
##	This interface is needed to decouple
##	the user domains from the base module.
##	It should not be used other than on
##	user domains.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain target for user exemption.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified domain the source of
##	the cron domain exception of the
##	SELinux role and identity change
##	constraints.
## </summary>
## <desc>
##	<p>
##	Make the specified domain the source of
##	the cron domain exception of the
##	SELinux role and identity change
##	constraints.
##	</p>
##	<p>
##	This interface is needed to decouple
##	the cron domains from the base module.
##	It should not be used other than on
##	cron domains.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain target for user exemption.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified domain the target of
##	the cron domain exception of the
##	SELinux role and identity change
##	constraints.
## </summary>
## <desc>
##	<p>
##	Make the specified domain the target of
##	the cron domain exception of the
##	SELinux role and identity change
##	constraints.
##	</p>
##	<p>
##	This interface is needed to decouple
##	the cron domains from the base module.
##	It should not be used other than on
##	user cron jobs.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain target for user exemption.
##	</summary>
## </param>
#
 	 	


########################################
#
# domain_use_interactive_fds(domain)
#
 	 	


########################################
#
# domain_dontaudit_use_interactive_fds(domain)
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to domains whose file
##	discriptors are widely inheritable.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: this was added because of newrole
 	 	


########################################
#
# domain_setpriority_all_domains(domain)
#
 	 	


########################################
## <summary>
##	Send general signals to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a null signal to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a stop signal to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a child terminated signal to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a kill signal to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the process state directory (/proc/pid) of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the process
##	state directory (/proc/pid) of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the process state (/proc/pid) of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all domains of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all domains of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the process state (/proc/pid) of all confined domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all confined domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Ptrace all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to ptrace all domains.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to ptrace all domains.
##	</p>
##	<p>
##	Generally this needs to be suppressed because procps tries to access
##	/proc/pid/environ and this now triggers a ptrace check in recent kernels
##	(2.4 and 2.6).
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to ptrace confined domains.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to ptrace confined domains.
##	</p>
##	<p>
##	Generally this needs to be suppressed because procps tries to access
##	/proc/pid/environ and this now triggers a ptrace check in recent kernels
##	(2.4 and 2.6).
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read the process
##	state (/proc/pid) of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read the process state
##	directories of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the session ID of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	session ID of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all domains
##	sockets, for all socket types.
## </summary>
## <desc>
##	<p>
##	Get the attributes of all domains
##	sockets, for all socket types.
##	</p>
##	<p>
##	This is commonly used for domains
##	that can use lsof on all domains.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all domains sockets, for all socket types.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to get the attributes
##	of all domains sockets, for all socket types.
##	</p>
##	<p>
##	This interface was added for PCMCIA cardmgr
##	and is probably excessive.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all domains TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all domains UDP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	all domains UDP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get attribues of
##	all domains IPSEC key management sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get attribues of
##	all domains packet sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get attribues of
##	all domains raw sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	all domains key sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all domains unix datagram sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all domains unix datagram sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all domains unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of entry point
##	files for all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# domain_read_all_entry_files(domain)
#
 	 	


########################################
#
# domain_exec_all_entry_files(domain)
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete all
##	entrypoint files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Relabel to and from all entry point
##	file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Mmap all entry point files as executable.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##      Execute an entry_type in the specified domain.
## </summary>
## <param name="domain">
##	<summary>
##      The type of the process performing this action.
##	</summary>
## </param>
#
# cjp: added for userhelper
 	 	


########################################
## <summary>
##	Unconfined access to domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#
# These next macros are not templates, but actually are 
# support macros.  Due to the domain_ prefix, they 
# are placed in this module, to try to prevent confusion.
# They are called templates since regular m4 defines
# wont work here.
#

########################################
#
# domain_trans(source_domain,entrypoint_file,target_domain)
#
 	 	


########################################
#
# domain_auto_trans(source_domain,entrypoint_file,target_domain)
#
 	 	

## <summary>
## Basic filesystem types and interfaces.
## </summary>
## <desc>
## <p>
## This module contains basic filesystem types and interfaces. This
## includes:
## <ul>
##	<li>The concept of different file types including basic
##	files, mount points, tmp files, etc.</li>
##	<li>Access to groups of files and all files.</li>
##	<li>Types and interfaces for the basic filesystem layout
##	(/, /etc, /tmp, /usr, etc.).</li>
## </ul>
## </p>
## </desc>
## <required val="true">
##	Contains the concept of a file.
##	Comains the file initial SID.
## </required>

########################################
## <summary>
##	Make the specified type usable for files
##	in a filesystem.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for files.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_lock_file(type)
#
 	 	


########################################
#
# files_mountpoint(type)
#
 	 	


########################################
#
# files_pid_file(type)
#
 	 	


########################################
## <summary>
##	Make the specified type a 
##	configuration file.
## </summary>
## <param name="file_type">
##	<summary>
##	Type to be used as a configuration file.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type a 
##	polyinstantiated directory.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	polyinstantiated directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type a parent
##	of a polyinstantiated directory.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	parent directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type a
##	polyinstantiation member directory.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	member directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the domain use the specified
##	type of polyinstantiated directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain using the polyinstantiated
##	directory.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	member directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type a file that
##	should not be dontaudited from
##	browsing from user domains.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	member directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type a file
##	used for temporary files.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	temporary file.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transform the type into a file, for use on a
##	virtual memory filesystem (tmpfs).
## </summary>
## <param name="type">
##	<summary>
##	The type to be transformed.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: this is an odd interface, because to getattr
# all dirs, you need to search all the parent directories
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List all non-security directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list all
##	non-security directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of non security files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all non-security files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all directories on the filesystem, except
##	the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all files on the filesystem, except
##	the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all symbolic links on the filesystem, except
##	the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of non security symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of non security block devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of non security character devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all named pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all named pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of non security named pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all named sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all named sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of non security named sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all block nodes with file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all character nodes with file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel all files on the filesystem, except
##	the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Manage all files on the filesystem, except
##	the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_search_all(domain)
#
 	 	


########################################
#
# files_list_all(domain)
#
 	 	


########################################
#
# files_dontaudit_search_all_dirs(domain)
#
 	 	


#######################################
#
# files_relabelto_all_file_type_fs(domain)
#
 	 	


#######################################
#
# files_mount_all_file_type_fs(domain)
#
 	 	


#######################################
#
# files_unmount_all_file_type_fs(domain)
#
 	 	


########################################
#
# files_mounton_all_mountpoints(domain)
#
 	 	


########################################
#
# files_list_root(domain)
#
 	 	


########################################
## <summary>
##	Create an object in the root directory, with a private
##	type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_dontaudit_read_root_files(domain)
#
 	 	


########################################
#
# files_dontaudit_rw_root_files(domain)
#
 	 	


########################################
#
# files_dontaudit_rw_root_chr_files(domain)
#
 	 	


########################################
#
# files_delete_root_dir_entry(domain)
#
 	 	


########################################
#
# files_unmount_rootfs(domain)
#
 	 	


########################################
## <summary>
##	Get attributes of the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get attributes
##	of the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create directories in /boot
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a private type object in boot
##	with an automatic type transition
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private_type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files
##	in the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel from files in the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write symbolic links
##	in the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic links
##	in the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Install a kernel into the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete a kernel from /boot.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Getattr of directories with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes of
##	directories with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the contents of directories with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List contents of directories with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list contents of
##	directories with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a filesystem on a directory with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes of
##	files with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read files
##	with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read sockets with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read named pipes with the default file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_search_etc(domain)
#
 	 	


########################################
## <summary>
##	Set the attributes of the /etc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_list_etc(domain)
#
 	 	


########################################
#
# files_read_etc_files(domain)
#
 	 	


########################################
#
# files_rw_etc_files(domain)
#
 	 	


########################################
#
# files_manage_etc_files(domain)
#
 	 	


########################################
## <summary>
##	Delete system configuration files in /etc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_exec_etc_files(domain)
#
 	 	


#######################################
## <summary>
##	Relabel from and to generic files in /etc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_create_boot_flag(domain)
#
# /halt, /.autofsck, etc
#
 	 	


########################################
## <summary>
##	Read files in /etc that are dynamically
##	created on boot, such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read files
##	in /etc that are dynamically
##	created on boot, such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write files in /etc that are dynamically
##	created on boot, such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files in
##	/etc that are dynamically created on boot,
##	such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_etc_filetrans(domain,privatetype,class(es))
#
 	 	


########################################
## <summary>
##	Getattr of directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete directories
##	on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a filesystem on a directory on new filesystems
##	that has not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files
##	on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic links
##	on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write block device nodes on new filesystems 
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete block device nodes
##	on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete character device nodes
##	on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the home directories root
##	(/home).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the home directories root
##	(/home).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search home directories root (/home).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search
##	home directories root (/home).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list
##	home directories root (/home).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get listing of home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in /home.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="home_type">
##	<summary>
##	The private type.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The class of the object being created.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete objects in
##	lost+found directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_search_mnt(domain)
#
 	 	


########################################
#
# files_list_mnt(domain)
#
 	 	


########################################
## <summary>
##	Mount a filesystem on /mnt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete directories in /mnt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files in /mnt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic links in /mnt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the contents of the kernel module directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of the kernel module directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel from and to kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in the kernel module directories
##	with a private type via an automatic type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private_type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List world-readable directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read world-readable files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read world-readable symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read world-readable named pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read world-readable sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the specified type to associate
##	to a filesystem with the type of the
##	temporary directory (/tmp).
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to associate.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the	attributes of the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit listing of the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files in the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links in the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write generic named sockets in the tmp directory (/tmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of all tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_tmp_filetrans(domain,private_type,object class(es))
#
 	 	


########################################
#
# files_purge_tmp(domain)
#
 	 	


########################################
#
# files_search_usr(domain)
#
 	 	


########################################
## <summary>
##	List the contents of generic
##	directories in /usr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of files in /usr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_read_usr_files(domain)
#
 	 	


########################################
## <summary>
##	Execute generic programs in /usr in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel a file to the type used in /usr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links in /usr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in the /usr directory
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute programs in /usr/src in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_dontaudit_search_src(domain)
#
 	 	


########################################
#
# files_read_usr_src_files(domain)
#
 	 	


########################################
## <summary>
##	Install a system.map into the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read system.map in the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete a system.map in the /boot directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the contents of /var.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to write to /var.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search
##	the contents of /var.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of /var.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete directories
##	in the /var directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files in the /var directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files in the /var directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links in the /var directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic
##	links in the /var directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in the /var directory
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the /var/lib directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the /var/lib directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of the /var/lib directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in the /var/lib directory
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read generic files in /var/lib.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read generic symbolic links in /var/lib
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


# cjp: the next two interfaces really need to be fixed
# in some way.  They really neeed their own types.

########################################
#
# files_manage_urandom_seed(domain)
#
 	 	


########################################
## <summary>
##	Allow domain to manage mount tables
##	necessary for rpcd, nfsd, etc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the locks directory (/var/lock).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the
##	locks directory (/var/lock).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Add and remove entries in the /var/lock
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_getattr_generic_locks(domain)
#
 	 	


########################################
#
# files_manage_generic_locks(domain)
#
 	 	


########################################
#
# files_delete_all_locks(domain)
#
 	 	


########################################
## <summary>
##	Read all lock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_lock_filetrans(domain,private_type,[object class(es)])
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of the /var/run directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_search_pids(domain)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search
##	the /var/run directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_list_pids(domain)
#
 	 	


########################################
#
# files_pid_filetrans(domain,pidfile,[object class(es)])
#
 	 	


########################################
#
# files_rw_generic_pids(domain)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to write to daemon runtime data files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to ioctl daemon runtime data files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_read_all_pids(domain)
#
 	 	


########################################
## <summary>
##	Mount filesystems on all polyinstantiation
##	member directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_delete_all_pids(domain)
#
 	 	


########################################
#
# files_delete_all_pid_dirs(domain)
#
 	 	


########################################
#
# files_search_spool(domain)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search generic
##	spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
#
# files_list_spool(domain)
#
 	 	


########################################
#
# files_manage_generic_spool_dirs(domain)
#
 	 	


########################################
#
# files_read_generic_spool(domain)
#
 	 	


########################################
#
# files_manage_generic_spool(domain)
#
 	 	


########################################
## <summary>
##	Allow access to manage all polyinstantiated
##	directories on the system.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	



########################################
## <summary>
##	Allow attempts to modify any directory
## </summary>
## <param name="domain">
##	<summary>
##	Domain to allow
##	</summary>
## </param>
#
 	 	

## <summary>Policy for filesystems.</summary>
## <required val="true">
##	Contains the initial SID for the filesystems.
## </required>

########################################
## <summary>
##	Transform specified type into a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transform specified type into a filesystem
##	type which does not have extended attribute
##	support.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Associate the specified file type to persistent
##	filesystems with extended attributes.  This
##	allows a file of this type to be created on
##	a filesystem such as ext3, JFS, and XFS.
## </summary>
## <param name="file_type">
##	<summary>
##	The type of the to be associated.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Associate the specified file type to
##	filesystems which lack extended attributes
##	support.  This allows a file of this type
##	to be created on a filesystem such as
##	FAT32, and NFS.
## </summary>
## <param name="file_type">
##	<summary>
##	The type of the to be associated.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute files on a filesystem that does
##	not support extended attributes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a persistent filesystem which
##	has extended attributes, such as
##	ext3, JFS, or XFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a persistent filesystem which
##	has extended attributes, such as
##	ext3, JFS, or XFS.  This allows
##	some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a persistent filesystem which
##	has extended attributes, such as
##	ext3, JFS, or XFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a persistent
##	filesystem which has extended
##	attributes, such as ext3, JFS, or XFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to
##	get the attributes of a persistent
##	filesystem which has extended
##	attributes, such as ext3, JFS, or XFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow changing of the label of a
##	filesystem with extended attributes
##	using the context= mount option.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the filesystem quotas of a filesystem
##	with extended attributes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the filesystem quotas of a filesystem
##	with extended attributes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount an automount pseudo filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	



########################################
## <summary>
##	Remount an automount pseudo filesystem
##	This allows some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount an automount pseudo filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of an automount
##	pseudo filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search automount filesystem to use automatically
##	mounted filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read directories of automatically
##	mounted filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list directories of automatically
##	mounted filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Register an interpreter for new binary
##	file types, using the kernel binfmt_misc
##	support.  A common use for this is to
##	register a JVM as an interpreter for
##	Java byte code.  Registered binaries
##	can be directly executed on a command line
##	without specifying the interpreter.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain registering
##	the interpreter.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a CIFS or SMB network filesystem.
##	This allows some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a CIFS or
##	SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search directories on a CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of directories on a
##	CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list the contents
##	of directories on a CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files on a CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all noxattrfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all noxattrfs files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all noxattrfs symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read
##	files on a CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or
##	write files on a CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links on a CIFS or SMB filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute files on a CIFS or SMB
##	network filesystem, in the caller
##	domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain executing the files.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete directories
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the directories.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to create, read,
##	write, and delete directories
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the directories.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the files.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to create, read,
##	write, and delete files
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic links
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete named pipes
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the pipes.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete named sockets
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the sockets.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a file on a CIFS or SMB filesystem
##	in the specified domain.
## </summary>
## <desc>
##	<p>
##	Execute a file on a CIFS or SMB filesystem
##	in the specified domain.  This allows
##	the specified domain to execute any file
##	on these filesystems in the specified
##	domain.  This is not suggested.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
##	<p>
##	This interface was added to handle
##	home directories on CIFS/SMB filesystems,
##	in particular used by the ssh-agent policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the new process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a DOS filesystem, such as
##	FAT32 or NTFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a DOS filesystem, such as
##	FAT32 or NTFS.  This allows
##	some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a DOS filesystem, such as
##	FAT32 or NTFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a DOS
##	filesystem, such as FAT32 or NTFS.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow changing of the label of a
##	DOS filesystem using the context= mount option.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read eventpollfs files
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search inotifyfs filesystem. 
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List inotifyfs filesystem. 
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount an iso9660 filesystem, which
##	is usually used on CDs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount an iso9660 filesystem, which
##	is usually used on CDs.  This allows
##	some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount an iso9660 filesystem, which
##	is usually used on CDs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of an iso9660
##	filesystem, which is usually used on CDs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a NFS filesystem.  This allows
##	some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search directories on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list the contents
##	of directories on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read
##	files on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute files on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain executing the files.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or
##	write files on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read directories of RPC file system pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search directories of RPC file system pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search removable storage directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list removable storage directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read removable storage files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read removable storage files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read removable storage symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read directories of RPC file system pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files of RPC file system pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links of RPC file system pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read sockets of RPC file system pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain reading the symbolic links.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete directories
##	on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the directories.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to create, read,
##	write, and delete directories
##	on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files
##	on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the files.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to create,
##	read, write, and delete files
##	on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


#########################################
## <summary>
##	Create, read, write, and delete symbolic links
##	on a CIFS or SMB network filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the symbolic links.
##	</summary>
## </param>
#
 	 	


#########################################
## <summary>
##	Create, read, write, and delete named pipes
##	on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the pipes.
##	</summary>
## </param>
#
 	 	


#########################################
## <summary>
##	Create, read, write, and delete named sockets
##	on a NFS filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain managing the sockets.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a file on a NFS filesystem
##	in the specified domain.
## </summary>
## <desc>
##	<p>
##	Execute a file on a NFS filesystem
##	in the specified domain.  This allows
##	the specified domain to execute any file
##	on a NFS filesystem in the specified
##	domain.  This is not suggested.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
##	<p>
##	This interface was added to handle
##	home directories on NFS filesystems,
##	in particular used by the ssh-agent policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the new process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a NFS server pseudo filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a NFS server pseudo filesystem.
##	This allows some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a NFS server pseudo filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a NFS server
##	pseudo filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search NFS server directories.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	search on nfsd directories.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write NFS server files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	read or write on nfsd files.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a RAM filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a RAM filesystem.  This allows
##	some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a RAM filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a RAM filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search directories on a ramfs
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit Search directories on a ramfs
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit read on a ramfs files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dontaudit read on a ramfs fifo_files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to named pipe on a ramfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write a named pipe on a ramfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to named socket on a ramfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a ROM filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a ROM filesystem.  This allows
##	some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a ROM filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a ROM
##	filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a RPC pipe filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a RPC pipe filesystem.  This
##	allows some mount option to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a RPC pipe filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a RPC pipe
##	filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a tmpfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a tmpfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a tmpfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a tmpfs
##	filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the type to associate to tmpfs filesystems.
## </summary>
## <param name="type">
##	<summary>
##	The type of the object to be associated.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of tmpfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of tmpfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search tmpfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of generic tmpfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list the
##	contents of generic tmpfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	tmpfs directories
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# fs_tmpfs_filetrans(domain,derivedtype,class)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	generic tmpfs files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	auto moutpoints.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write generic tmpfs files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read tmpfs link files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write character nodes on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	dontaudit Read and write character nodes on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel character nodes on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write block nodes on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel block nodes on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write, create and delete generic
##	files on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write, create and delete symbolic
##	links on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write, create and delete socket
##	files on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write, create and delete character
##	nodes on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write, create and delete block nodes
##	on tmpfs filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount all filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount all filesystems.  This
##	allows some mount options to be changed.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount all filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all persistent
##	filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	all filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the quotas of all filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain getting quotas.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the quotas of all filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain setting quotas.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabelfrom all filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain doing the
##	getattr on the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all directories
##	with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search all directories with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List all directories with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all files with
##	a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all symbolic links with
##	a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all named pipes with
##	a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all named sockets with
##	a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all files with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all symbolic links with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all named pipes with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all named sockets with a filesystem type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to filesystems
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>
##	Policy for kernel threads, proc filesystem, 
##	and unlabeled processes and objects.
## </summary>
## <required val="true">
##	This module has initial SIDs.
## </required>

########################################
## <summary>
##	Allows to start userland processes
##	by transitioning to the specified domain.
## </summary>
## <param name="domain">
##	<summary>
##	The process type entered by kernel.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The executable type for the entrypoint.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows the kernel to mount filesystems on
##	the specified directory type.
## </summary>
## <param name="directory_type">
##	<summary>
##	The type of the directory to use as a mountpoint.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the process group of kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process sending the signal.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a generic signal to kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process sending the signal.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows the kernel to share state information with
##	the caller.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process with which to share state information.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Permits caller to use kernel file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process using the descriptors.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to use
##	kernel file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	The type of process not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write kernel unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write kernel unix datagram sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send messages to kernel unix datagram sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive messages from kernel TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic to the kernel.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Receive messages from kernel UDP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to load kernel modules
## </summary>
## <param name="domain">
##	<summary>
##	The process type to allow to load kernel modules.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to read the ring buffer.
## </summary>
## <param name="domain">
##	<summary>
##	The process type allowed to read the ring buffer.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read the ring buffer.
## </summary>
## <param name="domain">
##	<summary>
##	The domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Change the level of kernel messages logged to the console.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows the caller to clear the ring buffer.
## </summary>
## <param name="domain">
##	<summary>
##	The process type clearing the buffer.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get information on all System V IPC objects.
## </summary>
## <param name="domain">
##	<summary>
##	
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of a kernel debugging filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Mount a kernel debugging filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain mounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unmount a kernel debugging filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain unmounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Remount a kernel debugging filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain remounting the filesystem.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the contents of a kernel debugging filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read information from the debugging filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the proc filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search directories in /proc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the contents of directories in /proc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list the
##	contents of directories in /proc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of files in /proc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read symbolic links in /proc.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to read system state information in proc.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading the system state information.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to generic proc entries.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: this should probably go away.  any
# file thats writable in proc should really
# have its own label.
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to
##	read system state information in proc.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to
##	read system state information in proc.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Allow caller to read the state information for software raid.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading software raid state.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Allow caller to read and set the state information for software raid.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading software raid state.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to get attribues of core kernel interface.
## </summary>
## <param name="domain">
##	<summary>
##	The process type getting the attibutes.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes of
##	core kernel interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The process type to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to read kernel messages
##	using the /proc/kmsg interface.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading the messages.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to get the attributes of kernel message
##	interface (/proc/kmsg).
## </summary>
## <param name="domain">
##	<summary>
##	The process type getting the attributes.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get the attributes of kernel
##	message interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the network
##	state directory.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading the state.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow searching of network state directory.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading the state.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow caller to read the network state information.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading the state.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow caller to read the network state symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	The process type reading the state.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to search
##	the base directory of sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow access to read sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	The process type to allow to read sysctl directories.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow caller to read the device sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	The process type to allow to read the device sysctls.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write device sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to search virtual memory sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow caller to read virtual memory sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Read and write virtual memory sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search network sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to search network sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to read network sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
##
#
 	 	


########################################
## <summary>
##	Allow caller to modiry contents of sysctl network files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to read unix domain
##	socket sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write unix domain
##	socket sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the hotplug sysctl.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the hotplug sysctl.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the modprobe sysctl.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the modprobe sysctl.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search generic kernel sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read generic kernel sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to write generic kernel sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write generic kernel sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read filesystem sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write fileystem sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read IRQ sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write IRQ sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
##
#
 	 	


########################################
#
# kernel_read_rpc_sysctls(domain)
#
 	 	


########################################
#
# kernel_rw_rpc_sysctls(domain)
#
 	 	


########################################
## <summary>
##	Allow caller to read all sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write all sysctls.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a kill signal to unlabeled processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send general signals to unlabeled processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a null signal to unlabeled processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a stop signal to unlabeled processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a child terminated signal to unlabeled processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get the
##	attributes of an unlabeled file.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to
##	read an unlabeled file.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get the
##	attributes of unlabeled symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get the
##	attributes of unlabeled named pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get the
##	attributes of unlabeled named sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get attributes for
##	unlabeled block devices.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write unlabeled block device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts by caller to get attributes for
##	unlabeled character devices.
## </summary>
## <param name="domain">
##	<summary>
##	The process type not to audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to relabel unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	The process type relabeling the objects.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to relabel unlabeled files.
## </summary>
## <param name="domain">
##	<summary>
##	The process type relabeling the objects.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to relabel unlabeled symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	The process type relabeling the objects.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to relabel unlabeled named pipes.
## </summary>
## <param name="domain">
##	<summary>
##	The process type relabeling the objects.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to relabel unlabeled named sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The process type relabeling the objects.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive messages from an
##	unlabeled IPSEC association.
## </summary>
## <desc>
##	<p>
##	Send and receive messages from an
##	unlabeled IPSEC association.  Network
##	connections that are not protected
##	by IPSEC have use an unlabeled
##	assocation.
##	</p>
##	<p>
##	The corenetwork interface
##	corenet_non_ipsec_sendrecv() should
##	be used instead of this one.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to kernel module resources.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Multicategory security policy</summary>
## <required val="true">
##	Contains attributes used in MCS policy.
## </required>

########################################
## <summary>
##	This domain is allowed to sigkill and sigstop 
##	all domains regardless of their MCS level.
## </summary>
## <param name="domain">
##	<summary>
##	Domain target for user exemption.
##	</summary>
## </param>
#
 	 	

## <summary>Multilevel security policy</summary>
## <desc>
##	<p>
##	This module contains interfaces for handling multilevel
##	security.  The interfaces allow the specified subjects
##	and objects to be allowed certain privileges in the
##	MLS rules.
##	</p>
## </desc>
## <required val="true">
##	Contains attributes used in MLS policy.
## </required>

########################################
## <summary>
##	Make specified domain MLS trusted
##	for reading from files at higher levels.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain MLS trusted
##	for writing to files at lower levels.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain MLS trusted
##	for raising the level of files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain MLS trusted
##	for lowering the level of files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the specified domain to do a MLS
##	range transition that changes
##	the current level.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain a target domain
##	for MLS range transitions that change
##	the current level.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain MLS trusted
##	for reading from processes at higher levels.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain MLS trusted
##	for writing to processes at lower levels.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make specified domain MLS trusted
##	for setting the level of processes
##	it executes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	



########################################
## <summary>
##	Make specified object MLS trusted.
## </summary>
## <desc>
##	<p>
##	Make specified object MLS trusted.  This
##	allows all levels to read and write the
##	object.
##	</p>
##	<p>
##	This currently only applies to filesystem
##	objects, for example, files and directories.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The type of the object.
##	</summary>
## </param>
#
 	 	

## <summary>
##	Policy for kernel security interface, in particular, selinuxfs.
## </summary>
## <required val="true">
##	Contains the policy for the kernel SELinux security interface.
## </required>

########################################
## <summary>
##	Gets the caller the mountpoint of the selinuxfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	The process type requesting the selinuxfs mountpoint.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the selinuxfs directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search selinuxfs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search selinuxfs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read
##	generic selinuxfs entries
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows the caller to get the mode of policy enforcement
##	(enforcing or permissive mode).
## </summary>
## <param name="domain">
##	<summary>
##	The process type to allow to get the enforcing mode.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to set the mode of policy enforcement
##	(enforcing or permissive mode).
## </summary>
## <desc>
##	<p>
##	Allow caller to set the mode of policy enforcement
##	(enforcing or permissive mode).
##	</p>
##	<p>
##	Since this is a security event, this action is
##	always audited.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The process type to allow to set the enforcement mode.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to load the policy into the kernel.
## </summary>
## <param name="domain">
##	<summary>
##	The process type that will load the policy.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to set the state of Booleans to
##	enable or disable conditional portions of the policy.
## </summary>
## <desc>
##	<p>
##	Allow caller to set the state of Booleans to
##	enable or disable conditional portions of the policy.
##	</p>
##	<p>
##	Since this is a security event, this action is
##	always audited.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The process type allowed to set the Boolean.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow caller to set SELinux access vector cache parameters.
## </summary>
## <desc>
##	<p>
##	Allow caller to set SELinux access vector cache parameters.
##	The allows the domain to set performance related parameters
##	of the AVC, such as cache threshold.
##	</p>
##	<p>
##	Since this is a security event, this action is
##	always audited.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The process type to allow to set security parameters.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to validate security contexts.
## </summary>
## <param name="domain">
##	<summary>
##	The process type permitted to validate contexts.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to compute an access vector.
## </summary>
## <param name="domain">
##	<summary>
##	The process type allowed to compute an access vector.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Calculate the default type for object creation.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to compute polyinstatntiated
##	directory members.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Calculate the context for relabeling objects.
## </summary>
## <desc>
##	<p>
##	Calculate the context for relabeling objects.
##	This is determined by using the type_change
##	rules in the policy, and is generally used
##	for determining the context for relabeling
##	a terminal when a user logs in.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows caller to compute possible contexts for a user.
## </summary>
## <param name="domain">
##	<summary>
##	The process type allowed to compute user contexts.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to the SELinux kernel security server.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for terminals.</summary>
## <required val="true">
##	Depended on by other required modules.
## </required>

########################################
## <summary>
##	Transform specified type into a pty type.
## </summary>
## <param name="pty_type">
##	<summary>
##	An object type that will applied to a pty.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transform specified type into an user
##	pty type. This allows it to be relabeled via
##	type change by login programs such as ssh.
## </summary>
## <param name="userdomain">
##	<summary>
##	The type of the user domain associated with
##	this pty.
##	</summary>
## </param>
## <param name="object_type">
##	<summary>
##	An object type that will applied to a pty.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transform specified type into a pty type
##	used by login programs, such as sshd.
## </summary>
## <param name="pty_type">
##	<summary>
##	An object type that will applied to a pty.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transform specified type into a tty type.
## </summary>
## <param name="tty_type">
##	<summary>
##	An object type that will applied to a tty.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a pty in the /dev/pts directory.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process creating the pty.
##	</summary>
## </param>
## <param name="pty_type">
##	<summary>
##	The type of the pty.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the console, all
##	ttys and all ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to the console.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read from the console.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read from and write to the console.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attemtps to read from
##	or write to the console.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of the console
##	device node.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the /dev/pts directory.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the contents of the /dev/pts directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the
##	contents of the /dev/pts directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the /dev/pts directory to
##	list all ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read the
##	/dev/pts directory.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to create, read,
##	write, or delete the /dev/pts directory.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	ioctl of generic pty types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for ppp
 	 	


########################################
## <summary>
##	Read and write the generic pty
##	type.  This is generally only used in
##	the targeted policy.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dot not audit attempts to read and
##	write the generic pty type.  This is
##	generally only used in the targeted policy.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the controlling
##	terminal (/dev/tty).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the pty multiplexor (/dev/ptmx).
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to allow access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and
##	write the pty multiplexor (/dev/ptmx).
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all user
##	pty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of any user pty
##	device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of all user
##	pty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel to all user ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write all user ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read any
##	user ptys.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel from and to all user
##	user pty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all unallocated
##	tty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of all unallocated tty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of all unallocated
##	tty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to ioctl
##	unallocated tty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel from and to the unallocated
##	tty type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel from all user tty types to
##	the unallocated tty type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to unallocated ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write unallocated ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or
##	write unallocated ttys.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all user tty
##	device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of any user tty
##	device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of all user tty
##	device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel from and to all user
##	user tty device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write to all user ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write all user to all user ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	any user ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


## <summary>Common policy for authentication and user login.</summary>

#######################################
## <summary>
##	Common template to create a domain for authentication.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is allowed
##	to authenticate users by using PAM unix_chkpwd support.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	The per user domain template for the authlogin module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is allowed
##	to authenticate users by using PAM unix_chkpwd support.
##	This domain will be used by any programs running in the
##	user domain which use PAM to authenticate.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Run unix_chkpwd to check a password
##	for a user domain.
## </summary>
## <desc>
##	<p>
##	Run unix_chkpwd to check a password
##	for a user domain.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Use the login program as an entry point program.
## </summary>
## <param name="domain">
##	<summary>
##	The type of process using the login program as entry point.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a login_program in the target domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the login_program process.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Run unix_chkpwd to check a password.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the shadow passwords file.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of the shadow passwords file.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the shadow passwords file (/etc/shadow)
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
# cjp: these next three interfaces are split 
# since typeattribute does not work in conditionals
# yet, otherwise they should be one interface.
# 
 	 	


 	 	


 	 	


########################################
## <summary>
##	Do not audit attempts to read the shadow
##	password file (/etc/shadow).
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the shadow password file (/etc/shadow).
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_manage_shadow(domain)
#
 	 	


#######################################
## <summary>
##	Relabel to the shadow
##	password file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Relabel from and to the shadow
##	password file type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Append to the login failure log.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_rw_faillog(domain)
#
 	 	


#######################################
## <summary>
##	Read the last logins log.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Append only to the last logins log.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Read and write to the last logins log.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute pam programs in the pam domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute pam programs in the PAM domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to allow the PAM domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the PAM domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute the pam program.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Manage var auth files. Used by various other applications
##	and pam applets etc.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_read_pam_pid(domain)
#
 	 	


#######################################
## <summary>
##	Do not audit attemps to read PAM pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete pam PID files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Manage pam PID files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_domtrans_pam_console(domain)
#
 	 	


########################################
## <summary>
##	Search the contents of the
##	pam_console data directory.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_list_pam_console_data(domain)
#
 	 	


#######################################
#
# auth_read_pam_console_data(domain)
#
 	 	


#######################################
#
# auth_manage_pam_console_data(domain)
#
 	 	


#######################################
## <summary>
##	Delete pam_console data.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all directories on the filesystem, except
##	the shadow passwords and listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all files on the filesystem, except
##	the shadow passwords and listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all symbolic links on the filesystem, except
##	the shadow passwords and listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel all files on the filesystem, except
##	the shadow passwords and listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#

 	 	


########################################
## <summary>
##	Manage all files on the filesystem, except
##	the shadow passwords and listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the domain perfoming this action.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#

 	 	


########################################
## <summary>
##	Execute utempter programs in the utempter domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute utempter programs in the utempter domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to allow the utempter domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the utempter domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Do not audit attemps to execute utempter executable.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_setattr_login_records(domain)
#
 	 	


#######################################
#
# auth_read_login_records(domain)
#
 	 	


#######################################
#
# auth_dontaudit_write_login_records(domain)
#
 	 	


#######################################
## <summary>
##	Append to login records (wtmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Write to login records (wtmp).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
#
# auth_rw_login_records(domain)
#
 	 	


#######################################
#
# auth_log_filetrans_login_records(domain)
#
 	 	


#######################################
#
# auth_manage_login_records(domain)
#
 	 	


########################################
## <summary>
##	Use nsswitch to look up uid-username mappings.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to the authlogin module.
## </summary>
## <desc>
##	<p>
##	Unconfined access to the authlogin module.
##	</p>
##	<p>
##	Currently, this only allows assertions for
##	the shadow passwords file (/etc/shadow) to
##	be passed.  No access is granted yet.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Filesystem automounter service.</summary>

########################################
## <summary>
##	Execute automount in the automount domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute automount in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the attributes
##	of automount temporary directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	

## <summary>Berkeley internet name domain DNS server.</summary>

########################################
## <summary>
##	Execute ndc in the ndc domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send generic signals to BIND.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute ndc in the ndc domain, and
##	allow the specified role the ndc domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the bind domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the bind domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute bind in the named domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read DNSSEC keys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read BIND named configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write BIND named configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	BIND configuration directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the BIND cache directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	BIND cache files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the attributes
##	of the BIND pid directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read BIND zone files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


## <summary>Periodic execution of scheduled commands.</summary>

#######################################
## <summary>
##	The per user domain template for the cron module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domains which are used
##	for running programs on behalf of the user, from cron.
##	A type for the user crontab is also created.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	The administrative functions template for the cron module.
## </summary>
## <desc>
##	<p>
##	This template creates rules for administrating the cron service,
##	allowing the specified user to manage other user crontabs.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified program domain accessable
##	from the system cron jobs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to transition to.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The type of the file used as an entrypoint to this domain.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit and use a file descriptor
##	from the cron daemon.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to the cron daemon.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read a cron daemon unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to write cron daemon unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write a cron daemon unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read, and write cron daemon TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the directory containing user cron tables.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute APM in the apm domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit and use a file descriptor
##	from system cron jobs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write a system cron job unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write a system cron job unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read temporary files from the system cron jobs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to append temporary
##	files from the system cron jobs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	

## <summary>Collection of tools for managing UNIX services</summary>
## <desc>
##	<p>
##		Policy for DJB's daemontools
##	</p>
## </desc>

########################################
## <summary>
##	An ipc channel between the supervised domain and svc_start_t
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access to svc_start_t.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Define a specified domain as a supervised service.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##      The type associated with the process program.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Execute in the svc_start_t domain.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Execute in the svc_run_t domain.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Execute in the svc_multilog_t domain.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Allow a domain to read svc_svc_t files.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Allow a domain to create svc_svc_t files.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>
## Policy for devd, for supporting the
## connection and disconnection of devices at runtime.
## </summary>
              
## <summary>Dynamic host configuration protocol (DHCP) server</summary>

########################################
## <summary>
##	Set the attributes of the DCHP
##	server state files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Tools for filesystem management, such as mkfs and fsck.</summary>

########################################
## <summary>
##	Execute fs tools in the fstools domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute fs tools in the fstools domain, and
##	allow the specified role the fs tools domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the fs tools domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the fs tools domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute fsadm in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel a file to the type used by the
##	filesystem tools programs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete a file used by the
##	filesystem tools programs.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for getty.</summary>

########################################
## <summary>
##	Execute gettys in the getty domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit and use getty file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to read getty log file.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to read getty config file.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to edit getty config file.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for changing the system host name.</summary>

########################################
## <summary>
##	Execute hostname in the hostname domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute hostname in the hostname domain, and
##	allow the specified role the hostname domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the hostname domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the hostname domain to use.
##	</summary>
## </param>
#
 	 	


########################################
##     <summary>
##             Execute hostname in the caller domain.
##     </summary>
##     <param name="domain">
##	<summary>
##             The type of the process performing this action.
##	</summary>
##     </param>
#
 	 	

## <summary>Internet services daemon.</summary>

########################################
## <summary>
##	Define the specified domain as a inetd service.
## </summary>
## <desc>
##	<p>
##	Define the specified domain as a inetd service.  The
##	inetd_service_domain(), inetd_tcp_service_domain(),
##	or inetd_udp_service_domain() interfaces should be used
##	instead of this interface, as this interface only provides
##	the common rules to these three interfaces.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The type associated with the inetd service process.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The type associated with the process program.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Define the specified domain as a TCP inetd service.
## </summary>
## <param name="domain">
##	<summary>
##	The type associated with the inetd service process.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The type associated with the process program.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Define the specified domain as a UDP inetd service.
## </summary>
## <param name="domain">
##	<summary>
##	The type associated with the inetd service process.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The type associated with the process program.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Define the specified domain as a TCP and UDP inetd service.
## </summary>
## <param name="domain">
##	<summary>
##	The type associated with the inetd service process.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The type associated with the process program.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit and use file descriptors from inetd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect to the inetd service using a TCP connection.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Run inetd child process in the inet child domain
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic to inetd.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write inetd TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

## <summary>System initialization programs (init and init scripts).</summary>

########################################
## <summary>
##	Create a domain which can be started by init.
## </summary>
## <param name="domain">
##	<summary>
##	Type to be used as a domain.
##	</summary>
## </param>
## <param name="entry_point">
##	<summary>
##	Type of the program to be used as an entry point to this domain.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a domain for long running processes
##	(daemons) which can be started by init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Type to be used as a domain.
##	</summary>
## </param>
## <param name="entry_point">
##	<summary>
##	Type of the program to be used as an entry point to this domain.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a domain for short running processes
##	which can be started by init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Type to be used as a domain.
##	</summary>
## </param>
## <param name="entry_point">
##	<summary>
##	Type of the program to be used as an entry point to this domain.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_domtrans(domain)
#
 	 	


########################################
## <summary>
##	Execute the init program in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_getpgid(domain)
#
 	 	


########################################
#
# init_getattr_initctl(domain)
#
 	 	


########################################
#
# init_dontaudit_getattr_initctl(domain)
#
 	 	


########################################
#
# init_write_initctl(domain)
#
 	 	


########################################
#
# init_rw_initctl(domain)
#
 	 	


########################################
#
# init_dontaudit_rw_initctl(domain)
#
 	 	


########################################
## <summary>
##	Send init a null signal.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send init a SIGCHLD signal.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_use_fds(domain)
#
 	 	


########################################
#
# init_dontaudit_use_fds(domain)
#
 	 	


########################################
## <summary>
##	Send UDP network traffic to init.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make init scripts an entry point for
##	the specified domain.
## </summary>
## <param name="domain">
##	<summary>
##	The domain for which init scripts are an entrypoint.
##	</summary>
## </param>
# cjp: added for gentoo integrated run_init
 	 	


########################################
#
# init_domtrans_script(domain)
#
 	 	


########################################
## <summary>
##	Execute a init script in a specified domain.
## </summary>
## <desc>
##      <p>
##	Execute a init script in a specified domain.
##      </p>
##      <p>
##      No interprocess communication (signals, pipes,
##      etc.) is provided by this interface since
##      the domains are not owned by this module.
##      </p>
## </desc>
## <param name="source_domain">
##	<summary>
##	Domain to transition from.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	Domain to transition to.
##	</summary>
## </param>
# cjp: added for gentoo integrated run_init
 	 	


########################################
## <summary>
##	Start and stop daemon programs directly.
## </summary>
## <desc>
##	<p>
##	Start and stop daemon programs directly
##	in the traditional "/etc/init.d/daemon start"
##	style, and do not require run_init.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be performing this action.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal of the user.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write an init script unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attribute of init script entrypoint files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_exec_script_files(domain)
#
 	 	


########################################
## <summary>
##	Read the process state (/proc/pid) of the init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_use_script_fds(domain)
#
 	 	


########################################
#
# init_dontaudit_use_script_fds(domain)
#
 	 	


########################################
#
# init_getpgid_script(domain)
#
 	 	


########################################
## <summary>
##	Send SIGCHLD signals to init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send generic signals to init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send null signals to init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write init script unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send UDP network traffic to init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the specified domain to connect to
##	init scripts with a unix socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dont audit the specified domain connecting to
##	init scripts with a unix domain stream socket.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive messages from
##	init scripts over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write the init script pty.
## </summary>
## <desc>
##	<p>
##	Read and write the init script pty.  This
##	pty is generally opened by the open_init_pty
##	portion of the run_init program so that the
##	daemon does not require direct access to
##	the administrator terminal.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and
##	write the init script pty.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read init scripts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write init script temporary data.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create files in a init script
##	temporary data directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of init script process id files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_read_utmp(domain)
#
 	 	


########################################
#
# init_dontaudit_write_utmp(domain)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to lock 
##	init script pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# init_rw_utmp(domain)
#
 	 	


########################################
#
# init_dontaudit_rw_utmp(domain)
#
 	 	


########################################
## <summary>
##      Create, read, write, and delete utmp.
## </summary>
## <param name="domain">
##	<summary>
##      Domain access allowed.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for system libraries.</summary>

########################################
## <summary>
##	Execute ldconfig in the ldconfig domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute ldconfig in the ldconfig domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to allow the ldconfig domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the ldconfig domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Use the dynamic link/loader for automatic loading
##	of shared libraries.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Use the dynamic link/loader for automatic loading
##	of shared libraries with legacy support.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute the dynamic link/loader in the caller's domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete the
##	dynamic link/loader.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Relabel to and from the type used for
##	the dynamic link/loader.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Modify the dynamic link/loader's cached listing
##	of shared libraries.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files in the library directories, such
##	as static libraries.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute library scripts in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Load and execute functions from generic
##	lib files as shared libraries.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete generic
##	files in library directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Relabel files to the type used in library directories.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel to and from the type used
##	for generic lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Delete generic symlinks in library directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Create, read, write, and delete shared libraries.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	


########################################
## <summary>
##	Load and execute functions from shared libraries.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Load and execute functions from shared libraries,
##	with legacy support.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel to and from the type used for
##	shared libraries.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for prelink
 	 	

## <summary>Policy for local logins.</summary>

########################################
## <summary>
##	Execute local logins in the local login domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow processes to inherit local login file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to inherit local login file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a null signal to local login processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for the kernel message logger and system logging daemon.</summary>

#######################################
## <summary>
##	Make the specified type a file
##	used for logs.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a log.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the audit log.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute auditctl in the auditctl domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute syslogd in the syslog domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
#
# logging_log_filetrans(domain,privatetype,[class(es)])
#
 	 	


#######################################
#
# logging_send_syslog_msg(domain)
#
 	 	


########################################
## <summary>
##	Read the auditd configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allows the domain to open a file in the
##	log directory, but does not allow the listing
##	of the contents of the log directory.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	List the contents of the generic log directory (/var/log).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Read and write the generic log directory (/var/log).
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
#
# logging_dontaudit_getattr_all_logs(domain)
#
 	 	


#######################################
#
# logging_append_all_logs(domain)
#
 	 	


#######################################
#
# logging_read_all_logs(domain)
#
 	 	


########################################
## <summary>
##	Execute all log files in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
# cjp: not sure why this is needed.  This was added
# because of logrotate.
 	 	


#######################################
#
# logging_manage_all_logs(domain)
#
 	 	


#######################################
#
# logging_read_generic_logs(domain)
#
 	 	


#######################################
#
# logging_write_generic_logs(domain)
#
 	 	


########################################
## <summary>
##	Read and write generic log files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	generic log files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Miscelaneous files.</summary>

########################################
## <summary>
##	Read system SSL certificates.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read fonts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete fonts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read hardware identification data.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to read localization info
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to read legacy time localization info
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search man pages.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read man pages
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Delete man pages
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
# cjp: added for tmpreaper
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete man pages
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read public files used for file
##	transfer services.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete public files
##	and directories used for file transfer services.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read TeX data
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute TeX data programs in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for kernel module utilities</summary>

########################################
## <summary>
##	Read the dependencies of kernel modules.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the configuration options used when
##	loading modules.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Rename a file with the configuration options used when
##	loading modules.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconditionally execute insmod in the insmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
# cjp: this is added for pppd, due to nested
# conditionals not working.
 	 	


########################################
## <summary>
##	Execute insmod in the insmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute insmod in the insmod domain, and
##	allow the specified role the insmod domain,
##	and use the caller's terminal.  Has a sigchld
##	backchannel.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the insmod domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the insmod domain to use.
##	</summary>
## </param>
#
 	 	


########################################
#
# modutils_exec_insmod(domain)
#
 	 	


########################################
## <summary>
##	Execute depmod in the depmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute depmod in the depmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the depmod domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the depmod domain to use.
##	</summary>
## </param>
#
 	 	


########################################
#
# modutils_exec_depmod(domain)
#
 	 	


########################################
## <summary>
##	Execute depmod in the depmod domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute update_modules in the update_modules domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the update_modules domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the update_modules domain to use.
##	</summary>
## </param>
#
 	 	


########################################
#
# modutils_exec_update_mods(domain)
#
 	 	

## <summary>Policy for mount.</summary>

########################################
## <summary>
##	Execute mount in the mount domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute mount in the mount domain, and
##	allow the specified role the mount domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the mount domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the mount domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute mount in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Use file descriptors for mount.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the mount domain to send nfs requests for mounting
##	network drives
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


## <summary>Policy common to all email tranfer agents.</summary>

########################################
## <summary>
##	MTA stub interface.  No access allowed.
## </summary>
## <param name="domain" optional="true">
##	<summary>
##	N/A
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Basic mail transfer agent domain template.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is
##	a email transfer agent, which sends mail on
##	behalf of the user.
##	</p>
##	<p>
##	This is the basic types and rules, common
##	to the system agent and user agents.
##	</p>
## </desc>
## <param name="domain_prefix">
##	<summary>
##	The prefix of the domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	The per user domain template for the mta module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is
##	a email transfer agent, which sends mail on
##	behalf of the user.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Provide extra permissions for admin users
##	mail domain.
## </summary>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_mailserver(domain,entrypointtype)
#
 	 	


########################################
## <summary>
##	Modified mailserver interface for
##	sendmail daemon use.
## </summary>
## <desc>
##	<p>
##	A modified MTA mail server interface for
##	the sendmail program.  It's design does
##	not fit well with policy, and using the
##	regular interface causes a type_transition
##	conflict if direct running of init scripts
##	is enabled.
##	</p>
##	<p>
##	This interface should most likely only be used
##	by the sendmail policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The type to be used for the mail server.
##	</summary>
## </param>
## <param name="entry_point">
##	<summary>
##	The type to be used for the domain entry point program.
##	</summary>
## </param>
 	 	


#######################################
## <summary>
##	Make a type a mailserver type used
##	for sending mail.
## </summary>
## <param name="domain">
##	<summary>
##	Mail server domain type used for sending mail.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Make a type a mailserver type used
##	for delivering mail to local users.
## </summary>
## <param name="domain">
##	<summary>
##	Mail server domain type used for delivering mail.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Make a type a mailserver type used
##	for sending mail on behalf of local
##	users to the local mail spool.
## </summary>
## <param name="domain">
##	<summary>
##	Mail server domain type used for sending local mail.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_send_mail(domain)
#
 	 	


#######################################
#
# mta_exec(domain)
#
 	 	


########################################
## <summary>
##	Read mail server configuration.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read mail address aliases.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Type transition files created in /etc
##	to the mail address aliases type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_rw_aliases(domain)
#
 	 	


#######################################
## <summary>
##	Do not audit attempts to read and write TCP
##	sockets of mail delivery domains.
## </summary>
## <param name="domain">
##	<summary>
##	Mail server domain.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Connect to all mail servers over TCP.
## </summary>
## <param name="domain">
##	<summary>
##	Mail server domain.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Do not audit attempts to read a symlink
##	in the mail spool.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_getattr_spool(domain)
#
 	 	


 	 	


#######################################
## <summary>
##	Create private objects in the 
##	mail spool directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_rw_spool(domain)
#
 	 	


#######################################
## <summary>
##	Create, read, and write the mail spool.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Delete from the mail spool.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_manage_spool(domain)
#
 	 	


#######################################
## <summary>
##	Do not audit attempts to read and
##	write the mail queue.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


#######################################
#
# mta_manage_queue(domain)
#
 	 	


#######################################
## <summary>
##	Read sendmail binary.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
# cjp: added for postfix
 	 	


#######################################
## <summary>
##	Read and write unix domain stream sockets
##	of user mail domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Postfix email server</summary>

########################################
## <summary>
##	Postfix stub interface.  No access allowed.
## </summary>
## <param name="domain" optional="true">
##	<summary>
##	N/A
##	</summary>
## </param>
#
 	 	


 	 	


 	 	


 	 	


 	 	


 	 	


########################################
## <summary>
##	Read postfix configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create files with the specified type in
##	the postfix configuration directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and
##	write postfix local delivery
##	TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to use
##	postfix master process file
##	file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute postfix_map in the postfix_map domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute postfix_map in the postfix_map domain, and
##	allow the specified role the postfix_map domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the postfix_map domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the postfix_map domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute the master postfix program in the
##	postfix_master domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute the master postfix program in the
##	caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search postfix mail spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List postfix mail spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute postfix user mail programs
##	in their respective domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for rshd, rlogind, and telnetd.</summary>

########################################
## <summary>
##	Domain transition to the remote login domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


## <summary>Policy for SELinux policy and userland applications.</summary>

#######################################
## <summary>
##	Execute checkpolicy in the checkpolicy domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute checkpolicy in the checkpolicy domain, and
##	allow the specified role the checkpolicy domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the checkpolicy domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the checkpolicy domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
#
# seutil_exec_checkpolicy(domain)
#
 	 	


#######################################
## <summary>
##	Execute load_policy in the load_policy domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute load_policy in the load_policy domain, and
##	allow the specified role the load_policy domain,
##	and use the caller's terminal.
##	Has a SIGCHLD signal backchannel.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the load_policy domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the load_policy domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
#
# seutil_exec_loadpolicy(domain)
#
 	 	


#######################################
#
# seutil_read_loadpolicy(domain)
#
 	 	


#######################################
## <summary>
##	Execute newrole in the load_policy domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute newrole in the newrole domain, and
##	allow the specified role the newrole domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the newrole domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the newrole domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
#
# seutil_exec_newrole(domain)
#
 	 	


########################################
## <summary>
##	Do not audit the caller attempts to send
##	a signal to newrole.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
#
# seutil_sigchld_newrole(domain)
#
 	 	


#######################################
#
# seutil_use_newrole_fds(domain)
#
 	 	


#######################################
## <summary>
##	Execute restorecon in the restorecon domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute restorecon in the restorecon domain, and
##	allow the specified role the restorecon domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the restorecon domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the restorecon domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
#
# seutil_exec_restorecon(domain)
#
 	 	


########################################
## <summary>
##	Execute run_init in the run_init domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute init scripts in the run_init domain.
## </summary>
## <desc>
##	<p>
##	Execute init scripts in the run_init domain.
##	This is used for the Gentoo integrated run_init.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute run_init in the run_init domain, and
##	allow the specified role the run_init domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the run_init domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the run_init domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute init scripts in the run_init domain, and
##	allow the specified role the run_init domain,
##	and use the caller's terminal.
## </summary>
## <desc>
##	<p>
##	Execute init scripts in the run_init domain, and
##	allow the specified role the run_init domain,
##	and use the caller's terminal.
##	</p>
##	<p>
##	This is used for the Gentoo integrated run_init.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the run_init domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the run_init domain to use.
##	</summary>
## </param>
#
 	 	


########################################
#
# seutil_use_runinit_fds(domain)
#
 	 	


########################################
## <summary>
##	Execute setfiles in the setfiles domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute setfiles in the setfiles domain, and
##	allow the specified role the setfiles domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the setfiles domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the setfiles domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
#
# seutil_exec_setfiles(domain)
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the SELinux
##	configuration directory (/etc/selinux).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read the SELinux
##	userland configuration (/etc/selinux).
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
#
# seutil_read_config(domain)
#
 	 	


########################################
## <summary>
##	Search the policy directory with default_context files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	



########################################
#
# seutil_read_default_contexts(domain)
#
 	 	


########################################
#
# seutil_read_file_contexts(domain)
#
 	 	


########################################
## <summary>
##	Read and write the file_contexts files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
#
# seutil_read_bin_policy(domain)
#
 	 	


########################################
#
# seutil_create_bin_policy(domain)
#
 	 	


########################################
## <summary>
##	Allow the caller to relabel a file to the binary policy type.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
#
# seutil_manage_bin_policy(domain)
#
 	 	


########################################
#
# seutil_read_src_policy(domain)
#
 	 	


########################################
#
# seutil_manage_src_policy(domain)
#
 	 	


########################################
## <summary>
##	Execute a domain transition to run semanage.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute semanage in the semanage domain, and
##	allow the specified role the semanage domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the checkpolicy domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the semanage domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Full management of the semanage
##	module store.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Get read lock on module store
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Get trans lock on module store
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for sendmail.</summary>

########################################
## <summary>
##	Sendmail stub interface.  No access allowed.
## </summary>
## <param name="domain" optional="true">
##	<summary>
##	N/A
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Domain transition to sendmail.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write sendmail TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

########################################
## <summary>
##	Read and write sendmail unix_stream_sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete sendmail logs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create sendmail logs with the correct type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Secure shell client and server policy.</summary>

#######################################
## <summary>
##	The per user domain template for the ssh module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domains which are used
##	for ssh client sessions and user ssh agents.  A derived
##	type is also created to protect the user ssh keys.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	The template to define a ssh server.
## </summary>
## <desc>
##	<p>
##	This template creates a domains to be used for
##	creating a ssh server.  This is typically done
##	to have multiple ssh servers of different sensitivities,
##	such as for an internal network-facing ssh server, and
##	a external network-facing ssh server.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the server domain (e.g., sshd
##	is the prefix for sshd_t).
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to the ssh server.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read a ssh server unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and write
##	ssh server TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect to SSH daemons over TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read ssh server keys
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy controlling access to storage devices</summary>

########################################
## <summary>
##	Allow the caller to get the attributes of fixed disk
##	device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to get
##	the attributes of fixed disk device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to set the attributes of fixed disk
##	device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to set
##	the attributes of fixed disk device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly read from a fixed disk.
##	This is extremly dangerous as it can bypass the
##	SELinux protections for filesystem objects, and
##	should only be used by trusted domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to read
##	fixed disk device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly write to a fixed disk.
##	This is extremly dangerous as it can bypass the
##	SELinux protections for filesystem objects, and
##	should only be used by trusted domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to write
##	fixed disk device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete fixed disk device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create block devices in /dev with the fixed disk type
##	via an automatic type transition.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create block devices in on a tmpfs filesystem with the
##	fixed disk type via an automatic type transition.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel fixed disk device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Enable a fixed disk device as swap space
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to get the attributes of
##	the generic SCSI interface device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to set the attributes of
##	the generic SCSI interface device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly read, in a
##	generic fashion, from any SCSI device.
##	This is extremly dangerous as it can bypass the
##	SELinux protections for filesystem objects, and
##	should only be used by trusted domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly write, in a
##	generic fashion, from any SCSI device.
##	This is extremly dangerous as it can bypass the
##	SELinux protections for filesystem objects, and
##	should only be used by trusted domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set attributes of the device nodes
##	for the SCSI generic inerface.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	SCSI generic device interfaces.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to get the attributes of removable
##	devices device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to get
##	the attributes of removable devices device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to read
##	removable devices device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to set the attributes of removable
##	devices device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts made by the caller to set
##	the attributes of removable devices device nodes.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly read from
##	a removable device.
##	This is extremly dangerous as it can bypass the
##	SELinux protections for filesystem objects, and
##	should only be used by trusted domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to directly read removable devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly write to
##	a removable device.
##	This is extremly dangerous as it can bypass the
##	SELinux protections for filesystem objects, and
##	should only be used by trusted domains.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to directly write removable devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly read
##	a tape device.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to directly read
##	a tape device.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to get the attributes
##	of device nodes of tape devices.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow the caller to set the attributes
##	of device nodes of tape devices.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to storage devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Run shells with substitute user and group</summary>

 	 	


#######################################
## <summary>
##	The per user domain template for the su module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is allowed
##	to change the linux user id, to run shells as a different
##	user.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Execute su in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Execute a command with a substitute user</summary>

#######################################
## <summary>
##	The per user domain template for the sudo module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is allowed
##	to change the linux user id, to run commands as a different
##	user.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for network configuration: ifconfig and dhcp client.</summary>

#######################################
## <summary>
##	Execute dhcp client in dhcpc domain.
## </summary>
## <param name="domain">
##	<summary>
##     The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute DHCP clients in the dhcpc domain, and
##	allow the specified role the dhcpc domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the clock domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the clock domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to the dhcp client.
## </summary>
## <param name="domain">
##	<summary>
##	The domain sending the SIGCHLD.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a kill signal to the dhcp client.
## </summary>
## <param name="domain">
##	<summary>
##	The domain sending the SIGKILL.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGSTOP signal to the dhcp client.
## </summary>
## <param name="domain">
##	<summary>
##	The domain sending the SIGSTOP.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a null signal to the dhcp client.
## </summary>
## <param name="domain">
##	<summary>
##	The domain sending the null signal.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a generic signal to the dhcp client.
## </summary>
## <param name="domain">
##	<summary>
##	The domain sending the signal.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send and receive messages from
##	dhcpc over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write dhcp configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	The domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read dhcp client state files.
## </summary>
## <param name="domain">
##	<summary>
##	The domain allowed access.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Allow network init to read network config files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Do not audit attempts to read network config files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Create files in /etc with the type used for
##	the network config files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Create, read, write, and delete network config files.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Read the dhcp client pid file.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Delete the dhcp client pid file.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Execute ifconfig in the ifconfig domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute ifconfig in the ifconfig domain, and
##	allow the specified role the ifconfig domain,
##	and use the caller's terminal.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the ifconfig domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the ifconfig domain to use.
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	Execute ifconfig in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the DHCP configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the DHCP state data directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create DHCP state data.
## </summary>
## <desc>
##	<p>
##	Create DHCP state data.
##	</p>
##	<p>
##	This is added for DHCP server, as
##	the server and client put their state
##	files in the same directory.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Perform a DNS name resolution.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect and use a LDAP server.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Connect and use remote port mappers.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for TCP daemon.</summary>

########################################
## <summary>
##	Execute tcpd in the tcpd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

## <summary>Telnet daemon</summary>
## <summary>Manage temporary directory sizes and file ages</summary>

########################################
## <summary>
##	Execute tmpreaper in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for udev.</summary>

########################################
## <summary>
##	Execute udev in the udev domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a udev helper in the udev domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to read udev process state.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to inherit a
##	udev file descriptor.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	to a udev unix datagram socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to read list of devices.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Allow process to modify list of devices.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

## <summary>The unconfined domain.</summary>

########################################
## <summary>
##	Make the specified domain unconfined.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to make unconfined.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified domain unconfined and
##	audit executable memory and executable heap
##	usage.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to make unconfined.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transition to the unconfined domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute specified programs in the unconfined domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to allow the unconfined domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the unconfined domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Transition to the unconfined domain by executing a shell.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit file descriptors from the unconfined domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to the unconfined domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send generic signals to the unconfined domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read unconfined domain unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read unconfined domain unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write unconfined domain unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read or write
##	unconfined domain tcp sockets.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read or write
##	unconfined domain tcp sockets.
##	</p>
##	<p>
##	This interface was added due to a broken
##	symptom in ldconfig.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send messages to the unconfined domain over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Add an alias type to the unconfined domain.
## </summary>
## <desc>
##	<p>
##	Add an alias type to the unconfined domain.
##	</p>
##	<p>
##	This is added to support targeted policy.  Its
##	use should be limited.  It has no effect
##	on the strict policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	New alias of the unconfined domain.
##	</summary>
## </param>
#
 	 	

## <summary>
## Policy for usbd, for supporting the
## connection and disconnection of devices at runtime.
## </summary>
              
## <summary>Policy for user domains</summary>

#######################################
## <summary>
##	The template containing rules common to unprivileged
##	users and administrative users.
## </summary>
## <desc>
##	<p>
##	This template creates a user domain, types, and
##	rules for the user's tty, pty, home directories,
##	tmp, and tmpfs files.
##	</p>
##	<p>
##	This generally should not be used, rather the
##	unpriv_user_template or admin_user_template should
##	be used.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	The template for creating a unprivileged user.
## </summary>
## <desc>
##	<p>
##	This template creates a user domain, types, and
##	rules for the user's tty, pty, home directories,
##	tmp, and tmpfs files.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
#
 	 	


#######################################
## <summary>
##	The template for creating an administrative user.
## </summary>
## <desc>
##	<p>
##	This template creates a user domain, types, and
##	rules for the user's tty, pty, home directories,
##	tmp, and tmpfs files.
##	</p>
##	<p>
##	The privileges given to administrative users are:
##	<ul>
##		<li>Raw disk access</li>
##		<li>Set all sysctls</li>
##		<li>All kernel ring buffer controls</li>
##		<li>Set SELinux enforcement mode (enforcing/permissive)</li>
##		<li>Set SELinux booleans</li>
##		<li>Relabel all files but shadow</li>
##		<li>Create, read, write, and delete all files but shadow</li>
##		<li>Manage source and binary format SELinux policy</li>
##		<li>Run insmod</li>
##	</ul>
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., sysadm
##	is the prefix for sysadm_t).
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified type usable in a
##	user home directory.
## </summary>
## <desc>
##	<p>
##	Make the specified type usable in a
##	user home directory.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="type">
##	<summary>
##	Type to be used as a file in the
##	user home directory.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of a user pty.
## </summary>
## <desc>
##	<p>
##	Set the attributes of a user pty.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create a user pty.
## </summary>
## <desc>
##	<p>
##	Create a user pty.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search user home directories.
## </summary>
## <desc>
##	<p>
##	Search user home directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      List user home directories.
## </summary>
## <desc>
##      <p>
##      List user home directories.
##      </p>
##      <p>
##      This is a templated interface, and should only
##      be called from a per-userdomain template.
##      </p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##      The prefix of the user domain (e.g., user
##      is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do a domain transition to the specified
##	domain when executing a program in the
##	user home directory.
## </summary>
## <desc>
##	<p>
##	Do a domain transition to the specified
##	domain when executing a program in the
##	user home directory.
##	</p>
##	<p>
##	No interprocess communication (signals, pipes,
##	etc.) is provided by this interface since
##	the domains are not owned by this module.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="source_domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	Domain to transition to.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list user home subdirectories.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to list user home subdirectories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete directories
##	in a user home subdirectory.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete directories
##	in a user home subdirectory.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to set the
##	attributes of user home files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to set the
##	attributes of user home files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user home files.
## </summary>
## <desc>
##	<p>
##	Read user home files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read user home files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read user home files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to write user home files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to write user home files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user home subdirectory symbolic links.
## </summary>
## <desc>
##	<p>
##	Read user home subdirectory symbolic links.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute user home files.
## </summary>
## <desc>
##	<p>
##	Execute user home files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to execute user home files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to execute user home files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files
##	in a user home subdirectory.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete files
##	in a user home subdirectory.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic links
##	in a user home subdirectory.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete symbolic links
##	in a user home subdirectory.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete named pipes
##	in a user home subdirectory.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete named pipes
##	in a user home subdirectory.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete named sockets
##	in a user home subdirectory.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete named sockets
##	in a user home subdirectory.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in a user home directory
##	with an automatic type transition to
##	a specified private type.
## </summary>
## <desc>
##	<p>
##	Create objects in a user home directory
##	with an automatic type transition to
##	a specified private type.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private_type">
##	<summary>
##	The type of the object to create.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The class of the object to be created.  If not
##	specified, file is used.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in a user home directory
##	with an automatic type transition to
##	the user home file type.
## </summary>
## <desc>
##	<p>
##	Create objects in a user home directory
##	with an automatic type transition to
##	the user home file type.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The class of the object to be created.  If not
##	specified, file is used.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##      Write to user temporary named sockets.
## </summary>
## <desc>
##      <p>
##      Write to user temporary named sockets.
##      </p>
##      <p>
##      This is a templated interface, and should only
##      be called from a per-userdomain template.
##      </p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##      The prefix of the user domain (e.g., user
##      is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List user temporary directories.
## </summary>
## <desc>
##	<p>
##	List user temporary directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list user
##	temporary directories.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to list user
##	temporary directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user temporary files.
## </summary>
## <desc>
##	<p>
##	Read user temporary files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read users
##	temporary files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read users
##	temporary files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to append users
##	temporary files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to append users
##	temporary files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write user temporary files.
## </summary>
## <desc>
##	<p>
##	Read and write user temporary files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user
##	temporary symbolic links.
## </summary>
## <desc>
##	<p>
##	Read user
##	temporary symbolic links.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete user
##	temporary directories.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete user
##	temporary directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete user
##	temporary files.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete user
##	temporary files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete user
##	temporary symbolic links.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete user
##	temporary symbolic links.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete user
##	temporary named pipes.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete user
##	temporary named pipes.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete user
##	temporary named sockets.
## </summary>
## <desc>
##	<p>
##	Create, read, write, and delete user
##	temporary named sockets.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user tmpfs files.
## </summary>
## <desc>
##	<p>
##	Read user tmpfs files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List users untrusted directories.
## </summary>
## <desc>
##	<p>
##	List users untrusted directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list user
##	untrusted directories.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read user
##	untrusted directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user untrusted files.
## </summary>
## <desc>
##	<p>
##	Read user untrusted files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read users
##	untrusted files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read users
##	untrusted files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user untrusted symbolic links.
## </summary>
## <desc>
##	<p>
##	Read user untrusted symbolic links.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List users temporary untrusted directories.
## </summary>
## <desc>
##	<p>
##	List users temporary untrusted directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list user
##	temporary untrusted directories.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to list user
##	temporary directories.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user temporary untrusted files.
## </summary>
## <desc>
##	<p>
##	Read user temporary untrusted files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read users
##	temporary untrusted files.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read users
##	temporary untrusted files.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read user temporary untrusted symbolic links.
## </summary>
## <desc>
##	<p>
##	Read user temporary untrusted symbolic links.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all user untrusted content files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all user temporary untrusted content files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of a user domain tty.
## </summary>
## <desc>
##	<p>
##	Set the attributes of a user domain tty.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write a user domain tty.
## </summary>
## <desc>
##	<p>
##	Read and write a user domain tty.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write a user domain tty and pty.
## </summary>
## <desc>
##	<p>
##	Read and write a user domain tty and pty.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to read and write
##	a user domain tty and pty.
## </summary>
## <desc>
##	<p>
##	Do not audit attempts to read and write
##	a user domain tty and pty.
##	</p>
##	<p>
##	This is a templated interface, and should only
##	be called from a per-userdomain template.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a shell in all user domains.  This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute an Xserver session in all unprivileged user domains.  This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a shell in all unprivileged user domains.  This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute an Xserver session in all unprivileged user domains.  This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Manage unpriviledged user SysV sempaphores.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Manage unpriviledged user SysV shared
##	memory segments.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute bin_t in the unprivileged user domains. This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute generic sbin programs in all unprivileged user
##	domains. This is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute all entrypoint files in unprivileged user
##	domains. This is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a shell in the sysadm domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a generic bin program in the sysadm domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute a generic sbin program in the sysadm domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute all entrypoint files in the sysadm domain. This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the staff users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the staff
##	users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to append to the staff
##	users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files in the staff users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to sysadm users.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attepts to get the attributes
##	of sysadm ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write sysadm ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to use sysadm ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write sysadm ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Dont audit attempts to read and write sysadm ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write sysadm ttys and ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to use sysadm ttys and ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit and use sysadm file descriptors
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write sysadm user unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of the sysadm users
##	home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the sysadm users
##	home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the sysadm users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the sysadm
##	users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List the sysadm users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to list the sysadm
##	users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search the sysadm
##	users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in sysadm home directories
##	with automatic file type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The class of the object to be created.
##	If not specified, file is used.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the sysadm users home sub directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read files in the sysadm users home directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	List all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all files in all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete all directories
##	in all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete all files
##	in all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete all symlinks
##	in all users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Make the specified domain a privileged
##	home directory manager.
## </summary>
## <desc>
##	<p>
##	Make the specified domain a privileged
##	home directory manager.  This domain will be
##	able to manage the contents of all users
##	general home directory content, and create
##	files with the correct context.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send general signals to unprivileged user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit the file descriptors from unprivileged user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to inherit the
##	file descriptors from all user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create generic user home directories
##	with automatic file type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search generic user home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create objects in generic user home directories
##	with automatic file type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The class of the object to be created.
##	If not specified, file is used.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Don't audit search on the user home subdirectory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete
##	subdirectories of generic user
##	home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete files
##	in generic user home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete symbolic
##	links in generic user home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete named
##	pipes in generic user home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Create, read, write, and delete named
##	sockets in generic user home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search all unprivileged users home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all unprivileged users home directory
##	files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Set the attributes of user ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read and write unprivileged user ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to use unprivileged
##	user ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Relabel files to unprivileged user pty types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to relabel files from
##	unprivileged user pty types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all unprivileged users temporary directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all unprivileged users temporary files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read all unprivileged users temporary symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Write all unprivileged users files in /tmp
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to use unprivileged
##	user ttys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the process state of all user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Get the attributes of all user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Inherit the file descriptors from all user domains
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to inherit the file
##	descriptors from any user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send general signals to all user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a SIGCHLD signal to all user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Send a dbus message to all user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Unconfined access to user domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	

## <summary>SELinux utility to run a shell with a new role</summary>

#######################################
## <summary>
##	The per user domain template for the userhelper module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domains which are used
##	for userhelper.
##	</p>
##	<p>
##	This template is invoked automatically for each user, and
##	generally does not need to be invoked directly
##	by policy writers.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Search the userhelper configuration directory.
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Do not audit attempts to search 
##	the userhelper configuration directory.
## </summary>
## <param name="domain">
##	<summary>
##      Domain to not audit.
##	</summary>
## </param>
#
 	 	

## <summary>Policy for managing user accounts.</summary>

########################################
## <summary>
##	Execute chfn in the chfn domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute chfn in the chfn domain, and
##	allow the specified role the chfn domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the chfn domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the chfn domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute groupadd in the groupadd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute groupadd in the groupadd domain, and
##	allow the specified role the groupadd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the groupadd domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the groupadd domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute passwd in the passwd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute passwd in the passwd domain, and
##	allow the specified role the passwd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the passwd domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the passwd domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute password admin functions in
##	the admin passwd domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute passwd admin functions in the admin
##	passwd domain, and allow the specified role
##	the admin passwd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the admin passwd domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the admin passwd domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute useradd in the useradd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Execute useradd in the useradd domain, and
##	allow the specified role the useradd domain.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the useradd domain.
##	</summary>
## </param>
## <param name="terminal">
##	<summary>
##	The type of the terminal allow the useradd domain to use.
##	</summary>
## </param>
#
 	 	


########################################
## <summary>
##	Read the crack database.
## </summary>
## <param name="domain">
##	<summary>
##	The type of the process performing this action.
##	</summary>
## </param>
#
 	 	

#line 1 "tmp/all_attrs_types.conf"
attribute netif_type;
attribute node_type;
attribute port_type;
attribute reserved_port_type;
attribute device_node;
attribute memory_raw_read;
attribute memory_raw_write;
attribute domain;
attribute unconfined_domain_type;
attribute set_curr_context;
attribute entry_type;
attribute privfd;
attribute can_change_process_identity;
attribute can_change_process_role;
attribute can_change_object_identity;
attribute can_system_change;
attribute process_user_target;
attribute cron_source_domain;
attribute cron_job_domain;
attribute process_uncond_exempt;	# add userhelperdomain to this one
attribute file_type;
attribute lockfile;
attribute mountpoint;
attribute pidfile;
attribute polydir;
attribute usercanread;
attribute polyparent;
attribute polymember;
attribute security_file_type;
attribute tmpfile;
attribute tmpfsfile;
attribute filesystem_type;
attribute noxattrfs;
attribute can_load_kernmodule;
attribute can_receive_kernel_messages;
attribute kern_unconfined;
attribute proc_type;
attribute sysctl_type;
attribute mcskillall;
attribute mlsfileread;
attribute mlsfilereadtoclr;
attribute mlsfilewrite;
attribute mlsfilewritetoclr;
attribute mlsfileupgrade;
attribute mlsfiledowngrade;
attribute mlsnetread;
attribute mlsnetreadtoclr;
attribute mlsnetwrite;
attribute mlsnetwritetoclr;
attribute mlsnetupgrade;
attribute mlsnetdowngrade;
attribute mlsnetrecvall;
attribute mlsipcread;
attribute mlsipcreadtoclr;
attribute mlsipcwrite;
attribute mlsipcwritetoclr;
attribute mlsprocread;
attribute mlsprocreadtoclr;
attribute mlsprocwrite;
attribute mlsprocwritetoclr;
attribute mlsprocsetsl;
attribute mlsxwinread;
attribute mlsxwinreadtoclr;
attribute mlsxwinwrite;
attribute mlsxwinwritetoclr;
attribute mlsxwinreadproperty;
attribute mlsxwinwriteproperty;
attribute mlsxwinreadcolormap;
attribute mlsxwinwritecolormap;
attribute mlsxwinwritexinput;
attribute mlstrustedobject;
attribute privrangetrans;
attribute mlsrangetrans;
attribute can_load_policy;
attribute can_setenforce;
attribute can_setsecparam;
attribute ttynode;
attribute ptynode;
attribute server_ptynode;
attribute serial_device;
attribute can_read_shadow_passwords;
attribute can_write_shadow_passwords;
attribute can_relabelto_shadow_passwords;
attribute cron_spool_type;
attribute direct_run_init;
attribute direct_init;
attribute direct_init_entry;
attribute logfile;
attribute mta_user_agent;
attribute mailserver_delivery;
attribute mailserver_domain;
attribute mailserver_sender;
attribute user_mail_domain;
attribute postfix_user_domains;
attribute postfix_user_domtrans;
attribute can_write_binary_policy;
attribute can_relabelto_binary_policy;
attribute ssh_server;
attribute fixed_disk_raw_read;
attribute fixed_disk_raw_write;
attribute scsi_generic_read;
attribute scsi_generic_write;
attribute admin_terminal;
attribute home_dir_type;
attribute home_type;
attribute privhome;
attribute user_home_dir_type;
attribute user_home_type;
attribute user_ptynode;
attribute user_tmpfile;
attribute user_ttynode;
attribute userdomain;
attribute unpriv_userdomain;
attribute untrusted_content_type;
attribute untrusted_content_tmp_type;
type bin_t;
type sbin_t;
type ls_exec_t;
type shell_exec_t;
type chroot_exec_t;
type ppp_device_t;
type tun_tap_device_t;
type port_t, port_type;
type reserved_port_t, port_type, reserved_port_type;
type afs_bos_port_t, port_type;
type afs_fs_port_t, port_type;
type afs_ka_port_t, port_type;
type afs_pt_port_t, port_type;
type afs_vl_port_t, port_type;
type amanda_port_t, port_type;
type amavisd_recv_port_t, port_type;
type amavisd_send_port_t, port_type;
type asterisk_port_t, port_type;
type auth_port_t, port_type;
type bgp_port_t, port_type;
type biff_port_t, port_type, reserved_port_type; 
type clamd_port_t, port_type;
type clockspeed_port_t, port_type;
type comsat_port_t, port_type;
type cvs_port_t, port_type;
type dcc_port_t, port_type;
type dbskkd_port_t, port_type;
type dhcpc_port_t, port_type;
type dhcpd_port_t, port_type;
type dict_port_t, port_type;
type distccd_port_t, port_type;
type dns_port_t, port_type;
type fingerd_port_t, port_type;
type ftp_data_port_t, port_type;
type ftp_port_t, port_type;
type gatekeeper_port_t, port_type;
type giftd_port_t, port_type;
type gopher_port_t, port_type;
type http_cache_port_t, port_type;
type http_port_t, port_type;
type howl_port_t, port_type;
type hplip_port_t, port_type;
type i18n_input_port_t, port_type;
type imaze_port_t, port_type;
type inetd_child_port_t, port_type;
type innd_port_t, port_type;
type ipp_port_t, port_type;
type ircd_port_t, port_type;
type isakmp_port_t, port_type;
type jabber_client_port_t, port_type;
type jabber_interserver_port_t, port_type;
type kerberos_admin_port_t, port_type;
type kerberos_master_port_t, port_type;
type kerberos_port_t, port_type;
type ktalkd_port_t, port_type;
type ldap_port_t, port_type;
type lrrd_port_t, port_type; 
type mail_port_t, port_type;
type monopd_port_t, port_type;
type mysqld_port_t, port_type;
type nessus_port_t, port_type;
type nmbd_port_t, port_type;
type ntp_port_t, port_type;
type openvpn_port_t, port_type;
type pegasus_http_port_t, port_type;
type pegasus_https_port_t, port_type;
type pop_port_t, port_type;
type portmap_port_t, port_type;
type postgresql_port_t, port_type;
type postgrey_port_t, port_type;
type printer_port_t, port_type;
type ptal_port_t, port_type;
type pxe_port_t, port_type;
type pyzor_port_t, port_type;
type radacct_port_t, port_type;
type radius_port_t, port_type;
type razor_port_t, port_type;
type rlogind_port_t, port_type;
type rndc_port_t, port_type;
type router_port_t, port_type;
type rsh_port_t, port_type;
type rsync_port_t, port_type;
type smbd_port_t, port_type;
type smtp_port_t, port_type;
type snmp_port_t, port_type;
type spamd_port_t, port_type;
type ssh_port_t, port_type;
type soundd_port_t, port_type;
type socks_port_t, port_type; type stunnel_port_t, port_type; 
type swat_port_t, port_type;
type syslogd_port_t, port_type;
type telnetd_port_t, port_type;
type tftp_port_t, port_type;
type transproxy_port_t, port_type;
type utcpserver_port_t, port_type; 
type uucpd_port_t, port_type;
type vnc_port_t, port_type;
type xserver_port_t, port_type;
type zebra_port_t, port_type;
type zope_port_t, port_type;
type node_t, node_type;
type compat_ipv4_node_t alias node_compat_ipv4_t, node_type;
type inaddr_any_node_t alias node_inaddr_any_t, node_type;
type node_internal_t, node_type; 
type link_local_node_t alias node_link_local_t, node_type;
type lo_node_t alias node_lo_t, node_type;
type mapped_ipv4_node_t alias node_mapped_ipv4_t, node_type;
type multicast_node_t alias node_multicast_t, node_type;
type site_local_node_t alias node_site_local_t, node_type;
type unspec_node_t alias node_unspec_t, node_type;
type netif_t, netif_type;
type device_t;
type agp_device_t;
type apm_bios_t;
type cardmgr_dev_t;
type clock_device_t;
type cpu_device_t;
type crypt_device_t;
type dri_device_t;
type event_device_t;
type framebuf_device_t;
type lvm_control_t;
type memory_device_t;
type misc_device_t;
type mouse_device_t;
type mtrr_device_t;
type null_device_t;
type power_device_t;
type printer_device_t;
type random_device_t;
type scanner_device_t;
type sound_device_t;
type sysfs_t;
type urandom_device_t;
type usbfs_t alias usbdevfs_t;
type usb_device_t;
type v4l_device_t;
type xserver_misc_device_t;
type zero_device_t;
type xconsole_device_t;
type devfs_control_t;
type boot_t;
type default_t, file_type, mountpoint;
type etc_t, file_type;
type etc_runtime_t, file_type;
type file_t, file_type, mountpoint;
type home_root_t, file_type, mountpoint;
type lost_found_t, file_type;
type mnt_t, file_type, mountpoint;
type modules_object_t;
type no_access_t, file_type;
type poly_t, file_type;
type readable_t, file_type;
type root_t, file_type, mountpoint;
type src_t, file_type, mountpoint;
type system_map_t;
type tmp_t, mountpoint; #, polydir
type usr_t, file_type, mountpoint;
type var_t, file_type, mountpoint;
type var_lib_t, file_type, mountpoint;
type var_lock_t, file_type, lockfile;
type var_run_t, file_type, pidfile;
type var_spool_t;
type fs_t;
type bdev_t;
type binfmt_misc_fs_t;
type capifs_t;
type configfs_t;
type eventpollfs_t;
type futexfs_t;
type hugetlbfs_t;
type inotifyfs_t;
type nfsd_fs_t;
type ramfs_t;
type romfs_t;
type rpc_pipefs_t;
type tmpfs_t;
type autofs_t, noxattrfs;
type cifs_t alias sambafs_t, noxattrfs;
type dosfs_t, noxattrfs;
type iso9660_t, filesystem_type, noxattrfs;
type removable_t, noxattrfs;
type nfs_t, filesystem_type, noxattrfs;
type kernel_t, can_load_kernmodule;
type debugfs_t;
type proc_t, proc_type;
type proc_kmsg_t, proc_type;
type proc_kcore_t, proc_type;
type proc_mdstat_t, proc_type;
type proc_net_t, proc_type;
type sysctl_t, sysctl_type;
type sysctl_irq_t, sysctl_type;
type sysctl_rpc_t, sysctl_type;
type sysctl_fs_t, sysctl_type;
type sysctl_kernel_t, sysctl_type;
type sysctl_modprobe_t, sysctl_type;
type sysctl_hotplug_t, sysctl_type;
type sysctl_net_t, sysctl_type;
type sysctl_net_unix_t, sysctl_type;
type sysctl_vm_t, sysctl_type;
type sysctl_dev_t, sysctl_type;
type unlabeled_t;
type auditd_exec_t;
type crond_exec_t;
type cupsd_exec_t;
type getty_t;
type init_t;
type init_exec_t;
type initrc_t;
type initrc_exec_t;
type login_exec_t;
type sshd_exec_t;
type su_exec_t;
type udev_exec_t;
type unconfined_t;
type xdm_exec_t;
type lvm_exec_t;
type security_t;
type bsdpty_device_t;
type console_device_t;
type devpts_t;
type devtty_t;
type ptmx_t;
type tty_device_t, serial_device;
type usbtty_device_t, serial_device;
type chkpwd_exec_t;
type faillog_t;
type lastlog_t;
type pam_console_t;
type pam_console_exec_t;
type pam_t;
type pam_exec_t;
type pam_tmp_t;
type pam_var_console_t;
type pam_var_run_t;
type shadow_t;
type utempter_t;
type utempter_exec_t;
type var_auth_t;
type wtmp_t;
type automount_t;
type automount_exec_t;
type automount_var_run_t;
type automount_etc_t;
type automount_lock_t;
type automount_tmp_t;
type dnssec_t;
type named_t;
type named_exec_t;
type named_checkconf_exec_t;
type named_conf_t;
type named_cache_t;
type named_log_t;
type named_tmp_t;
type named_var_run_t;
type named_zone_t;
type ndc_t;
type ndc_exec_t;
type anacron_exec_t;
type cron_spool_t;
type crond_t;
type crond_tmp_t;
type crond_var_run_t;
type crontab_exec_t;
type system_cron_spool_t, cron_spool_type;
type system_crond_lock_t;
type system_crond_tmp_t;
type svc_conf_t;
type svc_log_t;
type svc_multilog_t;
type svc_multilog_exec_t;
type svc_run_t;
type svc_run_exec_t;
type svc_start_t;
type svc_start_exec_t;
type svc_svc_t;
type devd_t;
type devd_exec_t;
type devd_etc_t;
type dhcpd_t;
type dhcpd_exec_t;
type dhcpd_state_t;
type dhcpd_tmp_t;
type dhcpd_var_run_t;
type fsadm_t;
type fsadm_exec_t;
type fsadm_tmp_t;
type swapfile_t; # customizable
type getty_exec_t;
type getty_etc_t;
type getty_lock_t;
type getty_log_t;
type getty_tmp_t;
type getty_var_run_t;
type hostname_t;
type hostname_exec_t;
type inetd_t;
type inetd_exec_t;
type inetd_log_t;
type inetd_tmp_t;
type inetd_var_run_t;
type inetd_child_t;
type inetd_child_exec_t;
type inetd_child_tmp_t;
type inetd_child_var_run_t;
type init_var_run_t;
type initctl_t;
type initrc_devpts_t;
type initrc_state_t;
type initrc_tmp_t;
type initrc_var_run_t;
type ld_so_cache_t;
type ld_so_t;
type lib_t;
type textrel_shlib_t alias texrel_shlib_t;
type ldconfig_t;
type ldconfig_exec_t;
type local_login_t;
type local_login_lock_t;
type local_login_tmp_t;
type sulogin_t;
type sulogin_exec_t;
type auditctl_t;
type auditctl_exec_t;
type auditd_etc_t;
type auditd_log_t;
type auditd_t;
type auditd_var_run_t;
type devlog_t;
type klogd_t;
type klogd_exec_t;
type klogd_tmp_t;
type klogd_var_run_t;
type syslogd_t;
type syslogd_exec_t;
type syslogd_tmp_t;
type syslogd_var_run_t;
type var_log_t;
type cert_t;
type fonts_t;
type hwdata_t;
type locale_t;
type man_t alias catman_t;
type public_content_t; #, customizable;
type public_content_rw_t; #, customizable;
type test_file_t;
type tetex_data_t;
type modules_conf_t;
type modules_dep_t;
type insmod_t;
type insmod_exec_t;
type depmod_t;
type depmod_exec_t;
type update_modules_t;
type update_modules_exec_t;
type update_modules_tmp_t;
type mount_t;
type mount_exec_t;
type mount_tmp_t;
type etc_aliases_t;
type etc_mail_t;
type mqueue_spool_t;
type mail_spool_t;
type sendmail_exec_t;
type postfix_spool_bounce_t;
type postfix_etc_t;
type postfix_exec_t;
type postfix_local_tmp_t;
type postfix_map_t;
type postfix_map_exec_t;
type postfix_map_tmp_t;
type postfix_private_t;
type postfix_prng_t;
type postfix_spool_t;
type postfix_spool_maildrop_t;
type postfix_spool_flush_t;
type postfix_public_t;
type postfix_var_run_t;
type remote_login_t;
type remote_login_tmp_t;
type selinux_config_t;
type checkpolicy_t, can_write_binary_policy;
type checkpolicy_exec_t;
type default_context_t;
type file_context_t;
type load_policy_t;
type load_policy_exec_t;
type newrole_t;
type newrole_exec_t;
type policy_config_t;
type policy_src_t;
type restorecon_t, can_relabelto_binary_policy;
type restorecon_exec_t;
type run_init_t;
type run_init_exec_t;
type semanage_t;
type semanage_exec_t;
type semanage_store_t;
type semanage_read_lock_t;
type semanage_trans_lock_t; 
type setfiles_t, can_relabelto_binary_policy;
type setfiles_exec_t;
type sendmail_log_t;
type sendmail_tmp_t;
type sendmail_var_run_t;
type sendmail_t;
type ssh_exec_t;
type ssh_keygen_exec_t;
type ssh_keysign_exec_t;
type sshd_key_t;
type fixed_disk_device_t alias lvm_vg_t;
type scsi_generic_device_t;
type removable_device_t;
type tape_device_t;
type sudo_exec_t;
type dhcp_etc_t;
type dhcp_state_t;
type dhcpc_t;
type dhcpc_exec_t;
type dhcpc_state_t;
type dhcpc_tmp_t;
type dhcpc_var_run_t;
type ifconfig_t;
type ifconfig_exec_t;
type net_conf_t alias resolv_conf_t;
type tcpd_t;
type tcpd_exec_t;
type tcpd_tmp_t;
type telnetd_t;
type telnetd_exec_t;
type telnetd_devpts_t; #, userpty_type;
type telnetd_tmp_t;
type telnetd_var_run_t;
type tmpreaper_t;
type tmpreaper_exec_t;
type udev_t;
type udev_helper_exec_t;
type udev_etc_t alias etc_udev_t;
type udev_runtime_t;
type udev_tbl_t alias udev_tdb_t;
type udev_var_run_t;
type unconfined_exec_t;
type usbd_t;
type usbd_exec_t;
type usbd_etc_t;
type userhelper_conf_t;
type userhelper_exec_t;
type admin_passwd_exec_t;
type chfn_t;
type chfn_exec_t;
type crack_t;
type crack_exec_t;
type crack_db_t;
type crack_tmp_t;
type groupadd_t;
type groupadd_exec_t;
type passwd_t;
type passwd_exec_t;
type sysadm_passwd_t;
type sysadm_passwd_tmp_t;
type useradd_t;
type useradd_exec_t;
#line 1 "policy/global_booleans"
#
# This file is for the declaration of global booleans.
# To change the default value at build time, the booleans.conf
# file should be used.
#

## <desc>
## <p>
## Enabling secure mode disallows programs, such as
## newrole, from transitioning to administrative
## user domains.
## </p>
## </desc>

	bool secure_mode false;


## <desc>
## <p>
## Disable transitions to insmod.
## </p>
## </desc>

	bool secure_mode_insmod true;


## <desc>
## <p>
## boolean to determine whether the system permits loading policy, setting
## enforcing mode, and changing boolean values.  Set this to true and you
## have to reboot to set it back
## </p>
## </desc>

	bool secure_mode_policyload false;

#line 1 "policy/global_tunables"
#
# This file is for the declaration of global tunables.
# To change the default value at build time, the booleans.conf
# file should be used.
#

########################################
#
# Common tunables
#

## <desc>
## <p>
## Allow cvs daemon to read shadow
## </p>
## </desc>
#

	
		bool allow_cvs_read_shadow false;
	


## <desc>
## <p>
## Allow making the heap executable.
## </p>
## </desc>

	
		bool allow_execheap false;
	



## <desc>
## <p>
## Allow making anonymous memory executable, e.g. 
## for runtime-code generation or executable stack.
## </p>
## </desc>

	
		bool allow_execmem false;
	


## <desc>
## <p>
## Allow making a modified private file
## mapping executable (text relocation).
## </p>
## </desc>

	
		bool allow_execmod false;
	


## <desc>
## <p>
## Allow making the stack executable via mprotect.
## Also requires allow_execmem.
## </p>
## </desc>

	
		bool allow_execstack false;
	


## <desc>
## <p>
## Allow ftp servers to modify public files
## used for public file transfer services.
## </p>
## </desc>

	
		bool allow_ftpd_anon_write false;
	


## <desc>
## <p>
## Allow gssd to read temp directory.
## </p>
## </desc>

	
		bool allow_gssd_read_tmp true;
	


## <desc>
## <p>
## Allow Apache to modify public files
## used for public file transfer services.
## </p>
## </desc>

	
		bool allow_httpd_anon_write false;
	


## <desc>
## <p>
## Allow java executable stack
## </p>
## </desc>

	
		bool allow_java_execstack false;
	


## <desc>
## <p>
## Allow system to run with kerberos
## </p>
## </desc>

	
		bool allow_kerberos false;
	


## <desc>
## <p>
## Allow rsync to modify public files
## used for public file transfer services.
## </p>
## </desc>

	
		bool allow_rsync_anon_write false;
	


## <desc>
## <p>
## Allow sasl to read shadow
## </p>
## </desc>

	
		bool allow_saslauthd_read_shadow false;
	


## <desc>
## <p>
## Allow samba to modify public files
## used for public file transfer services.
## </p>
## </desc>

	
		bool allow_smbd_anon_write false;
	


## <desc>
## <p>
## Allow sysadm to ptrace all processes
## </p>
## </desc>

	
		bool allow_ptrace false;
	


## <desc>
## <p>
## Allow system to run with NIS
## </p>
## </desc>

	
		bool allow_ypbind false;
	


## <desc>
## <p>
## Enable extra rules in the cron domain
## to support fcron.
## </p>
## </desc>

	
		bool fcron_crond false;
	


## <desc>
## <p>
## Allow ftp to read and write files in the user home directories
## </p>
## </desc>

	
		bool ftp_home_dir false;
	


## <desc>
## <p>
## Allow ftpd to run directly without inetd
## </p>
## </desc>

	
		bool ftpd_is_daemon false;
	


## <desc>
## <p>
## Allow httpd to use built in scripting (usually php)
## </p>
## </desc>

	
		bool httpd_builtin_scripting false;
	


## <desc>
## <p>
## Allow http daemon to tcp connect 
## </p>
## </desc>

	
		bool httpd_can_network_connect false;
	


## <desc>
## <p>
## Allow httpd to connect to mysql/posgresql 
## </p>
## </desc>

	
		bool httpd_can_network_connect_db false;
	


## <desc>
## <p>
## Allow httpd to act as a relay 
## </p>
## </desc>

	
		bool httpd_can_network_relay false;
	


## <desc>
## <p>
## Allow httpd cgi support
## </p>
## </desc>

	
		bool httpd_enable_cgi false;
	


## <desc>
## <p>
## Allow httpd to act as a FTP server by
## listening on the ftp port.
## </p>
## </desc>

	
		bool httpd_enable_ftp_server false;
	


## <desc>
## <p>
## Allow httpd to read home directories
## </p>
## </desc>

	
		bool httpd_enable_homedirs false;
	


## <desc>
## <p>
## Run SSI execs in system CGI script domain.
## </p>
## </desc>

	
		bool httpd_ssi_exec false;
	


## <desc>
## <p>
## Allow http daemon to communicate with the TTY
## </p>
## </desc>

	
		bool httpd_tty_comm false;
	


## <desc>
## <p>
## Run CGI in the main httpd domain
## </p>
## </desc>

	
		bool httpd_unified false;
	


## <desc>
## <p>
## Allow BIND to write the master zone files.
## Generally this is used for dynamic DNS.
## </p>
## </desc>

	
		bool named_write_master_zones false;
	


## <desc>
## <p>
## Allow nfs to be exported read/write.
## </p>
## </desc>

	
		bool nfs_export_all_rw false;
	


## <desc>
## <p>
## Allow nfs to be exported read only
## </p>
## </desc>

	
		bool nfs_export_all_ro false;
	


## <desc>
## <p>
## Allow pppd to load kernel modules for certain modems
## </p>
## </desc>

	
		bool pppd_can_insmod false;
	


## <desc>
## <p>
## Allow reading of default_t files.
## </p>
## </desc>

	
		bool read_default_t false;
	


## <desc>
## <p>
## Allow ssh to run from inetd instead of as a daemon.
## </p>
## </desc>

	
		bool run_ssh_inetd false;
	


## <desc>
## <p>
## Allow samba to export user home directories.
## </p>
## </desc>

	
		bool samba_enable_home_dirs false;
	


## <desc>
## <p>
## Allow spamassassin to do DNS lookups
## </p>
## </desc>

	
		bool spamassasin_can_network false;
	


## <desc>
## <p>
## Allow squid to connect to all ports, not just
## HTTP, FTP, and Gopher ports.
## </p>
## </desc>

	
		bool squid_connect_any false;
	


## <desc>
## <p>
## Allow ssh logins as sysadm_r:sysadm_t
## </p>
## </desc>

	
		bool ssh_sysadm_login false;
	


## <desc>
## <p>
## Configure stunnel to be a standalone daemon or
## inetd service.
## </p>
## </desc>

	
		bool stunnel_is_daemon false;
	


## <desc>
## <p>
## Support NFS home directories
## </p>
## </desc>

	
		bool use_nfs_home_dirs false;
	


## <desc>
## <p>
## Support SAMBA home directories
## </p>
## </desc>

	
		bool use_samba_home_dirs false;
	


## <desc>
## <p>
## Control users use of ping and traceroute
## </p>
## </desc>

	
		bool user_ping false;
	


########################################
#
# Strict policy specific
#



########################################
#
# Targeted policy specific
#


## <desc>
## <p>
## Allow spammd to read/write user home directories.
## </p>
## </desc>

	
		bool spamd_enable_home_dirs true;
	


#line 1 "tmp/only_te_rules.conf"


	


########################################
#
# Declarations
#

#
# bin_t is the type of files in the system bin directories.
#
 	 	 	 	
##### begin files_type(bin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(bin_t) depth: 2
 	
	
	


	allow bin_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(bin_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(bin_t) depth: 2
 	
	
	


	allow bin_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(bin_t) depth: 1
 	
	typeattribute bin_t file_type;

	 	 	 	
##### end files_type(bin_t) depth: 0
 	

#
# sbin_t is the type of files in the system sbin directories.
#
 	 	 	 	
##### begin files_type(sbin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sbin_t) depth: 2
 	
	
	


	allow sbin_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sbin_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sbin_t) depth: 2
 	
	
	


	allow sbin_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sbin_t) depth: 1
 	
	typeattribute sbin_t file_type;

	 	 	 	
##### end files_type(sbin_t) depth: 0
 	

#
# ls_exec_t is the type of the ls program.
#
 	 	 	 	
##### begin files_type(ls_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(ls_exec_t) depth: 2
 	
	
	


	allow ls_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ls_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ls_exec_t) depth: 2
 	
	
	


	allow ls_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ls_exec_t) depth: 1
 	
	typeattribute ls_exec_t file_type;

	 	 	 	
##### end files_type(ls_exec_t) depth: 0
 	

#cjp: temp
typeattribute ls_exec_t entry_type;

#
# shell_exec_t is the type of user shells such as /bin/bash.
#
 	 	 	 	
##### begin files_type(shell_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(shell_exec_t) depth: 2
 	
	
	


	allow shell_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(shell_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(shell_exec_t) depth: 2
 	
	
	


	allow shell_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(shell_exec_t) depth: 1
 	
	typeattribute shell_exec_t file_type;

	 	 	 	
##### end files_type(shell_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(chroot_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(chroot_exec_t) depth: 2
 	
	
	


	allow chroot_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(chroot_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(chroot_exec_t) depth: 2
 	
	
	


	allow chroot_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(chroot_exec_t) depth: 1
 	
	typeattribute chroot_exec_t file_type;

	 	 	 	
##### end files_type(chroot_exec_t) depth: 0
 	
#
# This is a generated file!  Instead of modifying this file, the
# corenetwork.te.in or corenetwork.te.m4 file should be modified.
#
#
# shiftn(num,list...)
#
# shift the list num times
#




#
# network_interface(if_name,linux_interface,mls_sensitivity)
#




#
# network_node(node_name,mls_sensitivity,address,netmask[, mls_sensitivity,address,netmask, [...]])
#


# These next three macros have formatting, and should not me indented
 
 


#
# network_port(port_name,protocol portnum mls_sensitivity [,protocol portnum mls_sensitivity[,...]])
#



	


########################################
#
# Declarations
#


 	 	 	 	
##### begin dev_node(ppp_device_t) depth: 1
 	
	
	


	typeattribute ppp_device_t device_node;

	 	 	 	 	
##### begin fs_associate(ppp_device_t) depth: 2
 	
	
	


	allow ppp_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ppp_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(ppp_device_t) depth: 2
 	
	
	


	allow ppp_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(ppp_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(ppp_device_t) depth: 2
 	
	
	


	allow ppp_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(ppp_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(ppp_device_t) depth: 0
 	

#
# tun_tap_device_t is the type of /dev/net/tun/* and /dev/net/tap/*
#
 	 	 	 	
##### begin dev_node(tun_tap_device_t) depth: 1
 	
	
	


	typeattribute tun_tap_device_t device_node;

	 	 	 	 	
##### begin fs_associate(tun_tap_device_t) depth: 2
 	
	
	


	allow tun_tap_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tun_tap_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(tun_tap_device_t) depth: 2
 	
	
	


	allow tun_tap_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(tun_tap_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(tun_tap_device_t) depth: 2
 	
	
	


	allow tun_tap_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(tun_tap_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(tun_tap_device_t) depth: 0
 	

########################################
#
# Ports
#

#
# port_t is the default type of INET port numbers.
#

#
# reserved_port_t is the type of INET port numbers below 1024.
#





























typeattribute auth_port_t reserved_port_type;



typeattribute bgp_port_t reserved_port_type;
typeattribute bgp_port_t reserved_port_type;








typeattribute comsat_port_t reserved_port_type;












typeattribute dhcpc_port_t reserved_port_type;



typeattribute dhcpd_port_t reserved_port_type;
typeattribute dhcpd_port_t reserved_port_type;
typeattribute dhcpd_port_t reserved_port_type;
typeattribute dhcpd_port_t reserved_port_type;
typeattribute dhcpd_port_t reserved_port_type;









typeattribute dns_port_t reserved_port_type;
typeattribute dns_port_t reserved_port_type;



typeattribute fingerd_port_t reserved_port_type;



typeattribute ftp_data_port_t reserved_port_type;



typeattribute ftp_port_t reserved_port_type;









typeattribute gopher_port_t reserved_port_type;
typeattribute gopher_port_t reserved_port_type;




 # 8118 is for privoxy

typeattribute http_port_t reserved_port_type;
typeattribute http_port_t reserved_port_type;
typeattribute http_port_t reserved_port_type;















typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;
typeattribute inetd_child_port_t reserved_port_type;



typeattribute innd_port_t reserved_port_type;



typeattribute ipp_port_t reserved_port_type;
typeattribute ipp_port_t reserved_port_type;






typeattribute isakmp_port_t reserved_port_type;









typeattribute kerberos_admin_port_t reserved_port_type;
typeattribute kerberos_admin_port_t reserved_port_type;
typeattribute kerberos_admin_port_t reserved_port_type;






typeattribute kerberos_port_t reserved_port_type;
typeattribute kerberos_port_t reserved_port_type;
typeattribute kerberos_port_t reserved_port_type;
typeattribute kerberos_port_t reserved_port_type;



typeattribute ktalkd_port_t reserved_port_type;
typeattribute ktalkd_port_t reserved_port_type;



typeattribute ldap_port_t reserved_port_type;
typeattribute ldap_port_t reserved_port_type;
typeattribute ldap_port_t reserved_port_type;
typeattribute ldap_port_t reserved_port_type;














typeattribute nmbd_port_t reserved_port_type;
typeattribute nmbd_port_t reserved_port_type;
typeattribute nmbd_port_t reserved_port_type;



typeattribute ntp_port_t reserved_port_type;












typeattribute pop_port_t reserved_port_type;
typeattribute pop_port_t reserved_port_type;
typeattribute pop_port_t reserved_port_type;
typeattribute pop_port_t reserved_port_type;
typeattribute pop_port_t reserved_port_type;
typeattribute pop_port_t reserved_port_type;
typeattribute pop_port_t reserved_port_type;



typeattribute portmap_port_t reserved_port_type;
typeattribute portmap_port_t reserved_port_type;









typeattribute printer_port_t reserved_port_type;





















typeattribute rlogind_port_t reserved_port_type;



typeattribute rndc_port_t reserved_port_type;



typeattribute router_port_t reserved_port_type;



typeattribute rsh_port_t reserved_port_type;



typeattribute rsync_port_t reserved_port_type;
typeattribute rsync_port_t reserved_port_type;



typeattribute smbd_port_t reserved_port_type;
typeattribute smbd_port_t reserved_port_type;



typeattribute smtp_port_t reserved_port_type;
typeattribute smtp_port_t reserved_port_type;
typeattribute smtp_port_t reserved_port_type;



typeattribute snmp_port_t reserved_port_type;
typeattribute snmp_port_t reserved_port_type;
typeattribute snmp_port_t reserved_port_type;



typeattribute spamd_port_t reserved_port_type;



typeattribute ssh_port_t reserved_port_type;





typeattribute swat_port_t reserved_port_type;



typeattribute syslogd_port_t reserved_port_type;



typeattribute telnetd_port_t reserved_port_type;



typeattribute tftp_port_t reserved_port_type;





typeattribute uucpd_port_t reserved_port_type;















# Defaults for reserved ports.  Earlier portcon entries take precedence;
# these entries just cover any remaining reserved ports not otherwise declared.

########################################
#
# Network nodes
#

#
# node_t is the default type of network nodes.
# The node_*_t types are used for specific network
# nodes in net_contexts or net_contexts.mls.
#

























########################################
#
# Network Interfaces:
#

#
# netif_t is the default type of network interfaces.
#


#network_interface(eth0, eth0,s0)


	


########################################
#
# Declarations
#


#
# device_t is the type of /dev.
#
 	 	 	 	
##### begin fs_associate_tmpfs(device_t) depth: 1
 	
	
	


	allow device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(device_t) depth: 0
 	
 	 	 	 	
##### begin files_type(device_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(device_t) depth: 2
 	
	
	


	allow device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(device_t) depth: 2
 	
	
	


	allow device_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(device_t) depth: 1
 	
	typeattribute device_t file_type;

	 	 	 	
##### end files_type(device_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(device_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(device_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(device_t) depth: 3
 	
	
	


	allow device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(device_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(device_t) depth: 3
 	
	
	


	allow device_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(device_t) depth: 2
 	
	typeattribute device_t file_type;

	 	 	 	
##### end files_type(device_t) depth: 1
 	
	typeattribute device_t mountpoint;

	 	 	 	
##### end files_mountpoint(device_t) depth: 0
 	
 	 	 	 	
##### begin files_associate_tmp(device_t) depth: 1
 	
	
	


	allow device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(device_t) depth: 0
 	

# Only directories and symlinks should be labeled device_t.
# If there are other files with this type, it is wrong.
# Relabelto is allowed for setfiles to function, in case
# a device node has no specific type yet, but is for some
# reason labeled with a specific type
#cjp: want this, but udev policy breaks this
#neverallow domain device_t:{ file fifo_file sock_file chr_file blk_file } ~{ getattr setattr relabelfrom relabelto };

#
# Type for /dev/agpgart
#
 	 	 	 	
##### begin dev_node(agp_device_t) depth: 1
 	
	
	


	typeattribute agp_device_t device_node;

	 	 	 	 	
##### begin fs_associate(agp_device_t) depth: 2
 	
	
	


	allow agp_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(agp_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(agp_device_t) depth: 2
 	
	
	


	allow agp_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(agp_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(agp_device_t) depth: 2
 	
	
	


	allow agp_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(agp_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(agp_device_t) depth: 0
 	

#
# Type for /dev/apm_bios
#
 	 	 	 	
##### begin dev_node(apm_bios_t) depth: 1
 	
	
	


	typeattribute apm_bios_t device_node;

	 	 	 	 	
##### begin fs_associate(apm_bios_t) depth: 2
 	
	
	


	allow apm_bios_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(apm_bios_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(apm_bios_t) depth: 2
 	
	
	


	allow apm_bios_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(apm_bios_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(apm_bios_t) depth: 2
 	
	
	


	allow apm_bios_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(apm_bios_t) depth: 1
 	

	 	 	 	
##### end dev_node(apm_bios_t) depth: 0
 	

 	 	 	 	
##### begin dev_node(cardmgr_dev_t) depth: 1
 	
	
	


	typeattribute cardmgr_dev_t device_node;

	 	 	 	 	
##### begin fs_associate(cardmgr_dev_t) depth: 2
 	
	
	


	allow cardmgr_dev_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(cardmgr_dev_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(cardmgr_dev_t) depth: 2
 	
	
	


	allow cardmgr_dev_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(cardmgr_dev_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(cardmgr_dev_t) depth: 2
 	
	
	


	allow cardmgr_dev_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(cardmgr_dev_t) depth: 1
 	

	 	 	 	
##### end dev_node(cardmgr_dev_t) depth: 0
 	
 	 	 	 	
##### begin files_tmp_file(cardmgr_dev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(cardmgr_dev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(cardmgr_dev_t) depth: 3
 	
	
	


	allow cardmgr_dev_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(cardmgr_dev_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(cardmgr_dev_t) depth: 3
 	
	
	


	allow cardmgr_dev_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(cardmgr_dev_t) depth: 2
 	
	typeattribute cardmgr_dev_t file_type;

	 	 	 	
##### end files_type(cardmgr_dev_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(cardmgr_dev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(cardmgr_dev_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(cardmgr_dev_t) depth: 4
 	
	
	


	allow cardmgr_dev_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(cardmgr_dev_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(cardmgr_dev_t) depth: 4
 	
	
	


	allow cardmgr_dev_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(cardmgr_dev_t) depth: 3
 	
	typeattribute cardmgr_dev_t file_type;

	 	 	 	
##### end files_type(cardmgr_dev_t) depth: 2
 	
	typeattribute cardmgr_dev_t polymember;

	 	 	 	
##### end files_poly_member(cardmgr_dev_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(cardmgr_dev_t) depth: 2
 	
	
	


	allow cardmgr_dev_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(cardmgr_dev_t) depth: 1
 	
	typeattribute cardmgr_dev_t tmpfile;
	allow cardmgr_dev_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(cardmgr_dev_t) depth: 0
 	

#
# clock_device_t is the type of
# /dev/rtc.
#
 	 	 	 	
##### begin dev_node(clock_device_t) depth: 1
 	
	
	


	typeattribute clock_device_t device_node;

	 	 	 	 	
##### begin fs_associate(clock_device_t) depth: 2
 	
	
	


	allow clock_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(clock_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(clock_device_t) depth: 2
 	
	
	


	allow clock_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(clock_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(clock_device_t) depth: 2
 	
	
	


	allow clock_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(clock_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(clock_device_t) depth: 0
 	

#
# cpu control devices /dev/cpu/0/*
#
 	 	 	 	
##### begin dev_node(cpu_device_t) depth: 1
 	
	
	


	typeattribute cpu_device_t device_node;

	 	 	 	 	
##### begin fs_associate(cpu_device_t) depth: 2
 	
	
	


	allow cpu_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(cpu_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(cpu_device_t) depth: 2
 	
	
	


	allow cpu_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(cpu_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(cpu_device_t) depth: 2
 	
	
	


	allow cpu_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(cpu_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(cpu_device_t) depth: 0
 	

# for the IBM zSeries z90crypt hardware ssl accelorator
 	 	 	 	
##### begin dev_node(crypt_device_t) depth: 1
 	
	
	


	typeattribute crypt_device_t device_node;

	 	 	 	 	
##### begin fs_associate(crypt_device_t) depth: 2
 	
	
	


	allow crypt_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crypt_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(crypt_device_t) depth: 2
 	
	
	


	allow crypt_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(crypt_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(crypt_device_t) depth: 2
 	
	
	


	allow crypt_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(crypt_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(crypt_device_t) depth: 0
 	

 	 	 	 	
##### begin dev_node(dri_device_t) depth: 1
 	
	
	


	typeattribute dri_device_t device_node;

	 	 	 	 	
##### begin fs_associate(dri_device_t) depth: 2
 	
	
	


	allow dri_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dri_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(dri_device_t) depth: 2
 	
	
	


	allow dri_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(dri_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(dri_device_t) depth: 2
 	
	
	


	allow dri_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(dri_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(dri_device_t) depth: 0
 	

 	 	 	 	
##### begin dev_node(event_device_t) depth: 1
 	
	
	


	typeattribute event_device_t device_node;

	 	 	 	 	
##### begin fs_associate(event_device_t) depth: 2
 	
	
	


	allow event_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(event_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(event_device_t) depth: 2
 	
	
	


	allow event_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(event_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(event_device_t) depth: 2
 	
	
	


	allow event_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(event_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(event_device_t) depth: 0
 	

#
# Type for framebuffer /dev/fb/*
#
 	 	 	 	
##### begin dev_node(framebuf_device_t) depth: 1
 	
	
	


	typeattribute framebuf_device_t device_node;

	 	 	 	 	
##### begin fs_associate(framebuf_device_t) depth: 2
 	
	
	


	allow framebuf_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(framebuf_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(framebuf_device_t) depth: 2
 	
	
	


	allow framebuf_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(framebuf_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(framebuf_device_t) depth: 2
 	
	
	


	allow framebuf_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(framebuf_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(framebuf_device_t) depth: 0
 	

#
# Type for /dev/mapper/control
#
 	 	 	 	
##### begin dev_node(lvm_control_t) depth: 1
 	
	
	


	typeattribute lvm_control_t device_node;

	 	 	 	 	
##### begin fs_associate(lvm_control_t) depth: 2
 	
	
	


	allow lvm_control_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(lvm_control_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(lvm_control_t) depth: 2
 	
	
	


	allow lvm_control_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(lvm_control_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(lvm_control_t) depth: 2
 	
	
	


	allow lvm_control_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(lvm_control_t) depth: 1
 	

	 	 	 	
##### end dev_node(lvm_control_t) depth: 0
 	

#
# memory_device_t is the type of /dev/kmem,
# /dev/mem and /dev/port.
#
 	 	 	 	
##### begin dev_node(memory_device_t) depth: 1
 	
	
	


	typeattribute memory_device_t device_node;

	 	 	 	 	
##### begin fs_associate(memory_device_t) depth: 2
 	
	
	


	allow memory_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(memory_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(memory_device_t) depth: 2
 	
	
	


	allow memory_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(memory_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(memory_device_t) depth: 2
 	
	
	


	allow memory_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(memory_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(memory_device_t) depth: 0
 	

neverallow ~memory_raw_read memory_device_t:{ chr_file blk_file } read;
neverallow ~memory_raw_write memory_device_t:{ chr_file blk_file } { append write };

 	 	 	 	
##### begin dev_node(misc_device_t) depth: 1
 	
	
	


	typeattribute misc_device_t device_node;

	 	 	 	 	
##### begin fs_associate(misc_device_t) depth: 2
 	
	
	


	allow misc_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(misc_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(misc_device_t) depth: 2
 	
	
	


	allow misc_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(misc_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(misc_device_t) depth: 2
 	
	
	


	allow misc_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(misc_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(misc_device_t) depth: 0
 	

#
# A more general type for mouse devices.
#
 	 	 	 	
##### begin dev_node(mouse_device_t) depth: 1
 	
	
	


	typeattribute mouse_device_t device_node;

	 	 	 	 	
##### begin fs_associate(mouse_device_t) depth: 2
 	
	
	


	allow mouse_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mouse_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(mouse_device_t) depth: 2
 	
	
	


	allow mouse_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(mouse_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(mouse_device_t) depth: 2
 	
	
	


	allow mouse_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(mouse_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(mouse_device_t) depth: 0
 	

#
# Type for /dev/cpu/mtrr and /proc/mtrr
#
 	 	 	 	
##### begin dev_node(mtrr_device_t) depth: 1
 	
	
	


	typeattribute mtrr_device_t device_node;

	 	 	 	 	
##### begin fs_associate(mtrr_device_t) depth: 2
 	
	
	


	allow mtrr_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mtrr_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(mtrr_device_t) depth: 2
 	
	
	


	allow mtrr_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(mtrr_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(mtrr_device_t) depth: 2
 	
	
	


	allow mtrr_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(mtrr_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(mtrr_device_t) depth: 0
 	

#
# null_device_t is the type of /dev/null.
#
 	 	 	 	
##### begin dev_node(null_device_t) depth: 1
 	
	
	


	typeattribute null_device_t device_node;

	 	 	 	 	
##### begin fs_associate(null_device_t) depth: 2
 	
	
	


	allow null_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(null_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(null_device_t) depth: 2
 	
	
	


	allow null_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(null_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(null_device_t) depth: 2
 	
	
	


	allow null_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(null_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(null_device_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(null_device_t) depth: 1
 	
	
	


	typeattribute null_device_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(null_device_t) depth: 0
 	

#
# Type for /dev/pmu 
#
 	 	 	 	
##### begin dev_node(power_device_t) depth: 1
 	
	
	


	typeattribute power_device_t device_node;

	 	 	 	 	
##### begin fs_associate(power_device_t) depth: 2
 	
	
	


	allow power_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(power_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(power_device_t) depth: 2
 	
	
	


	allow power_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(power_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(power_device_t) depth: 2
 	
	
	


	allow power_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(power_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(power_device_t) depth: 0
 	

 	 	 	 	
##### begin dev_node(printer_device_t) depth: 1
 	
	
	


	typeattribute printer_device_t device_node;

	 	 	 	 	
##### begin fs_associate(printer_device_t) depth: 2
 	
	
	


	allow printer_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(printer_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(printer_device_t) depth: 2
 	
	
	


	allow printer_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(printer_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(printer_device_t) depth: 2
 	
	
	


	allow printer_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(printer_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(printer_device_t) depth: 0
 	

#
# random_device_t is the type of /dev/random
#
 	 	 	 	
##### begin dev_node(random_device_t) depth: 1
 	
	
	


	typeattribute random_device_t device_node;

	 	 	 	 	
##### begin fs_associate(random_device_t) depth: 2
 	
	
	


	allow random_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(random_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(random_device_t) depth: 2
 	
	
	


	allow random_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(random_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(random_device_t) depth: 2
 	
	
	


	allow random_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(random_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(random_device_t) depth: 0
 	

 	 	 	 	
##### begin dev_node(scanner_device_t) depth: 1
 	
	
	


	typeattribute scanner_device_t device_node;

	 	 	 	 	
##### begin fs_associate(scanner_device_t) depth: 2
 	
	
	


	allow scanner_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(scanner_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(scanner_device_t) depth: 2
 	
	
	


	allow scanner_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(scanner_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(scanner_device_t) depth: 2
 	
	
	


	allow scanner_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(scanner_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(scanner_device_t) depth: 0
 	

#
# Type for sound devices and mixers
#
 	 	 	 	
##### begin dev_node(sound_device_t) depth: 1
 	
	
	


	typeattribute sound_device_t device_node;

	 	 	 	 	
##### begin fs_associate(sound_device_t) depth: 2
 	
	
	


	allow sound_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sound_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(sound_device_t) depth: 2
 	
	
	


	allow sound_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(sound_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(sound_device_t) depth: 2
 	
	
	


	allow sound_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(sound_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(sound_device_t) depth: 0
 	

#
# sysfs_t is the type for the /sys pseudofs
#
 	 	 	 	
##### begin files_mountpoint(sysfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sysfs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sysfs_t) depth: 3
 	
	
	


	allow sysfs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sysfs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sysfs_t) depth: 3
 	
	
	


	allow sysfs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sysfs_t) depth: 2
 	
	typeattribute sysfs_t file_type;

	 	 	 	
##### end files_type(sysfs_t) depth: 1
 	
	typeattribute sysfs_t mountpoint;

	 	 	 	
##### end files_mountpoint(sysfs_t) depth: 0
 	
 	 	 	 	
##### begin fs_type(sysfs_t) depth: 1
 	
	
	


	typeattribute sysfs_t filesystem_type;

	allow sysfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(sysfs_t) depth: 0
 	

#
# urandom_device_t is the type of /dev/urandom
#
 	 	 	 	
##### begin dev_node(urandom_device_t) depth: 1
 	
	
	


	typeattribute urandom_device_t device_node;

	 	 	 	 	
##### begin fs_associate(urandom_device_t) depth: 2
 	
	
	


	allow urandom_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(urandom_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(urandom_device_t) depth: 2
 	
	
	


	allow urandom_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(urandom_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(urandom_device_t) depth: 2
 	
	
	


	allow urandom_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(urandom_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(urandom_device_t) depth: 0
 	

#
# usbfs_t is the type for the /proc/bus/usb pseudofs
#
 	 	 	 	
##### begin files_mountpoint(usbfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(usbfs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(usbfs_t) depth: 3
 	
	
	


	allow usbfs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usbfs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(usbfs_t) depth: 3
 	
	
	


	allow usbfs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(usbfs_t) depth: 2
 	
	typeattribute usbfs_t file_type;

	 	 	 	
##### end files_type(usbfs_t) depth: 1
 	
	typeattribute usbfs_t mountpoint;

	 	 	 	
##### end files_mountpoint(usbfs_t) depth: 0
 	
 	 	 	 	
##### begin fs_noxattr_type(usbfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_type(usbfs_t) depth: 2
 	
	
	


	typeattribute usbfs_t filesystem_type;

	allow usbfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(usbfs_t) depth: 1
 	

	typeattribute usbfs_t noxattrfs;

	 	 	 	
##### end fs_noxattr_type(usbfs_t) depth: 0
 	

#
# usb_device_t is the type for /dev/bus/usb/[0-9]+/[0-9]+
#
 	 	 	 	
##### begin dev_node(usb_device_t) depth: 1
 	
	
	


	typeattribute usb_device_t device_node;

	 	 	 	 	
##### begin fs_associate(usb_device_t) depth: 2
 	
	
	


	allow usb_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usb_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(usb_device_t) depth: 2
 	
	
	


	allow usb_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(usb_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(usb_device_t) depth: 2
 	
	
	


	allow usb_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(usb_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(usb_device_t) depth: 0
 	

# SEBSD still uses devfs so we need to genfscon the usb entries

 	 	 	 	
##### begin dev_node(v4l_device_t) depth: 1
 	
	
	


	typeattribute v4l_device_t device_node;

	 	 	 	 	
##### begin fs_associate(v4l_device_t) depth: 2
 	
	
	


	allow v4l_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(v4l_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(v4l_device_t) depth: 2
 	
	
	


	allow v4l_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(v4l_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(v4l_device_t) depth: 2
 	
	
	


	allow v4l_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(v4l_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(v4l_device_t) depth: 0
 	

 	 	 	 	
##### begin dev_node(xserver_misc_device_t) depth: 1
 	
	
	


	typeattribute xserver_misc_device_t device_node;

	 	 	 	 	
##### begin fs_associate(xserver_misc_device_t) depth: 2
 	
	
	


	allow xserver_misc_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(xserver_misc_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(xserver_misc_device_t) depth: 2
 	
	
	


	allow xserver_misc_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(xserver_misc_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(xserver_misc_device_t) depth: 2
 	
	
	


	allow xserver_misc_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(xserver_misc_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(xserver_misc_device_t) depth: 0
 	

#
# zero_device_t is the type of /dev/zero.
#
 	 	 	 	
##### begin dev_node(zero_device_t) depth: 1
 	
	
	


	typeattribute zero_device_t device_node;

	 	 	 	 	
##### begin fs_associate(zero_device_t) depth: 2
 	
	
	


	allow zero_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(zero_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(zero_device_t) depth: 2
 	
	
	


	allow zero_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(zero_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(zero_device_t) depth: 2
 	
	
	


	allow zero_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(zero_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(zero_device_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(zero_device_t) depth: 1
 	
	
	


	typeattribute zero_device_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(zero_device_t) depth: 0
 	


# TODO:

# this is not actually a device
# move it to xserver
 	 	 	 	
##### begin files_type(xconsole_device_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(xconsole_device_t) depth: 2
 	
	
	


	allow xconsole_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(xconsole_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(xconsole_device_t) depth: 2
 	
	
	


	allow xconsole_device_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(xconsole_device_t) depth: 1
 	
	typeattribute xconsole_device_t file_type;

	 	 	 	
##### end files_type(xconsole_device_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_tmpfs(xconsole_device_t) depth: 1
 	
	
	


	allow xconsole_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(xconsole_device_t) depth: 0
 	
 	 	 	 	
##### begin files_associate_tmp(xconsole_device_t) depth: 1
 	
	
	


	allow xconsole_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(xconsole_device_t) depth: 0
 	

# devfs is dead on selinux
# this should be removed
 	 	 	 	
##### begin dev_node(devfs_control_t) depth: 1
 	
	
	


	typeattribute devfs_control_t device_node;

	 	 	 	 	
##### begin fs_associate(devfs_control_t) depth: 2
 	
	
	


	allow devfs_control_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devfs_control_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(devfs_control_t) depth: 2
 	
	
	


	allow devfs_control_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(devfs_control_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(devfs_control_t) depth: 2
 	
	
	


	allow devfs_control_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(devfs_control_t) depth: 1
 	

	 	 	 	
##### end dev_node(devfs_control_t) depth: 0
 	


	


########################################
#
# Declarations
#

# Mark process types as domains

# Transitions only allowed from domains to other domains
neverallow domain ~domain:process { transition dyntransition };

# Domains that are unconfined

# Domains that can set their current context
# (perform dynamic transitions)

# enabling setcurrent breaks process tranquility.  If you do not
# know what this means or do not understand the implications of a
# dynamic transition, you should not be using it!!!
neverallow { domain -set_curr_context } self:process setcurrent;

# entrypoint executables

# widely-inheritable file descriptors

#
# constraint related attributes
#

# [1] types that can change SELinux identity on transition

# [2] types that can change SELinux role on transition

# [3] types that can change the SELinux identity on a filesystem
# object or a socket object on a create or relabel

# [3] types that can change to system_u:system_r

# [4] types that have attribute 1 can change the SELinux
# identity only if the target domain has this attribute.
# Types that have attribute 2 can change the SELinux role
# only if the target domain has this attribute.

# For cron jobs
# [5] types used for cron daemons
# [6] types used for cron jobs

# [7] types that are unconditionally exempt from
# SELinux identity and role change constraints

neverallow { domain unlabeled_t } ~{ domain unlabeled_t }:process *;
neverallow ~{ domain unlabeled_t } *:process *;


	


########################################
#
# Declarations
#


# cjp: should handle this different
allow file_type self:filesystem associate;


# For labeling types that are to be polyinstantiated

# this is a hack and should be changed

# And for labeling the parent directories of those polyinstantiated directories
# This is necessary for remounting the original in the parent to give
# security aware apps access

# And labeling for the member directories

# sensitive security files whose accesses should
# not be dontaudited for uses


#
# boot_t is the type for files in /boot
#
 	 	 	 	
##### begin files_type(boot_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(boot_t) depth: 2
 	
	
	


	allow boot_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(boot_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(boot_t) depth: 2
 	
	
	


	allow boot_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(boot_t) depth: 1
 	
	typeattribute boot_t file_type;

	 	 	 	
##### end files_type(boot_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(boot_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(boot_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(boot_t) depth: 3
 	
	
	


	allow boot_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(boot_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(boot_t) depth: 3
 	
	
	


	allow boot_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(boot_t) depth: 2
 	
	typeattribute boot_t file_type;

	 	 	 	
##### end files_type(boot_t) depth: 1
 	
	typeattribute boot_t mountpoint;

	 	 	 	
##### end files_mountpoint(boot_t) depth: 0
 	

# default_t is the default type for files that do not
# match any specification in the file_contexts configuration
# other than the generic /.* specification.
 	 	 	 	
##### begin fs_associate(default_t) depth: 1
 	
	
	


	allow default_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(default_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(default_t) depth: 1
 	
	
	


	allow default_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(default_t) depth: 0
 	

#
# etc_t is the type of the system etc directories.
#
 	 	 	 	
##### begin fs_associate(etc_t) depth: 1
 	
	
	


	allow etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(etc_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(etc_t) depth: 1
 	
	
	


	allow etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(etc_t) depth: 0
 	

#
# etc_runtime_t is the type of various
# files in /etc that are automatically
# generated during initialization.
#
 	 	 	 	
##### begin fs_associate(etc_runtime_t) depth: 1
 	
	
	


	allow etc_runtime_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(etc_runtime_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(etc_runtime_t) depth: 1
 	
	
	


	allow etc_runtime_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(etc_runtime_t) depth: 0
 	

#
# file_t is the default type of a file that has not yet been
# assigned an extended attribute (EA) value (when using a filesystem
# that supports EAs).
#
 	 	 	 	
##### begin fs_associate(file_t) depth: 1
 	
	
	


	allow file_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(file_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(file_t) depth: 1
 	
	
	


	allow file_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(file_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rootfs_mountpoint(file_t) depth: 1
 	
	
	


	allow kernel_t file_t:dir mounton;

	 	 	 	
##### end kernel_rootfs_mountpoint(file_t) depth: 0
 	

#
# home_root_t is the type for the directory where user home directories
# are created
#
 	 	 	 	
##### begin fs_associate(home_root_t) depth: 1
 	
	
	


	allow home_root_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(home_root_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(home_root_t) depth: 1
 	
	
	


	allow home_root_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(home_root_t) depth: 0
 	
 	 	 	 	
##### begin files_poly_parent(home_root_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(home_root_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(home_root_t) depth: 3
 	
	
	


	allow home_root_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(home_root_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(home_root_t) depth: 3
 	
	
	


	allow home_root_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(home_root_t) depth: 2
 	
	typeattribute home_root_t file_type;

	 	 	 	
##### end files_type(home_root_t) depth: 1
 	
	typeattribute home_root_t polyparent;

	 	 	 	
##### end files_poly_parent(home_root_t) depth: 0
 	

#
# lost_found_t is the type for the lost+found directories.
#
 	 	 	 	
##### begin fs_associate(lost_found_t) depth: 1
 	
	
	


	allow lost_found_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(lost_found_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(lost_found_t) depth: 1
 	
	
	


	allow lost_found_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(lost_found_t) depth: 0
 	

#
# mnt_t is the type for mount points such as /mnt/cdrom
#
 	 	 	 	
##### begin fs_associate(mnt_t) depth: 1
 	
	
	


	allow mnt_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mnt_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(mnt_t) depth: 1
 	
	
	


	allow mnt_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(mnt_t) depth: 0
 	

#
# modules_object_t is the type for kernel modules
#
 	 	 	 	
##### begin files_type(modules_object_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(modules_object_t) depth: 2
 	
	
	


	allow modules_object_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(modules_object_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(modules_object_t) depth: 2
 	
	
	


	allow modules_object_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(modules_object_t) depth: 1
 	
	typeattribute modules_object_t file_type;

	 	 	 	
##### end files_type(modules_object_t) depth: 0
 	

 	 	 	 	
##### begin fs_associate(no_access_t) depth: 1
 	
	
	


	allow no_access_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(no_access_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(no_access_t) depth: 1
 	
	
	


	allow no_access_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(no_access_t) depth: 0
 	

 	 	 	 	
##### begin fs_associate(poly_t) depth: 1
 	
	
	


	allow poly_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(poly_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(poly_t) depth: 1
 	
	
	


	allow poly_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(poly_t) depth: 0
 	

 	 	 	 	
##### begin fs_associate(readable_t) depth: 1
 	
	
	


	allow readable_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(readable_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(readable_t) depth: 1
 	
	
	


	allow readable_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(readable_t) depth: 0
 	

#
# root_t is the type for rootfs and the root directory.
#
 	 	 	 	
##### begin fs_associate(root_t) depth: 1
 	
	
	


	allow root_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(root_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(root_t) depth: 1
 	
	
	


	allow root_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(root_t) depth: 0
 	
 	 	 	 	
##### begin files_poly_parent(root_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(root_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(root_t) depth: 3
 	
	
	


	allow root_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(root_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(root_t) depth: 3
 	
	
	


	allow root_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(root_t) depth: 2
 	
	typeattribute root_t file_type;

	 	 	 	
##### end files_type(root_t) depth: 1
 	
	typeattribute root_t polyparent;

	 	 	 	
##### end files_poly_parent(root_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rootfs_mountpoint(root_t) depth: 1
 	
	
	


	allow kernel_t root_t:dir mounton;

	 	 	 	
##### end kernel_rootfs_mountpoint(root_t) depth: 0
 	

#
# src_t is the type of files in the system src directories.
#
 	 	 	 	
##### begin fs_associate(src_t) depth: 1
 	
	
	


	allow src_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(src_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(src_t) depth: 1
 	
	
	


	allow src_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(src_t) depth: 0
 	

#
# system_map_t is for the system.map files in /boot
#
 	 	 	 	
##### begin files_type(system_map_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_map_t) depth: 2
 	
	
	


	allow system_map_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_map_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_map_t) depth: 2
 	
	
	


	allow system_map_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_map_t) depth: 1
 	
	typeattribute system_map_t file_type;

	 	 	 	
##### end files_type(system_map_t) depth: 0
 	

#
# tmp_t is the type of the temporary directories
#
 	 	 	 	
##### begin files_tmp_file(tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(tmp_t) depth: 3
 	
	
	


	allow tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tmp_t) depth: 3
 	
	
	


	allow tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tmp_t) depth: 2
 	
	typeattribute tmp_t file_type;

	 	 	 	
##### end files_type(tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(tmp_t) depth: 4
 	
	
	


	allow tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tmp_t) depth: 4
 	
	
	


	allow tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tmp_t) depth: 3
 	
	typeattribute tmp_t file_type;

	 	 	 	
##### end files_type(tmp_t) depth: 2
 	
	typeattribute tmp_t polymember;

	 	 	 	
##### end files_poly_member(tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(tmp_t) depth: 2
 	
	
	


	allow tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(tmp_t) depth: 1
 	
	typeattribute tmp_t tmpfile;
	allow tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(tmp_t) depth: 0
 	
 	 	 	 	
##### begin files_poly_parent(tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(tmp_t) depth: 3
 	
	
	


	allow tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tmp_t) depth: 3
 	
	
	


	allow tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tmp_t) depth: 2
 	
	typeattribute tmp_t file_type;

	 	 	 	
##### end files_type(tmp_t) depth: 1
 	
	typeattribute tmp_t polyparent;

	 	 	 	
##### end files_poly_parent(tmp_t) depth: 0
 	

#
# usr_t is the type for /usr.
#
 	 	 	 	
##### begin fs_associate(usr_t) depth: 1
 	
	
	


	allow usr_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usr_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(usr_t) depth: 1
 	
	
	


	allow usr_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(usr_t) depth: 0
 	

#
# var_t is the type of /var
#
 	 	 	 	
##### begin fs_associate(var_t) depth: 1
 	
	
	


	allow var_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(var_t) depth: 1
 	
	
	


	allow var_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_t) depth: 0
 	

#
# var_lib_t is the type of /var/lib
#
 	 	 	 	
##### begin fs_associate(var_lib_t) depth: 1
 	
	
	


	allow var_lib_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_lib_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(var_lib_t) depth: 1
 	
	
	


	allow var_lib_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_lib_t) depth: 0
 	

#
# var_lock_t is tye type of /var/lock
#
 	 	 	 	
##### begin fs_associate(var_lock_t) depth: 1
 	
	
	


	allow var_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_lock_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(var_lock_t) depth: 1
 	
	
	


	allow var_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_lock_t) depth: 0
 	

#
# var_run_t is the type of /var/run, usually
# used for pid and other runtime files.
#
 	 	 	 	
##### begin fs_associate(var_run_t) depth: 1
 	
	
	


	allow var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_run_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_noxattr(var_run_t) depth: 1
 	
	
	


	allow var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_run_t) depth: 0
 	

#
# var_spool_t is the type of /var/spool
#
 	 	 	 	
##### begin files_tmp_file(var_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(var_spool_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(var_spool_t) depth: 3
 	
	
	


	allow var_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_spool_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(var_spool_t) depth: 3
 	
	
	


	allow var_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_spool_t) depth: 2
 	
	typeattribute var_spool_t file_type;

	 	 	 	
##### end files_type(var_spool_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(var_spool_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(var_spool_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(var_spool_t) depth: 4
 	
	
	


	allow var_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_spool_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(var_spool_t) depth: 4
 	
	
	


	allow var_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_spool_t) depth: 3
 	
	typeattribute var_spool_t file_type;

	 	 	 	
##### end files_type(var_spool_t) depth: 2
 	
	typeattribute var_spool_t polymember;

	 	 	 	
##### end files_poly_member(var_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(var_spool_t) depth: 2
 	
	
	


	allow var_spool_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(var_spool_t) depth: 1
 	
	typeattribute var_spool_t tmpfile;
	allow var_spool_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(var_spool_t) depth: 0
 	


	


########################################
#
# Declarations
#


##############################
#
# fs_t is the default type for persistent
# filesystems with extended attributes
#
 	 	 	 	
##### begin fs_type(fs_t) depth: 1
 	
	
	


	typeattribute fs_t filesystem_type;

	allow fs_t self:filesystem associate;

	 	 	 	
##### end fs_type(fs_t) depth: 0
 	

# Use xattrs for the following filesystem types.
# Requires that a security xattr handler exist for the filesystem.

# Use the allocating task SID to label inodes in the following filesystem
# types, and label the filesystem itself with the specified context.
# This is appropriate for pseudo filesystems that represent objects
# like pipes and sockets, so that these objects are labeled with the same
# type as the creating task.  

##############################
#
# Non-persistent/pseudo filesystems
#
 	 	 	 	
##### begin fs_type(bdev_t) depth: 1
 	
	
	


	typeattribute bdev_t filesystem_type;

	allow bdev_t self:filesystem associate;

	 	 	 	
##### end fs_type(bdev_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(binfmt_misc_fs_t) depth: 1
 	
	
	


	typeattribute binfmt_misc_fs_t filesystem_type;

	allow binfmt_misc_fs_t self:filesystem associate;

	 	 	 	
##### end fs_type(binfmt_misc_fs_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(binfmt_misc_fs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(binfmt_misc_fs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(binfmt_misc_fs_t) depth: 3
 	
	
	


	allow binfmt_misc_fs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(binfmt_misc_fs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(binfmt_misc_fs_t) depth: 3
 	
	
	


	allow binfmt_misc_fs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(binfmt_misc_fs_t) depth: 2
 	
	typeattribute binfmt_misc_fs_t file_type;

	 	 	 	
##### end files_type(binfmt_misc_fs_t) depth: 1
 	
	typeattribute binfmt_misc_fs_t mountpoint;

	 	 	 	
##### end files_mountpoint(binfmt_misc_fs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(capifs_t) depth: 1
 	
	
	


	typeattribute capifs_t filesystem_type;

	allow capifs_t self:filesystem associate;

	 	 	 	
##### end fs_type(capifs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(configfs_t) depth: 1
 	
	
	


	typeattribute configfs_t filesystem_type;

	allow configfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(configfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(eventpollfs_t) depth: 1
 	
	
	


	typeattribute eventpollfs_t filesystem_type;

	allow eventpollfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(eventpollfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(futexfs_t) depth: 1
 	
	
	


	typeattribute futexfs_t filesystem_type;

	allow futexfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(futexfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(hugetlbfs_t) depth: 1
 	
	
	


	typeattribute hugetlbfs_t filesystem_type;

	allow hugetlbfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(hugetlbfs_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(hugetlbfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(hugetlbfs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(hugetlbfs_t) depth: 3
 	
	
	


	allow hugetlbfs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(hugetlbfs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(hugetlbfs_t) depth: 3
 	
	
	


	allow hugetlbfs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(hugetlbfs_t) depth: 2
 	
	typeattribute hugetlbfs_t file_type;

	 	 	 	
##### end files_type(hugetlbfs_t) depth: 1
 	
	typeattribute hugetlbfs_t mountpoint;

	 	 	 	
##### end files_mountpoint(hugetlbfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(inotifyfs_t) depth: 1
 	
	
	


	typeattribute inotifyfs_t filesystem_type;

	allow inotifyfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(inotifyfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(nfsd_fs_t) depth: 1
 	
	
	


	typeattribute nfsd_fs_t filesystem_type;

	allow nfsd_fs_t self:filesystem associate;

	 	 	 	
##### end fs_type(nfsd_fs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(ramfs_t) depth: 1
 	
	
	


	typeattribute ramfs_t filesystem_type;

	allow ramfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(ramfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(romfs_t) depth: 1
 	
	
	


	typeattribute romfs_t filesystem_type;

	allow romfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(romfs_t) depth: 0
 	

 	 	 	 	
##### begin fs_type(rpc_pipefs_t) depth: 1
 	
	
	


	typeattribute rpc_pipefs_t filesystem_type;

	allow rpc_pipefs_t self:filesystem associate;

	 	 	 	
##### end fs_type(rpc_pipefs_t) depth: 0
 	

#
# tmpfs_t is the type for tmpfs filesystems
#
 	 	 	 	
##### begin fs_type(tmpfs_t) depth: 1
 	
	
	


	typeattribute tmpfs_t filesystem_type;

	allow tmpfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(tmpfs_t) depth: 0
 	
 	 	 	 	
##### begin files_type(tmpfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(tmpfs_t) depth: 2
 	
	
	


	allow tmpfs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tmpfs_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tmpfs_t) depth: 2
 	
	
	


	allow tmpfs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tmpfs_t) depth: 1
 	
	typeattribute tmpfs_t file_type;

	 	 	 	
##### end files_type(tmpfs_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(tmpfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(tmpfs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(tmpfs_t) depth: 3
 	
	
	


	allow tmpfs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tmpfs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tmpfs_t) depth: 3
 	
	
	


	allow tmpfs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tmpfs_t) depth: 2
 	
	typeattribute tmpfs_t file_type;

	 	 	 	
##### end files_type(tmpfs_t) depth: 1
 	
	typeattribute tmpfs_t mountpoint;

	 	 	 	
##### end files_mountpoint(tmpfs_t) depth: 0
 	

# Use a transition SID based on the allocating task SID and the
# filesystem SID to label inodes in the following filesystem types,
# and label the filesystem itself with the specified context.
# This is appropriate for pseudo filesystems like devpts and tmpfs
# where we want to label objects with a derived type.

allow tmpfs_t noxattrfs:filesystem associate;

##############################
#
# Filesystems without extended attribute support
#
 	 	 	 	
##### begin fs_type(autofs_t) depth: 1
 	
	
	


	typeattribute autofs_t filesystem_type;

	allow autofs_t self:filesystem associate;

	 	 	 	
##### end fs_type(autofs_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(autofs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(autofs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(autofs_t) depth: 3
 	
	
	


	allow autofs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(autofs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(autofs_t) depth: 3
 	
	
	


	allow autofs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(autofs_t) depth: 2
 	
	typeattribute autofs_t file_type;

	 	 	 	
##### end files_type(autofs_t) depth: 1
 	
	typeattribute autofs_t mountpoint;

	 	 	 	
##### end files_mountpoint(autofs_t) depth: 0
 	

#
# cifs_t is the type for filesystems and their
# files shared from Windows servers
#
 	 	 	 	
##### begin fs_type(cifs_t) depth: 1
 	
	
	


	typeattribute cifs_t filesystem_type;

	allow cifs_t self:filesystem associate;

	 	 	 	
##### end fs_type(cifs_t) depth: 0
 	

#
# dosfs_t is the type for fat and vfat
# filesystems and their files.
#
 	 	 	 	
##### begin fs_type(dosfs_t) depth: 1
 	
	
	


	typeattribute dosfs_t filesystem_type;

	allow dosfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(dosfs_t) depth: 0
 	
allow dosfs_t fs_t:filesystem associate;

#
# iso9660_t is the type for CD filesystems
# and their files.
#
 	 	 	 	
##### begin fs_type(iso9660_t) depth: 1
 	
	
	


	typeattribute iso9660_t filesystem_type;

	allow iso9660_t self:filesystem associate;

	 	 	 	
##### end fs_type(iso9660_t) depth: 0
 	

#
# removable_t is the default type of all removable media
#
allow removable_t noxattrfs:filesystem associate;
 	 	 	 	
##### begin fs_type(removable_t) depth: 1
 	
	
	


	typeattribute removable_t filesystem_type;

	allow removable_t self:filesystem associate;

	 	 	 	
##### end fs_type(removable_t) depth: 0
 	
 	 	 	 	
##### begin files_config_file(removable_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(removable_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(removable_t) depth: 3
 	
	
	


	allow removable_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(removable_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(removable_t) depth: 3
 	
	
	


	allow removable_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(removable_t) depth: 2
 	
	typeattribute removable_t file_type;

	 	 	 	
##### end files_type(removable_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute removable_t usercanread;

	 	 	 	
##### end files_config_file(removable_t) depth: 0
 	

#
# nfs_t is the default type for NFS file systems
# and their files.
#
 	 	 	 	
##### begin fs_type(nfs_t) depth: 1
 	
	
	


	typeattribute nfs_t filesystem_type;

	allow nfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(nfs_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(nfs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(nfs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(nfs_t) depth: 3
 	
	
	


	allow nfs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(nfs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(nfs_t) depth: 3
 	
	
	


	allow nfs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(nfs_t) depth: 2
 	
	typeattribute nfs_t file_type;

	 	 	 	
##### end files_type(nfs_t) depth: 1
 	
	typeattribute nfs_t mountpoint;

	 	 	 	
##### end files_mountpoint(nfs_t) depth: 0
 	


	


########################################
#
# Declarations
#

# assertion related attributes

neverallow ~can_load_kernmodule self:capability sys_module;

# domains with unconfined access to kernel resources

# regular entries in proc

# sysctls

role system_r;
role sysadm_r;
role staff_r;
role user_r;



#
# kernel_t is the domain of kernel threads.
# It is also the target type when checking permissions in the system class.
# 
 	 	 	 	
##### begin domain_base_type(kernel_t) depth: 1
 	
	
	


	# mark as a domain
	typeattribute kernel_t domain;

	# allow the domain to read its /proc/pid entries
	allow kernel_t self:dir { read getattr lock search ioctl };
	allow kernel_t self:lnk_file { read getattr lock ioctl };
	allow kernel_t self:file { getattr read write append ioctl lock };

	# allow kernel_t to create child processes in this domain
	allow kernel_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types kernel_t;
		role sysadm_r types kernel_t;
		role user_r types kernel_t;
		role staff_r types kernel_t;
	

	 	 	 	
##### end domain_base_type(kernel_t) depth: 0
 	
 	 	 	 	
##### begin mls_rangetrans_source(kernel_t) depth: 1
 	
	
	


	typeattribute kernel_t privrangetrans;

	 	 	 	
##### end mls_rangetrans_source(kernel_t) depth: 0
 	
role system_r types kernel_t;

#
# DebugFS
#

 	 	 	 	
##### begin fs_type(debugfs_t) depth: 1
 	
	
	


	typeattribute debugfs_t filesystem_type;

	allow debugfs_t self:filesystem associate;

	 	 	 	
##### end fs_type(debugfs_t) depth: 0
 	
allow debugfs_t self:filesystem associate;

#
# Procfs types
#

 	 	 	 	
##### begin files_mountpoint(proc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(proc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(proc_t) depth: 3
 	
	
	


	allow proc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(proc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(proc_t) depth: 3
 	
	
	


	allow proc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(proc_t) depth: 2
 	
	typeattribute proc_t file_type;

	 	 	 	
##### end files_type(proc_t) depth: 1
 	
	typeattribute proc_t mountpoint;

	 	 	 	
##### end files_mountpoint(proc_t) depth: 0
 	
 	 	 	 	
##### begin fs_type(proc_t) depth: 1
 	
	
	


	typeattribute proc_t filesystem_type;

	allow proc_t self:filesystem associate;

	 	 	 	
##### end fs_type(proc_t) depth: 0
 	

# kernel message interface
neverallow ~can_receive_kernel_messages proc_kmsg_t:file ~getattr;

# /proc kcore: inaccessible
neverallow { domain -kern_unconfined } proc_kcore_t:file ~getattr;



#
# Sysctl types
#

# /proc/sys directory, base directory of sysctls
 	 	 	 	
##### begin files_mountpoint(sysctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sysctl_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sysctl_t) depth: 3
 	
	
	


	allow sysctl_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sysctl_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sysctl_t) depth: 3
 	
	
	


	allow sysctl_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sysctl_t) depth: 2
 	
	typeattribute sysctl_t file_type;

	 	 	 	
##### end files_type(sysctl_t) depth: 1
 	
	typeattribute sysctl_t mountpoint;

	 	 	 	
##### end files_mountpoint(sysctl_t) depth: 0
 	

# /proc/irq directory and files

# /proc/net/rpc directory and files

# /proc/sys/fs directory and files
 	 	 	 	
##### begin files_mountpoint(sysctl_fs_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sysctl_fs_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sysctl_fs_t) depth: 3
 	
	
	


	allow sysctl_fs_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sysctl_fs_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sysctl_fs_t) depth: 3
 	
	
	


	allow sysctl_fs_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sysctl_fs_t) depth: 2
 	
	typeattribute sysctl_fs_t file_type;

	 	 	 	
##### end files_type(sysctl_fs_t) depth: 1
 	
	typeattribute sysctl_fs_t mountpoint;

	 	 	 	
##### end files_mountpoint(sysctl_fs_t) depth: 0
 	

# /proc/sys/kernel directory and files

# /proc/sys/kernel/modprobe file

# /proc/sys/kernel/hotplug file

# /proc/sys/net directory and files

# /proc/sys/net/unix directory and files

# /proc/sys/vm directory and files

# /proc/sys/dev directory and files

#
# unlabeled_t is the type of unlabeled objects.
# Objects that have no known labeling information or that
# have labels that are no longer valid are treated as having this type.
#

# These initial sids are no longer used, and can be removed:

########################################
#
# kernel local policy
#

# Use capabilities. need to investigate which capabilities are actually used
allow kernel_t self:capability *;

# Other possible mount points for the root fs are in files
allow kernel_t unlabeled_t:dir mounton;

# old general_domain_access()
allow kernel_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow kernel_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow kernel_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow kernel_t self:msg { send receive };
allow kernel_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow kernel_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow kernel_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow kernel_t self:unix_dgram_socket sendto;
allow kernel_t self:unix_stream_socket connectto;
allow kernel_t self:fifo_file { getattr read write append ioctl lock };
allow kernel_t self:sock_file { read getattr lock ioctl };
allow kernel_t self:fd use;

# old general_proc_read_access():
allow kernel_t proc_t:dir { read getattr lock search ioctl };
allow kernel_t proc_t:{ lnk_file file } { read getattr lock ioctl };
allow kernel_t proc_net_t:dir { read getattr lock search ioctl };
allow kernel_t proc_net_t:file { read getattr lock ioctl };
allow kernel_t proc_mdstat_t:file { read getattr lock ioctl };
allow kernel_t proc_kcore_t:file getattr;
allow kernel_t proc_kmsg_t:file getattr;
allow kernel_t sysctl_t:dir { read getattr lock search ioctl };
allow kernel_t sysctl_kernel_t:dir { read getattr lock search ioctl };
allow kernel_t sysctl_kernel_t:file { read getattr lock ioctl };

# cjp: this seems questionable
allow kernel_t unlabeled_t:fifo_file { getattr read write append ioctl lock };

 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(kernel_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(kernel_t) depth: 2
 	
	
	


	allow kernel_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(kernel_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(kernel_t) depth: 0
 	
# Kernel-generated traffic e.g., ICMP replies:
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(kernel_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(kernel_t) depth: 2
 	
	
	


	allow kernel_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow kernel_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(kernel_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(kernel_t) depth: 2
 	
	
	


	allow kernel_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(kernel_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(kernel_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(kernel_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(kernel_t) depth: 2
 	
	
	


	allow kernel_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(kernel_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(kernel_t) depth: 2
 	
	
	


	allow kernel_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(kernel_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(kernel_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_send_generic_if(kernel_t) depth: 1
 	
	
	


	allow kernel_t netif_t:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow kernel_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_generic_if(kernel_t) depth: 0
 	

# Kernel-generated traffic e.g., TCP resets:
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(kernel_t) depth: 1
 	
	
	


	allow kernel_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(kernel_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(kernel_t) depth: 1
 	
	
	


	allow kernel_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(kernel_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_send_generic_node(kernel_t) depth: 1
 	
	
	


	allow kernel_t node_t:node rawip_send;

	 	 	 	
##### end corenet_raw_send_generic_node(kernel_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_send_multicast_node(kernel_t) depth: 1
 	
	
	


	allow kernel_t multicast_node_t:node rawip_send;

	 	 	 	
##### end corenet_raw_send_multicast_node(kernel_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(kernel_t) depth: 1
 	
	
	


	allow kernel_t sysfs_t:dir { read getattr lock search ioctl };
	allow kernel_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(kernel_t) depth: 0
 	
 	 	 	 	
##### begin dev_search_usbfs(kernel_t) depth: 1
 	
	
	


	allow kernel_t usbfs_t:dir search;

	 	 	 	
##### end dev_search_usbfs(kernel_t) depth: 0
 	

# Mount root file system.  Used when loading a policy
# from initrd, then mounting the root filesystem
 	 	 	 	
##### begin fs_mount_all_fs(kernel_t) depth: 1
 	
	
	


	allow kernel_t filesystem_type:filesystem mount;

	 	 	 	
##### end fs_mount_all_fs(kernel_t) depth: 0
 	

 	 	 	 	
##### begin selinux_load_policy(kernel_t) depth: 1
 	
	
	


	allow kernel_t security_t:dir { read search getattr };
	allow kernel_t security_t:file { getattr read write };
	typeattribute kernel_t can_load_policy;

	if(!secure_mode_policyload) {
		allow kernel_t security_t:security load_policy;
		auditallow kernel_t security_t:security load_policy;
	}

	 	 	 	
##### end selinux_load_policy(kernel_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(kernel_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(kernel_t) depth: 2
 	
	
	


	allow kernel_t device_t:dir { read getattr lock search ioctl };
	allow kernel_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(kernel_t) depth: 1
 	
	allow kernel_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(kernel_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_shell(kernel_t) depth: 1
 	
	
	


	allow kernel_t bin_t:dir { read getattr lock search ioctl };
	allow kernel_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow kernel_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(kernel_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_list_sbin(kernel_t) depth: 1
 	
	
	


	allow kernel_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(kernel_t) depth: 0
 	
# /proc/sys/kernel/modprobe is set to /bin/true if not using modules.
 	 	 	 	
##### begin corecmd_exec_bin(kernel_t) depth: 1
 	
	
	


	allow kernel_t bin_t:dir { read getattr lock search ioctl };
	allow kernel_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow kernel_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(kernel_t) depth: 0
 	

 	 	 	 	
##### begin domain_signal_all_domains(kernel_t) depth: 1
 	
	
	


	allow kernel_t domain:process signal;

	 	 	 	
##### end domain_signal_all_domains(kernel_t) depth: 0
 	
 	 	 	 	
##### begin domain_search_all_domains_state(kernel_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_search_proc(kernel_t) depth: 2
 	
	
	


	allow kernel_t proc_t:dir search;

	 	 	 	
##### end kernel_search_proc(kernel_t) depth: 1
 	
	allow kernel_t domain:dir search;

	 	 	 	
##### end domain_search_all_domains_state(kernel_t) depth: 0
 	

 	 	 	 	
##### begin files_list_root(kernel_t) depth: 1
 	
	
	


	allow kernel_t root_t:dir { read getattr lock search ioctl };
	allow kernel_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(kernel_t) depth: 0
 	
 	 	 	 	
##### begin files_list_etc(kernel_t) depth: 1
 	
	
	


	allow kernel_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(kernel_t) depth: 0
 	
 	 	 	 	
##### begin files_list_home(kernel_t) depth: 1
 	
	
	


	allow kernel_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(kernel_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(kernel_t) depth: 1
 	
	
	


	allow kernel_t usr_t:dir { read getattr lock search ioctl };
	allow kernel_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(kernel_t) depth: 0
 	

 	 	 	 	
##### begin mls_process_read_up(kernel_t) depth: 1
 	
	
	


	typeattribute kernel_t mlsprocread;

	 	 	 	
##### end mls_process_read_up(kernel_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_write_down(kernel_t) depth: 1
 	
	
	


	typeattribute kernel_t mlsprocwrite;

	 	 	 	
##### end mls_process_write_down(kernel_t) depth: 0
 	


	 	 	 	 	
##### begin unconfined_domain(kernel_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(kernel_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow kernel_t self:capability *;
	allow kernel_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow kernel_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow kernel_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow kernel_t self:nscd *;
	allow kernel_t self:dbus *;
	allow kernel_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(kernel_t) depth: 3
 	
	
	


	allow kernel_t proc_type:{ dir file } *;

	allow kernel_t sysctl_t:{ dir file } *;

	allow kernel_t kernel_t:system *;

	allow kernel_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow kernel_t unlabeled_t:filesystem *;
	allow kernel_t unlabeled_t:association *;

	typeattribute kernel_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute kernel_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(kernel_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow kernel_t { proc_t proc_net_t }:dir search;

	allow kernel_t sysctl_type:dir { read getattr lock search ioctl };
	allow kernel_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(kernel_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(kernel_t) depth: 3
 	
	
	


	allow kernel_t node_type:node *;
	allow kernel_t netif_type:netif *;
	allow kernel_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow kernel_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow kernel_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow kernel_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(kernel_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(kernel_t) depth: 5
 	
	
	


	allow kernel_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(kernel_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(kernel_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(kernel_t) depth: 3
 	
	
	


	allow kernel_t device_node:{ chr_file blk_file } *;
	allow kernel_t mtrr_device_t:{ dir file } *;

	allow kernel_t self:capability sys_rawio;
	typeattribute kernel_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(kernel_t) depth: 3
 	
	
	


	typeattribute kernel_t unconfined_domain_type;

	# pass all constraints
	typeattribute kernel_t can_change_process_identity;
	typeattribute kernel_t can_change_process_role;
	typeattribute kernel_t can_change_object_identity;
	typeattribute kernel_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow kernel_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow kernel_t domain:fd use;
	allow kernel_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow kernel_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow kernel_t domain:{ sem msgq shm } *;
	allow kernel_t domain:msg { send receive };

	# For /proc/pid
	allow kernel_t domain:dir { read getattr lock search ioctl };
	allow kernel_t domain:file { read getattr lock ioctl };
	allow kernel_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(kernel_t) depth: 3
 	
	
	


	dontaudit kernel_t domain:dir { read getattr lock search ioctl };
	dontaudit kernel_t domain:lnk_file { read getattr lock ioctl };
	dontaudit kernel_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit kernel_t domain:sock_file { read getattr lock ioctl };
	dontaudit kernel_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(kernel_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow kernel_t file_type:{ file chr_file } ~execmod;
	allow kernel_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow kernel_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow kernel_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow kernel_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(kernel_t) depth: 3
 	
	
	


	allow kernel_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow kernel_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(kernel_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(kernel_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow kernel_t security_t:dir { getattr search read };
	allow kernel_t security_t:file { getattr read write };

	typeattribute kernel_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow kernel_t security_t:security *;
		auditallow kernel_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(kernel_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow kernel_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow kernel_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow kernel_t self:process execstack;
		auditallow kernel_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit kernel_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(kernel_t) depth: 3
 	
	
	


	typeattribute kernel_t can_read_shadow_passwords;
	typeattribute kernel_t can_write_shadow_passwords;
	typeattribute kernel_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(kernel_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(kernel_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(kernel_t) depth: 4
 	
	
	


	allow kernel_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(kernel_t) depth: 3
 	
	allow kernel_t lib_t:dir { read getattr lock search ioctl };
	allow kernel_t lib_t:lnk_file { read getattr lock ioctl };
	allow kernel_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow kernel_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow kernel_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(kernel_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(kernel_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(kernel_t) depth: 4
 	
	
	


	allow kernel_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(kernel_t) depth: 3
 	
	allow kernel_t selinux_config_t:dir search;
	allow kernel_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow kernel_t policy_config_t:file { getattr create write };
#	typeattribute kernel_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(kernel_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(kernel_t) depth: 3
 	
	
	


	allow kernel_t policy_config_t:file relabelto;
	typeattribute kernel_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(kernel_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(kernel_t) depth: 3
 	
	
	


	allow kernel_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow kernel_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute kernel_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute kernel_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(kernel_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(kernel_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow kernel_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow kernel_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(kernel_t) depth: 0
 	



	
		if (read_default_t) {
			
	 	 	 	 	
##### begin files_list_default(kernel_t) depth: 1
 	
	
	


	allow kernel_t default_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_default(kernel_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_files(kernel_t) depth: 1
 	
	
	


	allow kernel_t default_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_files(kernel_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_symlinks(kernel_t) depth: 1
 	
	
	


	allow kernel_t default_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_symlinks(kernel_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_sockets(kernel_t) depth: 1
 	
	
	


	allow kernel_t default_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_sockets(kernel_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_pipes(kernel_t) depth: 1
 	
	
	


	allow kernel_t default_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_pipes(kernel_t) depth: 0
 	

		
		}
	



	
		
	



	
		
	 	 	 	 	
##### begin init_sigchld(kernel_t) depth: 1
 	
	
	


	allow kernel_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(kernel_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin libs_use_ld_so(kernel_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(kernel_t) depth: 2
 	
	
	


	allow kernel_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(kernel_t) depth: 1
 	
	allow kernel_t lib_t:dir { read getattr lock search ioctl };
	allow kernel_t lib_t:lnk_file { read getattr lock ioctl };
	allow kernel_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow kernel_t ld_so_t:file { read getattr lock execute ioctl };
	allow kernel_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(kernel_t) depth: 0
 	
	 	 	 	 	
##### begin libs_use_shared_libs(kernel_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(kernel_t) depth: 2
 	
	
	


	allow kernel_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(kernel_t) depth: 1
 	
	allow kernel_t lib_t:dir { read getattr lock search ioctl };
	allow kernel_t lib_t:lnk_file { read getattr lock ioctl };
	allow kernel_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow kernel_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow kernel_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(kernel_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin logging_send_syslog_msg(kernel_t) depth: 1
 	
	
	


	allow kernel_t devlog_t:lnk_file read;
	allow kernel_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow kernel_t syslogd_t:unix_dgram_socket sendto;
	allow kernel_t syslogd_t:unix_stream_socket connectto;
	allow kernel_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow kernel_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(kernel_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(kernel_t) depth: 3
 	
	
	


	allow kernel_t device_t:dir { read getattr lock search ioctl };
	allow kernel_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(kernel_t) depth: 2
 	
	allow kernel_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(kernel_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(kernel_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_read_config(kernel_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(kernel_t) depth: 2
 	
	
	


	allow kernel_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(kernel_t) depth: 1
 	
	allow kernel_t selinux_config_t:dir { read getattr lock search ioctl };
	allow kernel_t selinux_config_t:file { read getattr lock ioctl };
	allow kernel_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(kernel_t) depth: 0
 	
	 	 	 	 	
##### begin seutil_read_bin_policy(kernel_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(kernel_t) depth: 2
 	
	
	


	allow kernel_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(kernel_t) depth: 1
 	
	allow kernel_t selinux_config_t:dir search;
	allow kernel_t policy_config_t:dir { read getattr lock search ioctl };
	allow kernel_t policy_config_t:file { read getattr lock ioctl };

	 	 	 	
##### end seutil_read_bin_policy(kernel_t) depth: 0
 	

	


########################################
#
# Unlabeled process local policy
#


	allow unlabeled_t self:filesystem associate;



	
		
	# If you load a new policy that removes active domains, processes can
	# get stuck if you do not allow unlabeled processes to signal init.
	# If you load an incompatible policy, you should probably reboot,
	# since you may have compromised system security.
	 	 	 	 	
##### begin init_sigchld(unlabeled_t) depth: 1
 	
	
	


	allow unlabeled_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(unlabeled_t) depth: 0
 	

	



	


########################################
#
# Declarations
#


########################################
#
# THIS IS A HACK
#
# Only the base module can have range_transitions, so we
# temporarily have to break encapsulation to work around this.
#





	


########################################
#
# Declarations
#








########################################
#
# THIS IS A HACK
#
# Only the base module can have range_transitions, so we
# temporarily have to break encapsulation to work around this.
# Other types are declared in the mcs module.
#





	


########################################
#
# Declarations
#


# 
# security_t is the target type when checking
# the permissions in the security class.  It is also
# applied to selinuxfs inodes.
#
 	 	 	 	
##### begin fs_type(security_t) depth: 1
 	
	
	


	typeattribute security_t filesystem_type;

	allow security_t self:filesystem associate;

	 	 	 	
##### end fs_type(security_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(security_t) depth: 1
 	
	
	


	typeattribute security_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(security_t) depth: 0
 	

neverallow ~can_load_policy security_t:security load_policy;
neverallow ~can_setenforce security_t:security setenforce;
neverallow ~can_setsecparam security_t:security setsecparam;


	


########################################
#
# Declarations
#

#
# bsdpty_device_t is the type of /dev/[tp]ty[abcdepqrstuvwxyz][0-9a-f]
 	 	 	 	
##### begin dev_node(bsdpty_device_t) depth: 1
 	
	
	


	typeattribute bsdpty_device_t device_node;

	 	 	 	 	
##### begin fs_associate(bsdpty_device_t) depth: 2
 	
	
	


	allow bsdpty_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(bsdpty_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(bsdpty_device_t) depth: 2
 	
	
	


	allow bsdpty_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(bsdpty_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(bsdpty_device_t) depth: 2
 	
	
	


	allow bsdpty_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(bsdpty_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(bsdpty_device_t) depth: 0
 	

#
# console_device_t is the type of /dev/console.
#
 	 	 	 	
##### begin dev_node(console_device_t) depth: 1
 	
	
	


	typeattribute console_device_t device_node;

	 	 	 	 	
##### begin fs_associate(console_device_t) depth: 2
 	
	
	


	allow console_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(console_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(console_device_t) depth: 2
 	
	
	


	allow console_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(console_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(console_device_t) depth: 2
 	
	
	


	allow console_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(console_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(console_device_t) depth: 0
 	

#
# devpts_t is the type of the devpts file system and 
# the type of the root directory of the file system.
#
 	 	 	 	
##### begin files_mountpoint(devpts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(devpts_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(devpts_t) depth: 3
 	
	
	


	allow devpts_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devpts_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(devpts_t) depth: 3
 	
	
	


	allow devpts_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(devpts_t) depth: 2
 	
	typeattribute devpts_t file_type;

	 	 	 	
##### end files_type(devpts_t) depth: 1
 	
	typeattribute devpts_t mountpoint;

	 	 	 	
##### end files_mountpoint(devpts_t) depth: 0
 	
 	 	 	 	
##### begin fs_associate_tmpfs(devpts_t) depth: 1
 	
	
	


	allow devpts_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(devpts_t) depth: 0
 	
 	 	 	 	
##### begin files_associate_tmp(devpts_t) depth: 1
 	
	
	


	allow devpts_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(devpts_t) depth: 0
 	
 	 	 	 	
##### begin fs_type(devpts_t) depth: 1
 	
	
	


	typeattribute devpts_t filesystem_type;

	allow devpts_t self:filesystem associate;

	 	 	 	
##### end fs_type(devpts_t) depth: 0
 	


	# cjp: the ttynode should probably be removed.
	typeattribute devpts_t ttynode, ptynode;


#
# devtty_t is the type of /dev/tty.
#
 	 	 	 	
##### begin dev_node(devtty_t) depth: 1
 	
	
	


	typeattribute devtty_t device_node;

	 	 	 	 	
##### begin fs_associate(devtty_t) depth: 2
 	
	
	


	allow devtty_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devtty_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(devtty_t) depth: 2
 	
	
	


	allow devtty_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(devtty_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(devtty_t) depth: 2
 	
	
	


	allow devtty_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(devtty_t) depth: 1
 	

	 	 	 	
##### end dev_node(devtty_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(devtty_t) depth: 1
 	
	
	


	typeattribute devtty_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(devtty_t) depth: 0
 	

#
# ptmx_t is the type for /dev/ptmx.
#
 	 	 	 	
##### begin dev_node(ptmx_t) depth: 1
 	
	
	


	typeattribute ptmx_t device_node;

	 	 	 	 	
##### begin fs_associate(ptmx_t) depth: 2
 	
	
	


	allow ptmx_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ptmx_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(ptmx_t) depth: 2
 	
	
	


	allow ptmx_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(ptmx_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(ptmx_t) depth: 2
 	
	
	


	allow ptmx_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(ptmx_t) depth: 1
 	

	 	 	 	
##### end dev_node(ptmx_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(ptmx_t) depth: 1
 	
	
	


	typeattribute ptmx_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(ptmx_t) depth: 0
 	

#
# tty_device_t is the type of /dev/*tty*
#
 	 	 	 	
##### begin dev_node(tty_device_t) depth: 1
 	
	
	


	typeattribute tty_device_t device_node;

	 	 	 	 	
##### begin fs_associate(tty_device_t) depth: 2
 	
	
	


	allow tty_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tty_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(tty_device_t) depth: 2
 	
	
	


	allow tty_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(tty_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(tty_device_t) depth: 2
 	
	
	


	allow tty_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(tty_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(tty_device_t) depth: 0
 	


	typeattribute tty_device_t ttynode;


#
# usbtty_device_t is the type of /dev/usr/tty*
#
 	 	 	 	
##### begin dev_node(usbtty_device_t) depth: 1
 	
	
	


	typeattribute usbtty_device_t device_node;

	 	 	 	 	
##### begin fs_associate(usbtty_device_t) depth: 2
 	
	
	


	allow usbtty_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usbtty_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(usbtty_device_t) depth: 2
 	
	
	


	allow usbtty_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(usbtty_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(usbtty_device_t) depth: 2
 	
	
	


	allow usbtty_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(usbtty_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(usbtty_device_t) depth: 0
 	


	


########################################
#
# Declarations
#


 	 	 	 	
##### begin files_type(chkpwd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(chkpwd_exec_t) depth: 2
 	
	
	


	allow chkpwd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(chkpwd_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(chkpwd_exec_t) depth: 2
 	
	
	


	allow chkpwd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(chkpwd_exec_t) depth: 1
 	
	typeattribute chkpwd_exec_t file_type;

	 	 	 	
##### end files_type(chkpwd_exec_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(faillog_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(faillog_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(faillog_t) depth: 3
 	
	
	


	allow faillog_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(faillog_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(faillog_t) depth: 3
 	
	
	


	allow faillog_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(faillog_t) depth: 2
 	
	typeattribute faillog_t file_type;

	 	 	 	
##### end files_type(faillog_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(faillog_t) depth: 2
 	
	
	


	allow faillog_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(faillog_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(faillog_t) depth: 2
 	
	
	


	allow faillog_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(faillog_t) depth: 1
 	
	typeattribute faillog_t logfile;

	 	 	 	
##### end logging_log_file(faillog_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(lastlog_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(lastlog_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(lastlog_t) depth: 3
 	
	
	


	allow lastlog_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(lastlog_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(lastlog_t) depth: 3
 	
	
	


	allow lastlog_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(lastlog_t) depth: 2
 	
	typeattribute lastlog_t file_type;

	 	 	 	
##### end files_type(lastlog_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(lastlog_t) depth: 2
 	
	
	


	allow lastlog_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(lastlog_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(lastlog_t) depth: 2
 	
	
	


	allow lastlog_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(lastlog_t) depth: 1
 	
	typeattribute lastlog_t logfile;

	 	 	 	
##### end logging_log_file(lastlog_t) depth: 0
 	

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin files_type(login_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(login_exec_t) depth: 2
 	
	
	


	allow login_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(login_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(login_exec_t) depth: 2
 	
	
	


	allow login_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(login_exec_t) depth: 1
 	
	typeattribute login_exec_t file_type;

	 	 	 	
##### end files_type(login_exec_t) depth: 0
 	

 	 	 	 	
##### begin init_system_domain(pam_console_t,pam_console_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(pam_console_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(pam_console_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute pam_console_t domain;

	# allow the domain to read its /proc/pid entries
	allow pam_console_t self:dir { read getattr lock search ioctl };
	allow pam_console_t self:lnk_file { read getattr lock ioctl };
	allow pam_console_t self:file { getattr read write append ioctl lock };

	# allow pam_console_t to create child processes in this domain
	allow pam_console_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types pam_console_t;
		role sysadm_r types pam_console_t;
		role user_r types pam_console_t;
		role staff_r types pam_console_t;
	

	 	 	 	
##### end domain_base_type(pam_console_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(pam_console_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 3
 	
	allow pam_console_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(pam_console_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t root_t:dir { read getattr lock search ioctl };
	allow pam_console_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(pam_console_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t init_t:process signull;

	 	 	 	
##### end init_signull(pam_console_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(pam_console_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(pam_console_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(pam_console_t) depth: 3
 	
	
	


	dontaudit pam_console_t security_t:dir search;
	dontaudit pam_console_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(pam_console_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(pam_console_t) depth: 3
 	
	
	


	dontaudit pam_console_t selinux_config_t:dir search;
	dontaudit pam_console_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(pam_console_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(pam_console_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(pam_console_t,pam_console_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(pam_console_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(pam_console_exec_t) depth: 4
 	
	
	


	allow pam_console_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(pam_console_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(pam_console_exec_t) depth: 4
 	
	
	


	allow pam_console_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(pam_console_exec_t) depth: 3
 	
	typeattribute pam_console_exec_t file_type;

	 	 	 	
##### end files_type(pam_console_exec_t) depth: 2
 	

	allow pam_console_t pam_console_exec_t:file entrypoint;
	allow pam_console_t pam_console_exec_t:file { read getattr lock execute ioctl };

	typeattribute pam_console_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(pam_console_t,pam_console_exec_t) depth: 1
 	

	role system_r types pam_console_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,pam_console_exec_t,pam_console_t) depth: 3
 	
	allow initrc_t pam_console_exec_t:file { getattr read execute };
	allow initrc_t pam_console_t:process transition;
	dontaudit initrc_t pam_console_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	type_transition initrc_t pam_console_exec_t:process pam_console_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,pam_console_exec_t,pam_console_t) depth: 1
 	

	allow initrc_t pam_console_t:fd use;
	allow pam_console_t initrc_t:fd use;
	allow pam_console_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow pam_console_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(pam_console_t,pam_console_exec_t) depth: 0
 	
role system_r types pam_console_t;

 	 	 	 	
##### begin domain_type(pam_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(pam_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute pam_t domain;

	# allow the domain to read its /proc/pid entries
	allow pam_t self:dir { read getattr lock search ioctl };
	allow pam_t self:lnk_file { read getattr lock ioctl };
	allow pam_t self:file { getattr read write append ioctl lock };

	# allow pam_t to create child processes in this domain
	allow pam_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types pam_t;
		role sysadm_r types pam_t;
		role user_r types pam_t;
		role staff_r types pam_t;
	

	 	 	 	
##### end domain_base_type(pam_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(pam_t) depth: 2
 	
	
	


	allow pam_t device_t:dir { read getattr lock search ioctl };
	allow pam_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(pam_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(pam_t) depth: 2
 	
	
	


	allow pam_t device_t:dir { read getattr lock search ioctl };
	allow pam_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(pam_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(pam_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_t) depth: 3
 	
	
	


	allow pam_t device_t:dir { read getattr lock search ioctl };
	allow pam_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_t) depth: 2
 	
	allow pam_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(pam_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(pam_t) depth: 2
 	
	
	


	allow pam_t root_t:dir { read getattr lock search ioctl };
	allow pam_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(pam_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(pam_t) depth: 2
 	
	
	


	allow pam_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(pam_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(pam_t) depth: 2
 	
	
	


	allow pam_t init_t:process signull;

	 	 	 	
##### end init_signull(pam_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(pam_t) depth: 2
 	
	
	


	allow pam_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(pam_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(pam_t) depth: 2
 	
	
	


	allow pam_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(pam_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(pam_t) depth: 2
 	
	
	


	dontaudit pam_t security_t:dir search;
	dontaudit pam_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(pam_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(pam_t) depth: 2
 	
	
	


	dontaudit pam_t selinux_config_t:dir search;
	dontaudit pam_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(pam_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(pam_t) depth: 0
 	
role system_r types pam_t;

 	 	 	 	
##### begin domain_entry_file(pam_t,pam_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(pam_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(pam_exec_t) depth: 3
 	
	
	


	allow pam_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(pam_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(pam_exec_t) depth: 3
 	
	
	


	allow pam_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(pam_exec_t) depth: 2
 	
	typeattribute pam_exec_t file_type;

	 	 	 	
##### end files_type(pam_exec_t) depth: 1
 	

	allow pam_t pam_exec_t:file entrypoint;
	allow pam_t pam_exec_t:file { read getattr lock execute ioctl };

	typeattribute pam_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(pam_t,pam_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(pam_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(pam_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(pam_tmp_t) depth: 3
 	
	
	


	allow pam_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(pam_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(pam_tmp_t) depth: 3
 	
	
	


	allow pam_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(pam_tmp_t) depth: 2
 	
	typeattribute pam_tmp_t file_type;

	 	 	 	
##### end files_type(pam_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(pam_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(pam_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(pam_tmp_t) depth: 4
 	
	
	


	allow pam_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(pam_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(pam_tmp_t) depth: 4
 	
	
	


	allow pam_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(pam_tmp_t) depth: 3
 	
	typeattribute pam_tmp_t file_type;

	 	 	 	
##### end files_type(pam_tmp_t) depth: 2
 	
	typeattribute pam_tmp_t polymember;

	 	 	 	
##### end files_poly_member(pam_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(pam_tmp_t) depth: 2
 	
	
	


	allow pam_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(pam_tmp_t) depth: 1
 	
	typeattribute pam_tmp_t tmpfile;
	allow pam_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(pam_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_type(pam_var_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(pam_var_console_t) depth: 2
 	
	
	


	allow pam_var_console_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(pam_var_console_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(pam_var_console_t) depth: 2
 	
	
	


	allow pam_var_console_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(pam_var_console_t) depth: 1
 	
	typeattribute pam_var_console_t file_type;

	 	 	 	
##### end files_type(pam_var_console_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(pam_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(pam_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(pam_var_run_t) depth: 3
 	
	
	


	allow pam_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(pam_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(pam_var_run_t) depth: 3
 	
	
	


	allow pam_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(pam_var_run_t) depth: 2
 	
	typeattribute pam_var_run_t file_type;

	 	 	 	
##### end files_type(pam_var_run_t) depth: 1
 	
	typeattribute pam_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(pam_var_run_t) depth: 0
 	

 	 	 	 	
##### begin files_security_file(shadow_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(shadow_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(shadow_t) depth: 3
 	
	
	


	allow shadow_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(shadow_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(shadow_t) depth: 3
 	
	
	


	allow shadow_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(shadow_t) depth: 2
 	
	typeattribute shadow_t file_type;

	 	 	 	
##### end files_type(shadow_t) depth: 1
 	
	typeattribute shadow_t security_file_type;

	 	 	 	
##### end files_security_file(shadow_t) depth: 0
 	
neverallow ~can_read_shadow_passwords shadow_t:file read;
neverallow ~can_write_shadow_passwords shadow_t:file { create write };
neverallow ~can_relabelto_shadow_passwords shadow_t:file relabelto;

 	 	 	 	
##### begin authlogin_common_auth_domain_template(system) depth: 1
 	
	
	


	type system_chkpwd_t, can_read_shadow_passwords;
	 	 	 	 	
##### begin domain_type(system_chkpwd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(system_chkpwd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute system_chkpwd_t domain;

	# allow the domain to read its /proc/pid entries
	allow system_chkpwd_t self:dir { read getattr lock search ioctl };
	allow system_chkpwd_t self:lnk_file { read getattr lock ioctl };
	allow system_chkpwd_t self:file { getattr read write append ioctl lock };

	# allow system_chkpwd_t to create child processes in this domain
	allow system_chkpwd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types system_chkpwd_t;
		role sysadm_r types system_chkpwd_t;
		role user_r types system_chkpwd_t;
		role staff_r types system_chkpwd_t;
	

	 	 	 	
##### end domain_base_type(system_chkpwd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t device_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t device_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(system_chkpwd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t device_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_chkpwd_t) depth: 3
 	
	allow system_chkpwd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(system_chkpwd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t root_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(system_chkpwd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t init_t:process signull;

	 	 	 	
##### end init_signull(system_chkpwd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(system_chkpwd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(system_chkpwd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(system_chkpwd_t) depth: 3
 	
	
	


	dontaudit system_chkpwd_t security_t:dir search;
	dontaudit system_chkpwd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(system_chkpwd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(system_chkpwd_t) depth: 3
 	
	
	


	dontaudit system_chkpwd_t selinux_config_t:dir search;
	dontaudit system_chkpwd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(system_chkpwd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(system_chkpwd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(system_chkpwd_t,chkpwd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(chkpwd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(chkpwd_exec_t) depth: 4
 	
	
	


	allow chkpwd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(chkpwd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(chkpwd_exec_t) depth: 4
 	
	
	


	allow chkpwd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(chkpwd_exec_t) depth: 3
 	
	typeattribute chkpwd_exec_t file_type;

	 	 	 	
##### end files_type(chkpwd_exec_t) depth: 2
 	

	allow system_chkpwd_t chkpwd_exec_t:file entrypoint;
	allow system_chkpwd_t chkpwd_exec_t:file { read getattr lock execute ioctl };

	typeattribute chkpwd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(system_chkpwd_t,chkpwd_exec_t) depth: 1
 	

	allow system_chkpwd_t self:capability { audit_write audit_control setuid };
	allow system_chkpwd_t self:process getattr;

	 	 	 	 	
##### begin files_list_etc(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(system_chkpwd_t) depth: 1
 	
	allow system_chkpwd_t shadow_t:file { getattr read };

	# is_selinux_enabled
	 	 	 	 	
##### begin kernel_read_system_state(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t proc_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t proc_t:lnk_file { getattr read };
	allow system_chkpwd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin dev_read_rand(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t device_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(system_chkpwd_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t device_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin fs_dontaudit_getattr_xattr_fs(system_chkpwd_t) depth: 2
 	
	
	


	dontaudit system_chkpwd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_dontaudit_getattr_xattr_fs(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin libs_use_ld_so(system_chkpwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_etc(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(system_chkpwd_t) depth: 2
 	
	allow system_chkpwd_t lib_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t lib_t:lnk_file { read getattr lock ioctl };
	allow system_chkpwd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow system_chkpwd_t ld_so_t:file { read getattr lock execute ioctl };
	allow system_chkpwd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(system_chkpwd_t) depth: 1
 	
	 	 	 	 	
##### begin libs_use_shared_libs(system_chkpwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_usr(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(system_chkpwd_t) depth: 2
 	
	allow system_chkpwd_t lib_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t lib_t:lnk_file { read getattr lock ioctl };
	allow system_chkpwd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow system_chkpwd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow system_chkpwd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin files_read_etc_files(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t etc_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t etc_t:file { read getattr lock ioctl };
	allow system_chkpwd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(system_chkpwd_t) depth: 1
 	
	# for nscd
	 	 	 	 	
##### begin files_dontaudit_search_var(system_chkpwd_t) depth: 2
 	
	
	


	dontaudit system_chkpwd_t var_t:dir search;

	 	 	 	
##### end files_dontaudit_search_var(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t devlog_t:lnk_file read;
	allow system_chkpwd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow system_chkpwd_t syslogd_t:unix_dgram_socket sendto;
	allow system_chkpwd_t syslogd_t:unix_stream_socket connectto;
	allow system_chkpwd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow system_chkpwd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(system_chkpwd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t device_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_chkpwd_t) depth: 3
 	
	allow system_chkpwd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(system_chkpwd_t) depth: 2
 	

	 	 	 	
##### end logging_send_syslog_msg(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_certs(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t cert_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t cert_t:file { read getattr lock ioctl };
	allow system_chkpwd_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(system_chkpwd_t) depth: 1
 	
	 	 	 	 	
##### begin miscfiles_read_localization(system_chkpwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_chkpwd_t) depth: 2
 	
	# FIXME: system_chkpwd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(system_chkpwd_t) depth: 2
 	
	allow system_chkpwd_t locale_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t locale_t:lnk_file { read getattr lock ioctl };
	allow system_chkpwd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(system_chkpwd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_usr(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(system_chkpwd_t) depth: 3
 	
	allow system_chkpwd_t lib_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(system_chkpwd_t) depth: 2
 	

	 	 	 	
##### end miscfiles_read_localization(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin seutil_read_config(system_chkpwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_chkpwd_t) depth: 2
 	
	allow system_chkpwd_t selinux_config_t:dir { read getattr lock search ioctl };
	allow system_chkpwd_t selinux_config_t:file { read getattr lock ioctl };
	allow system_chkpwd_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(system_chkpwd_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(system_chkpwd_t) depth: 2
 	
	
	


	allow system_chkpwd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow system_chkpwd_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow system_chkpwd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(system_chkpwd_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_chkpwd_t) depth: 2
 	
	allow system_chkpwd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(system_chkpwd_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(system_chkpwd_t) depth: 2
 	
	
	
		

	allow system_chkpwd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow system_chkpwd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(system_chkpwd_t) depth: 4
 	
	
	


	allow system_chkpwd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(system_chkpwd_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(system_chkpwd_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(system_chkpwd_t) depth: 3
 	
	
	


	allow system_chkpwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_chkpwd_t) depth: 2
 	
	allow system_chkpwd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(system_chkpwd_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
	


	
	
		
	

 	 	 	 	
##### end authlogin_common_auth_domain_template(system) depth: 0
 	
role system_r types system_chkpwd_t;

 	 	 	 	
##### begin domain_type(utempter_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(utempter_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute utempter_t domain;

	# allow the domain to read its /proc/pid entries
	allow utempter_t self:dir { read getattr lock search ioctl };
	allow utempter_t self:lnk_file { read getattr lock ioctl };
	allow utempter_t self:file { getattr read write append ioctl lock };

	# allow utempter_t to create child processes in this domain
	allow utempter_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types utempter_t;
		role sysadm_r types utempter_t;
		role user_r types utempter_t;
		role staff_r types utempter_t;
	

	 	 	 	
##### end domain_base_type(utempter_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(utempter_t) depth: 2
 	
	
	


	allow utempter_t device_t:dir { read getattr lock search ioctl };
	allow utempter_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(utempter_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(utempter_t) depth: 2
 	
	
	


	allow utempter_t device_t:dir { read getattr lock search ioctl };
	allow utempter_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(utempter_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(utempter_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(utempter_t) depth: 3
 	
	
	


	allow utempter_t device_t:dir { read getattr lock search ioctl };
	allow utempter_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(utempter_t) depth: 2
 	
	allow utempter_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(utempter_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(utempter_t) depth: 2
 	
	
	


	allow utempter_t root_t:dir { read getattr lock search ioctl };
	allow utempter_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(utempter_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(utempter_t) depth: 2
 	
	
	


	allow utempter_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(utempter_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(utempter_t) depth: 2
 	
	
	


	allow utempter_t init_t:process signull;

	 	 	 	
##### end init_signull(utempter_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(utempter_t) depth: 2
 	
	
	


	allow utempter_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(utempter_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(utempter_t) depth: 2
 	
	
	


	allow utempter_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(utempter_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(utempter_t) depth: 2
 	
	
	


	dontaudit utempter_t security_t:dir search;
	dontaudit utempter_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(utempter_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(utempter_t) depth: 2
 	
	
	


	dontaudit utempter_t selinux_config_t:dir search;
	dontaudit utempter_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(utempter_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(utempter_t) depth: 0
 	

 	 	 	 	
##### begin domain_entry_file(utempter_t,utempter_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(utempter_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(utempter_exec_t) depth: 3
 	
	
	


	allow utempter_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(utempter_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(utempter_exec_t) depth: 3
 	
	
	


	allow utempter_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(utempter_exec_t) depth: 2
 	
	typeattribute utempter_exec_t file_type;

	 	 	 	
##### end files_type(utempter_exec_t) depth: 1
 	

	allow utempter_t utempter_exec_t:file entrypoint;
	allow utempter_t utempter_exec_t:file { read getattr lock execute ioctl };

	typeattribute utempter_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(utempter_t,utempter_exec_t) depth: 0
 	

#
# var_auth_t is the type of /var/lib/auth, usually
# used for auth data in pam_able
#
 	 	 	 	
##### begin files_type(var_auth_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(var_auth_t) depth: 2
 	
	
	


	allow var_auth_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_auth_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(var_auth_t) depth: 2
 	
	
	


	allow var_auth_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_auth_t) depth: 1
 	
	typeattribute var_auth_t file_type;

	 	 	 	
##### end files_type(var_auth_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(wtmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(wtmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(wtmp_t) depth: 3
 	
	
	


	allow wtmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(wtmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(wtmp_t) depth: 3
 	
	
	


	allow wtmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(wtmp_t) depth: 2
 	
	typeattribute wtmp_t file_type;

	 	 	 	
##### end files_type(wtmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(wtmp_t) depth: 2
 	
	
	


	allow wtmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(wtmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(wtmp_t) depth: 2
 	
	
	


	allow wtmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(wtmp_t) depth: 1
 	
	typeattribute wtmp_t logfile;

	 	 	 	
##### end logging_log_file(wtmp_t) depth: 0
 	

########################################
#
# PAM local policy
#

allow pam_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
dontaudit pam_t self:capability sys_tty_config;

allow pam_t self:fd use;
allow pam_t self:fifo_file { getattr read write append ioctl lock };
allow pam_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } }; 
allow pam_t self:unix_stream_socket { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept };
allow pam_t self:unix_dgram_socket sendto;
allow pam_t self:unix_stream_socket connectto;
allow pam_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow pam_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow pam_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow pam_t self:msg { send receive };

allow pam_t pam_var_run_t:dir { search getattr read write remove_name };
allow pam_t pam_var_run_t:file { getattr read unlink };

allow pam_t pam_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow pam_t pam_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(pam_t,pam_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow pam_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition pam_t tmp_t:{ file dir } pam_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(pam_t,pam_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(pam_t) depth: 1
 	
	
	


	allow pam_t proc_t:dir { read getattr lock search ioctl };
	allow pam_t proc_t:lnk_file { getattr read };
	allow pam_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(pam_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(pam_t) depth: 1
 	
	
	


	allow pam_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(pam_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(pam_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_t) depth: 2
 	
	
	


	allow pam_t device_t:dir { read getattr lock search ioctl };
	allow pam_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_t) depth: 1
 	
	allow pam_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(pam_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(pam_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_t) depth: 2
 	
	
	


	allow pam_t device_t:dir { read getattr lock search ioctl };
	allow pam_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_t) depth: 1
 	
	allow pam_t devpts_t:dir { read getattr lock search ioctl };
	allow pam_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(pam_t) depth: 0
 	

 	 	 	 	
##### begin init_dontaudit_rw_utmp(pam_t) depth: 1
 	
	
	


	dontaudit pam_t initrc_var_run_t:file { getattr read write append };

	 	 	 	
##### end init_dontaudit_rw_utmp(pam_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(pam_t) depth: 1
 	
	
	


	allow pam_t etc_t:dir { read getattr lock search ioctl };
	allow pam_t etc_t:file { read getattr lock ioctl };
	allow pam_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(pam_t) depth: 0
 	
 	 	 	 	
##### begin files_list_pids(pam_t) depth: 1
 	
	
	


	allow pam_t var_t:dir { getattr search };
	allow pam_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(pam_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(pam_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(pam_t) depth: 2
 	
	
	


	allow pam_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(pam_t) depth: 1
 	
	allow pam_t lib_t:dir { read getattr lock search ioctl };
	allow pam_t lib_t:lnk_file { read getattr lock ioctl };
	allow pam_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow pam_t ld_so_t:file { read getattr lock execute ioctl };
	allow pam_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(pam_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(pam_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(pam_t) depth: 2
 	
	
	


	allow pam_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(pam_t) depth: 1
 	
	allow pam_t lib_t:dir { read getattr lock search ioctl };
	allow pam_t lib_t:lnk_file { read getattr lock ioctl };
	allow pam_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow pam_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow pam_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(pam_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(pam_t) depth: 1
 	
	
	


	allow pam_t devlog_t:lnk_file read;
	allow pam_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow pam_t syslogd_t:unix_dgram_socket sendto;
	allow pam_t syslogd_t:unix_stream_socket connectto;
	allow pam_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow pam_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(pam_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_t) depth: 3
 	
	
	


	allow pam_t device_t:dir { read getattr lock search ioctl };
	allow pam_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_t) depth: 2
 	
	allow pam_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(pam_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(pam_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(pam_t) depth: 1
 	
	
	


	allow pam_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(pam_t) depth: 0
 	


	
		
	 	 	 	 	
##### begin locallogin_use_fds(pam_t) depth: 1
 	
	
	


	allow pam_t local_login_t:fd use;

	 	 	 	
##### end locallogin_use_fds(pam_t) depth: 0
 	

	



	
		
	



	
		
	


########################################
#
# PAM console local policy
#

allow pam_console_t self:capability { chown fowner fsetid };
dontaudit pam_console_t self:capability sys_tty_config;

allow pam_console_t self:process { sigchld sigkill sigstop signull signal };

# for /var/run/console.lock checking
allow pam_console_t pam_var_console_t:dir { read getattr lock search ioctl };;
allow pam_console_t pam_var_console_t:file { read getattr lock ioctl };
dontaudit pam_console_t pam_var_console_t:file write;
allow pam_console_t pam_var_console_t:lnk_file { getattr read };

 	 	 	 	
##### begin kernel_read_kernel_sysctls(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t proc_t:dir search;
	allow pam_console_t sysctl_t:dir { read getattr lock search ioctl };
	allow pam_console_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow pam_console_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin kernel_use_fds(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t kernel_t:fd use;

	 	 	 	
##### end kernel_use_fds(pam_console_t) depth: 0
 	
# Read /proc/meminfo
 	 	 	 	
##### begin kernel_read_system_state(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t proc_t:dir { read getattr lock search ioctl };
	allow pam_console_t proc_t:lnk_file { getattr read };
	allow pam_console_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t sysfs_t:dir { read getattr lock search ioctl };
	allow pam_console_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_apm_bios_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t apm_bios_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_apm_bios_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_apm_bios_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t apm_bios_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_apm_bios_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_dri_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t dri_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_dri_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_dri_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t dri_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_dri_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_framebuffer_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t framebuf_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_framebuffer_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_framebuffer_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t framebuf_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_framebuffer_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_misc_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t misc_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_misc_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_misc_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t misc_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_misc_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_mouse_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t mouse_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_mouse_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_mouse_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t mouse_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_mouse_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_power_mgmt_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t power_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_power_mgmt_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_power_mgmt_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t power_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_power_mgmt_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_scanner_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t scanner_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_scanner_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_scanner_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t scanner_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_scanner_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_sound_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t sound_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_sound_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_sound_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t sound_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_sound_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_video_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t v4l_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_video_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_video_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t v4l_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_video_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_xserver_misc_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t xserver_misc_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_xserver_misc_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_xserver_misc_dev(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t xserver_misc_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_xserver_misc_dev(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin storage_getattr_fixed_disk_dev(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t fixed_disk_device_t:blk_file getattr;

	 	 	 	
##### end storage_getattr_fixed_disk_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin storage_setattr_fixed_disk_dev(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t fixed_disk_device_t:blk_file setattr;

	 	 	 	
##### end storage_setattr_fixed_disk_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin storage_getattr_removable_dev(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t removable_device_t:blk_file getattr;

	 	 	 	
##### end storage_getattr_removable_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin storage_setattr_removable_dev(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t removable_device_t:blk_file setattr;

	 	 	 	
##### end storage_setattr_removable_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin storage_getattr_scsi_generic_dev(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t scsi_generic_device_t:chr_file getattr;

	 	 	 	
##### end storage_getattr_scsi_generic_dev(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin storage_setattr_scsi_generic_dev(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t scsi_generic_device_t:chr_file setattr;

	 	 	 	
##### end storage_setattr_scsi_generic_dev(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_console(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t console_device_t:chr_file setattr;

	 	 	 	
##### end term_setattr_console(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin term_getattr_unallocated_ttys(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t tty_device_t:chr_file getattr;

	 	 	 	
##### end term_getattr_unallocated_ttys(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_unallocated_ttys(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t tty_device_t:chr_file setattr;

	 	 	 	
##### end term_setattr_unallocated_ttys(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin auth_use_nsswitch(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t var_auth_t:dir { read getattr lock search ioctl };
	allow pam_console_t var_auth_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_list_var_lib(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t var_t:dir { getattr search };
	allow pam_console_t var_lib_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_var_lib(pam_console_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow pam_console_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow pam_console_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(pam_console_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(pam_console_t) depth: 2
 	
	allow pam_console_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(pam_console_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(pam_console_t) depth: 2
 	
	
	
		

	allow pam_console_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow pam_console_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(pam_console_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(pam_console_t) depth: 4
 	
	
	


	allow pam_console_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(pam_console_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(pam_console_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(pam_console_t) depth: 2
 	
	allow pam_console_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(pam_console_t) depth: 1
 	

	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_use_nsswitch(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t etc_t:dir { read getattr lock search ioctl };
	allow pam_console_t etc_t:file { read getattr lock ioctl };
	allow pam_console_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin files_search_pids(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t var_t:dir { getattr search };
	allow pam_console_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin files_list_mnt(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t mnt_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_mnt(pam_console_t) depth: 0
 	
# read /etc/mtab
 	 	 	 	
##### begin files_read_etc_runtime_files(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t etc_t:dir { read getattr lock search ioctl };
	allow pam_console_t etc_runtime_t:file { read getattr lock ioctl };
	allow pam_console_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t init_t:fd use;

	 	 	 	
##### end init_use_fds(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(pam_console_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	allow pam_console_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(pam_console_t) depth: 1
 	
	allow pam_console_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(pam_console_t) depth: 1
 	
	allow pam_console_t lib_t:dir { read getattr lock search ioctl };
	allow pam_console_t lib_t:lnk_file { read getattr lock ioctl };
	allow pam_console_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow pam_console_t ld_so_t:file { read getattr lock execute ioctl };
	allow pam_console_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(pam_console_t) depth: 1
 	
	allow pam_console_t lib_t:dir { read getattr lock search ioctl };
	allow pam_console_t lib_t:lnk_file { read getattr lock ioctl };
	allow pam_console_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow pam_console_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow pam_console_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t devlog_t:lnk_file read;
	allow pam_console_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow pam_console_t syslogd_t:unix_dgram_socket sendto;
	allow pam_console_t syslogd_t:unix_stream_socket connectto;
	allow pam_console_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow pam_console_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(pam_console_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 3
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	allow pam_console_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(pam_console_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(pam_console_t) depth: 1
 	
	
	


	typeattribute pam_console_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(pam_console_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(pam_console_t) depth: 1
 	
	
	


	typeattribute pam_console_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_file_contexts(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(pam_console_t) depth: 1
 	
	allow pam_console_t selinux_config_t:dir search;
	allow pam_console_t file_context_t:dir { read getattr lock search ioctl };
	allow pam_console_t file_context_t:file { read getattr lock ioctl };
	allow pam_console_t file_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_file_contexts(pam_console_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(pam_console_t) depth: 1
 	
	
	


	dontaudit pam_console_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(pam_console_t) depth: 0
 	

# cjp: with the old daemon_(base_)domain being broken up into
# a daemon and system interface, this probably is not needed:



	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(pam_console_t) depth: 1
 	
	
	


	dontaudit pam_console_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(pam_console_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(pam_console_t) depth: 1
 	
	
	


	dontaudit pam_console_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(pam_console_t) depth: 0
 	
	 	 	 	 	
##### begin files_dontaudit_read_root_files(pam_console_t) depth: 1
 	
	
	


	dontaudit pam_console_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(pam_console_t) depth: 0
 	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(pam_console_t) depth: 1
 	
	
	


	allow pam_console_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(pam_console_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(pam_console_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(pam_console_t) depth: 2
 	
	
	


	allow pam_console_t device_t:dir { read getattr lock search ioctl };
	allow pam_console_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(pam_console_t) depth: 1
 	
	allow pam_console_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(pam_console_t) depth: 0
 	

	


 
########################################
#
# System check password local policy
#

allow system_chkpwd_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

allow system_chkpwd_t shadow_t:file { getattr read };

 	 	 	 	
##### begin corecmd_search_sbin(system_chkpwd_t) depth: 1
 	
	
	


	allow system_chkpwd_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(system_chkpwd_t) depth: 0
 	

 	 	 	 	
##### begin domain_dontaudit_use_interactive_fds(system_chkpwd_t) depth: 1
 	
	
	


	dontaudit system_chkpwd_t privfd:fd use;

	 	 	 	
##### end domain_dontaudit_use_interactive_fds(system_chkpwd_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(system_chkpwd_t) depth: 1
 	
	
	


	dontaudit system_chkpwd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(system_chkpwd_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(system_chkpwd_t) depth: 1
 	
	
	


	dontaudit system_chkpwd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(system_chkpwd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_users_ttys(system_chkpwd_t) depth: 1
 	
	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(system_chkpwd_t) depth: 2
 	
	
	


	dontaudit system_chkpwd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(system_chkpwd_t) depth: 1
 	
	

	 	 	 	
##### end userdom_dontaudit_use_unpriv_users_ttys(system_chkpwd_t) depth: 0
 	

########################################
#
# Utempter local policy
#

allow utempter_t self:capability setgid;
allow utempter_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };

allow utempter_t wtmp_t:file { getattr read write append ioctl lock };

 	 	 	 	
##### begin dev_read_urand(utempter_t) depth: 1
 	
	
	


	allow utempter_t device_t:dir { read getattr lock search ioctl };
	allow utempter_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(utempter_t) depth: 0
 	

 	 	 	 	
##### begin term_getattr_all_user_ttys(utempter_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(utempter_t) depth: 2
 	
	
	


	allow utempter_t device_t:dir { read getattr lock search ioctl };
	allow utempter_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(utempter_t) depth: 1
 	
	allow utempter_t ttynode:chr_file getattr;

	 	 	 	
##### end term_getattr_all_user_ttys(utempter_t) depth: 0
 	
 	 	 	 	
##### begin term_getattr_all_user_ptys(utempter_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(utempter_t) depth: 2
 	
	
	


	allow utempter_t device_t:dir { read getattr lock search ioctl };
	allow utempter_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(utempter_t) depth: 1
 	
	allow utempter_t devpts_t:dir { read getattr lock search ioctl };
	allow utempter_t ptynode:chr_file getattr;

	 	 	 	
##### end term_getattr_all_user_ptys(utempter_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_all_user_ttys(utempter_t) depth: 1
 	
	
	


	dontaudit utempter_t ttynode:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_all_user_ttys(utempter_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_all_user_ptys(utempter_t) depth: 1
 	
	
	


	dontaudit utempter_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_dontaudit_use_all_user_ptys(utempter_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_ptmx(utempter_t) depth: 1
 	
	
	


	dontaudit utempter_t ptmx_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_ptmx(utempter_t) depth: 0
 	

 	 	 	 	
##### begin init_rw_utmp(utempter_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(utempter_t) depth: 2
 	
	
	


	allow utempter_t var_t:dir { getattr search };
	allow utempter_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(utempter_t) depth: 1
 	
	allow utempter_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(utempter_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(utempter_t) depth: 1
 	
	
	


	allow utempter_t etc_t:dir { read getattr lock search ioctl };
	allow utempter_t etc_t:file { read getattr lock ioctl };
	allow utempter_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(utempter_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(utempter_t) depth: 1
 	
	
	


	allow utempter_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(utempter_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(utempter_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(utempter_t) depth: 2
 	
	
	


	allow utempter_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(utempter_t) depth: 1
 	
	allow utempter_t lib_t:dir { read getattr lock search ioctl };
	allow utempter_t lib_t:lnk_file { read getattr lock ioctl };
	allow utempter_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow utempter_t ld_so_t:file { read getattr lock execute ioctl };
	allow utempter_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(utempter_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(utempter_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(utempter_t) depth: 2
 	
	
	


	allow utempter_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(utempter_t) depth: 1
 	
	allow utempter_t lib_t:dir { read getattr lock search ioctl };
	allow utempter_t lib_t:lnk_file { read getattr lock ioctl };
	allow utempter_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow utempter_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow utempter_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(utempter_t) depth: 0
 	

 	 	 	 	
##### begin logging_search_logs(utempter_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(utempter_t) depth: 2
 	
	
	


	allow utempter_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(utempter_t) depth: 1
 	
	allow utempter_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(utempter_t) depth: 0
 	

# Allow utemper to write to /tmp/.xses-*
 	 	 	 	
##### begin userdom_write_unpriv_users_tmp_files(utempter_t) depth: 1
 	
	
	


	allow utempter_t user_tmpfile:file { getattr write append };

	 	 	 	
##### end userdom_write_unpriv_users_tmp_files(utempter_t) depth: 0
 	


	
		
	





	


########################################
#
# Declarations
#

 	 	 	 	
##### begin init_daemon_domain(automount_t,automount_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(automount_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(automount_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute automount_t domain;

	# allow the domain to read its /proc/pid entries
	allow automount_t self:dir { read getattr lock search ioctl };
	allow automount_t self:lnk_file { read getattr lock ioctl };
	allow automount_t self:file { getattr read write append ioctl lock };

	# allow automount_t to create child processes in this domain
	allow automount_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types automount_t;
		role sysadm_r types automount_t;
		role user_r types automount_t;
		role staff_r types automount_t;
	

	 	 	 	
##### end domain_base_type(automount_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(automount_t) depth: 3
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(automount_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(automount_t) depth: 3
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(automount_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(automount_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(automount_t) depth: 4
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(automount_t) depth: 3
 	
	allow automount_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(automount_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(automount_t) depth: 3
 	
	
	


	allow automount_t root_t:dir { read getattr lock search ioctl };
	allow automount_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(automount_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(automount_t) depth: 3
 	
	
	


	allow automount_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(automount_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(automount_t) depth: 3
 	
	
	


	allow automount_t init_t:process signull;

	 	 	 	
##### end init_signull(automount_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(automount_t) depth: 3
 	
	
	


	allow automount_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(automount_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(automount_t) depth: 3
 	
	
	


	allow automount_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(automount_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(automount_t) depth: 3
 	
	
	


	dontaudit automount_t security_t:dir search;
	dontaudit automount_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(automount_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(automount_t) depth: 3
 	
	
	


	dontaudit automount_t selinux_config_t:dir search;
	dontaudit automount_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(automount_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(automount_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(automount_t,automount_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(automount_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_exec_t) depth: 4
 	
	
	


	allow automount_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_exec_t) depth: 4
 	
	
	


	allow automount_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_exec_t) depth: 3
 	
	typeattribute automount_exec_t file_type;

	 	 	 	
##### end files_type(automount_exec_t) depth: 2
 	

	allow automount_t automount_exec_t:file entrypoint;
	allow automount_t automount_exec_t:file { read getattr lock execute ioctl };

	typeattribute automount_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(automount_t,automount_exec_t) depth: 1
 	

	role system_r types automount_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool automount_disable_trans false;
			
		
		if(automount_disable_trans ) {
			
	
	


	allow initrc_t automount_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init automount_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,automount_exec_t,automount_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,automount_exec_t,automount_t) depth: 3
 	
	allow initrc_t automount_exec_t:file { getattr read execute };
	allow initrc_t automount_t:process transition;
	dontaudit initrc_t automount_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,automount_exec_t,automount_t) depth: 2
 	
	type_transition initrc_t automount_exec_t:process automount_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,automount_exec_t,automount_t) depth: 1
 	
			allow initrc_t automount_t:fd use;
			allow automount_t initrc_t:fd use;
			allow automount_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow automount_t initrc_t:process sigchld;
			allow initrc_t automount_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow automount_t automount_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(automount_t,automount_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(automount_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(automount_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_var_run_t) depth: 3
 	
	
	


	allow automount_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_var_run_t) depth: 3
 	
	
	


	allow automount_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_var_run_t) depth: 2
 	
	typeattribute automount_var_run_t file_type;

	 	 	 	
##### end files_type(automount_var_run_t) depth: 1
 	
	typeattribute automount_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(automount_var_run_t) depth: 0
 	

 	 	 	 	
##### begin files_config_file(automount_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(automount_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_etc_t) depth: 3
 	
	
	


	allow automount_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_etc_t) depth: 3
 	
	
	


	allow automount_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_etc_t) depth: 2
 	
	typeattribute automount_etc_t file_type;

	 	 	 	
##### end files_type(automount_etc_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute automount_etc_t usercanread;

	 	 	 	
##### end files_config_file(automount_etc_t) depth: 0
 	

 	 	 	 	
##### begin files_lock_file(automount_lock_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(automount_lock_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_lock_t) depth: 3
 	
	
	


	allow automount_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_lock_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_lock_t) depth: 3
 	
	
	


	allow automount_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_lock_t) depth: 2
 	
	typeattribute automount_lock_t file_type;

	 	 	 	
##### end files_type(automount_lock_t) depth: 1
 	
	typeattribute automount_lock_t lockfile;

	 	 	 	
##### end files_lock_file(automount_lock_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(automount_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(automount_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_tmp_t) depth: 3
 	
	
	


	allow automount_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_tmp_t) depth: 3
 	
	
	


	allow automount_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_tmp_t) depth: 2
 	
	typeattribute automount_tmp_t file_type;

	 	 	 	
##### end files_type(automount_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(automount_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(automount_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_tmp_t) depth: 4
 	
	
	


	allow automount_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_tmp_t) depth: 4
 	
	
	


	allow automount_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_tmp_t) depth: 3
 	
	typeattribute automount_tmp_t file_type;

	 	 	 	
##### end files_type(automount_tmp_t) depth: 2
 	
	typeattribute automount_tmp_t polymember;

	 	 	 	
##### end files_poly_member(automount_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(automount_tmp_t) depth: 2
 	
	
	


	allow automount_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(automount_tmp_t) depth: 1
 	
	typeattribute automount_tmp_t tmpfile;
	allow automount_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(automount_tmp_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(automount_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(automount_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(automount_tmp_t) depth: 3
 	
	
	


	allow automount_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(automount_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(automount_tmp_t) depth: 3
 	
	
	


	allow automount_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(automount_tmp_t) depth: 2
 	
	typeattribute automount_tmp_t file_type;

	 	 	 	
##### end files_type(automount_tmp_t) depth: 1
 	
	typeattribute automount_tmp_t mountpoint;

	 	 	 	
##### end files_mountpoint(automount_tmp_t) depth: 0
 	

########################################
#
# Local policy
#

allow automount_t self:capability { net_bind_service sys_nice sys_resource dac_override };
dontaudit automount_t self:capability sys_tty_config;
allow automount_t self:process { { sigchld sigkill sigstop signull signal } getpgid setpgid setsched };
allow automount_t self:fifo_file { getattr read write append ioctl lock };
allow automount_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow automount_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow automount_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow automount_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow automount_t automount_etc_t:file { getattr read };
# because config files can be shell scripts

	
	


	allow automount_t automount_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow automount_t automount_lock_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_lock_filetrans(automount_t,automount_lock_t,file) depth: 1
 	
	
	


	allow automount_t var_t:dir search;
	allow automount_t var_lock_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition automount_t var_lock_t:file automount_lock_t;

	 	 	 	
##### end files_lock_filetrans(automount_t,automount_lock_t,file) depth: 0
 	

allow automount_t automount_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow automount_t automount_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(automount_t,automount_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow automount_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition automount_t tmp_t:{ file dir } automount_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(automount_t,automount_tmp_t,{ file dir }) depth: 0
 	

# Allow automount to create and delete directories in / and /home
allow automount_t automount_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
 	 	 	 	
##### begin files_home_filetrans(automount_t,automount_tmp_t,dir) depth: 1
 	
	
	


	allow automount_t home_root_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition automount_t home_root_t:dir automount_tmp_t;

	 	 	 	
##### end files_home_filetrans(automount_t,automount_tmp_t,dir) depth: 0
 	
 	 	 	 	
##### begin files_root_filetrans(automount_t,automount_tmp_t,dir) depth: 1
 	
	
	


	allow automount_t root_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition automount_t root_t:dir automount_tmp_t;

	 	 	 	
##### end files_root_filetrans(automount_t,automount_tmp_t,dir) depth: 0
 	

allow automount_t automount_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow automount_t automount_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(automount_t,automount_var_run_t,file) depth: 1
 	
	
	


	allow automount_t var_t:dir { getattr search };
	allow automount_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition automount_t var_run_t:file automount_var_run_t;

	 	 	 	
##### end files_pid_filetrans(automount_t,automount_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(automount_t) depth: 1
 	
	
	


	allow automount_t proc_t:dir search;
	allow automount_t sysctl_t:dir { read getattr lock search ioctl };
	allow automount_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow automount_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(automount_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_fs_sysctls(automount_t) depth: 1
 	
	
	


	allow automount_t proc_t:dir search;
	allow automount_t sysctl_t:dir { read getattr lock search ioctl };
	allow automount_t sysctl_fs_t:dir { read getattr lock search ioctl };
	allow automount_t sysctl_fs_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_fs_sysctls(automount_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(automount_t) depth: 1
 	
	
	


	allow automount_t proc_t:dir search;
	allow automount_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(automount_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(automount_t) depth: 1
 	
	
	


	allow automount_t proc_t:dir { read getattr lock search ioctl };
	allow automount_t proc_t:lnk_file { getattr read };
	allow automount_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(automount_t) depth: 0
 	
 	 	 	 	
##### begin kernel_list_proc(automount_t) depth: 1
 	
	
	


	allow automount_t proc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_proc(automount_t) depth: 0
 	

 	 	 	 	
##### begin files_search_boot(automount_t) depth: 1
 	
	
	


	allow automount_t boot_t:dir { getattr search };

	 	 	 	
##### end files_search_boot(automount_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_sbin(automount_t) depth: 1
 	
	
	


	allow automount_t sbin_t:dir { read getattr lock search ioctl };
	allow automount_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow automount_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(automount_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(automount_t) depth: 1
 	
	
	


	allow automount_t bin_t:dir { read getattr lock search ioctl };
	allow automount_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow automount_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(automount_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(automount_t) depth: 1
 	
	
	


	allow automount_t bin_t:dir { read getattr lock search ioctl };
	allow automount_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow automount_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(automount_t) depth: 0
 	

 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(automount_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(automount_t) depth: 2
 	
	
	


	allow automount_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(automount_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_generic_if(automount_t) depth: 1
 	
	
	


	allow automount_t netif_t:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_generic_if(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_generic_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_generic_if(automount_t) depth: 2
 	
	
	


	allow automount_t netif_t:netif udp_send;

	 	 	 	
##### end corenet_udp_send_generic_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_generic_if(automount_t) depth: 2
 	
	
	


	allow automount_t netif_t:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_generic_if(automount_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_generic_if(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_generic_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_generic_if(automount_t) depth: 2
 	
	
	


	allow automount_t netif_t:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow automount_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_generic_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_generic_if(automount_t) depth: 2
 	
	
	


	allow automount_t netif_t:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_generic_if(automount_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_generic_if(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(automount_t) depth: 1
 	
	
	


	allow automount_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(automount_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(automount_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(automount_t) depth: 1
 	
	
	


	allow automount_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(automount_t) depth: 2
 	
	
	


	allow automount_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(automount_t) depth: 2
 	
	
	


	allow automount_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(automount_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(automount_t) depth: 1
 	
	
	


	allow automount_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(automount_t) depth: 1
 	
	
	


	allow automount_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_portmap_port(automount_t) depth: 1
 	
	
	


	allow automount_t portmap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_portmap_port(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(automount_t) depth: 1
 	
	
	


	allow automount_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(automount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_dontaudit_tcp_connect_all_reserved_ports(automount_t) depth: 1
 	
	
	


	dontaudit automount_t reserved_port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_dontaudit_tcp_connect_all_reserved_ports(automount_t) depth: 0
 	
# Automount execs showmount when you browse /net.  This is required until
# Someone writes a showmount policy
 	 	 	 	
##### begin corenet_tcp_bind_reserved_port(automount_t) depth: 1
 	
	
	


	allow automount_t reserved_port_t:tcp_socket name_bind;
	allow automount_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_reserved_port(automount_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(automount_t) depth: 1
 	
	
	


	allow automount_t sysfs_t:dir { read getattr lock search ioctl };
	allow automount_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(automount_t) depth: 0
 	
# for SSP
 	 	 	 	
##### begin dev_read_urand(automount_t) depth: 1
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(automount_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(automount_t) depth: 1
 	
	
	


	allow automount_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(automount_t) depth: 0
 	

 	 	 	 	
##### begin files_dontaudit_write_var_dirs(automount_t) depth: 1
 	
	
	


	dontaudit automount_t var_t:dir write;

	 	 	 	
##### end files_dontaudit_write_var_dirs(automount_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_all_dirs(automount_t) depth: 1
 	
	
	


	allow automount_t file_type:dir { getattr search };

	 	 	 	
##### end files_getattr_all_dirs(automount_t) depth: 0
 	
 	 	 	 	
##### begin files_list_mnt(automount_t) depth: 1
 	
	
	


	allow automount_t mnt_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_mnt(automount_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_home_dir(automount_t) depth: 1
 	
	
	


	allow automount_t home_root_t:dir getattr;

	 	 	 	
##### end files_getattr_home_dir(automount_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(automount_t) depth: 1
 	
	
	


	allow automount_t etc_t:dir { read getattr lock search ioctl };
	allow automount_t etc_t:file { read getattr lock ioctl };
	allow automount_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(automount_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(automount_t) depth: 1
 	
	
	


	allow automount_t etc_t:dir { read getattr lock search ioctl };
	allow automount_t etc_runtime_t:file { read getattr lock ioctl };
	allow automount_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(automount_t) depth: 0
 	
# for if the mount point is not labelled
 	 	 	 	
##### begin files_getattr_isid_type_dirs(automount_t) depth: 1
 	
	
	


	allow automount_t file_t:dir getattr;

	 	 	 	
##### end files_getattr_isid_type_dirs(automount_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_default_dirs(automount_t) depth: 1
 	
	
	


	allow automount_t default_t:dir getattr;

	 	 	 	
##### end files_getattr_default_dirs(automount_t) depth: 0
 	
# because config files can be shell scripts
 	 	 	 	
##### begin files_exec_etc_files(automount_t) depth: 1
 	
	
	


	allow automount_t etc_t:dir { read getattr lock search ioctl };
	allow automount_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow automount_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(automount_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(automount_t) depth: 1
 	
	
	


	allow automount_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(automount_t) depth: 0
 	
 	 	 	 	
##### begin fs_getattr_all_dirs(automount_t) depth: 1
 	
	
	


	allow automount_t filesystem_type:dir getattr;

	 	 	 	
##### end fs_getattr_all_dirs(automount_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(automount_t) depth: 1
 	
	
	


	allow automount_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(automount_t) depth: 0
 	
 	 	 	 	
##### begin fs_manage_auto_mountpoints(automount_t) depth: 1
 	
	
	


	allow automount_t autofs_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };

	 	 	 	
##### end fs_manage_auto_mountpoints(automount_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(automount_t) depth: 1
 	
	
	


	dontaudit automount_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(automount_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_getattr_pty_dirs(automount_t) depth: 1
 	
	
	


	dontaudit automount_t devpts_t:dir getattr;

	 	 	 	
##### end term_dontaudit_getattr_pty_dirs(automount_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(automount_t) depth: 1
 	
	
	


	allow automount_t init_t:fd use;

	 	 	 	
##### end init_use_fds(automount_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(automount_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(automount_t) depth: 2
 	
	allow automount_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(automount_t) depth: 1
 	
	allow automount_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(automount_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(automount_t) depth: 2
 	
	
	


	allow automount_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(automount_t) depth: 1
 	
	allow automount_t lib_t:dir { read getattr lock search ioctl };
	allow automount_t lib_t:lnk_file { read getattr lock ioctl };
	allow automount_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow automount_t ld_so_t:file { read getattr lock execute ioctl };
	allow automount_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(automount_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(automount_t) depth: 2
 	
	
	


	allow automount_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(automount_t) depth: 1
 	
	allow automount_t lib_t:dir { read getattr lock search ioctl };
	allow automount_t lib_t:lnk_file { read getattr lock ioctl };
	allow automount_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow automount_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow automount_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(automount_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(automount_t) depth: 1
 	
	
	


	allow automount_t devlog_t:lnk_file read;
	allow automount_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow automount_t syslogd_t:unix_dgram_socket sendto;
	allow automount_t syslogd_t:unix_stream_socket connectto;
	allow automount_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow automount_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(automount_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(automount_t) depth: 2
 	
	allow automount_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(automount_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(automount_t) depth: 0
 	
 	 	 	 	
##### begin logging_search_logs(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(automount_t) depth: 2
 	
	
	


	allow automount_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(automount_t) depth: 1
 	
	allow automount_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(automount_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(automount_t) depth: 2
 	
	
	


	allow automount_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(automount_t) depth: 1
 	
	# FIXME: automount_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(automount_t) depth: 2
 	
	
	


	allow automount_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(automount_t) depth: 1
 	
	allow automount_t locale_t:dir { read getattr lock search ioctl };
	allow automount_t locale_t:lnk_file { read getattr lock ioctl };
	allow automount_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(automount_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(automount_t) depth: 3
 	
	
	


	allow automount_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(automount_t) depth: 2
 	
	allow automount_t lib_t:dir { read getattr lock search ioctl };
	allow automount_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(automount_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(automount_t) depth: 0
 	

# Run mount in the mount_t domain.
 	 	 	 	
##### begin mount_domtrans(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(automount_t,mount_exec_t,mount_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(automount_t,mount_exec_t,mount_t) depth: 3
 	
	allow automount_t mount_exec_t:file { getattr read execute };
	allow automount_t mount_t:process transition;
	dontaudit automount_t mount_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(automount_t,mount_exec_t,mount_t) depth: 2
 	
	type_transition automount_t mount_exec_t:process mount_t;
 	 	 	 	
##### end domain_auto_trans(automount_t,mount_exec_t,mount_t) depth: 1
 	

	allow automount_t mount_t:fd use;
	allow mount_t automount_t:fd use;
	allow mount_t automount_t:fifo_file { getattr read write append ioctl lock };
	allow mount_t automount_t:process sigchld;

	 	 	 	
##### end mount_domtrans(automount_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_dns_name_resolve(automount_t) depth: 1
 	
	
	


	allow automount_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow automount_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(automount_t) depth: 2
 	
	
	


	allow automount_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(automount_t) depth: 3
 	
	
	


	allow automount_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(automount_t) depth: 3
 	
	
	


	allow automount_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(automount_t) depth: 3
 	
	
	


	allow automount_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow automount_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(automount_t) depth: 3
 	
	
	


	allow automount_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(automount_t) depth: 2
 	
	
	


	allow automount_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(automount_t) depth: 3
 	
	
	


	allow automount_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(automount_t) depth: 3
 	
	
	


	allow automount_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(automount_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(automount_t) depth: 3
 	
	
	


	allow automount_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(automount_t) depth: 2
 	
	
	


	allow automount_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(automount_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(automount_t) depth: 2
 	
	
	


	allow automount_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(automount_t) depth: 1
 	
	allow automount_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(automount_t) depth: 0
 	
 	 	 	 	
##### begin sysnet_use_ldap(automount_t) depth: 1
 	
	
	
		

	allow automount_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(automount_t) depth: 2
 	
	
	


	allow automount_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(automount_t) depth: 3
 	
	
	


	allow automount_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow automount_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(automount_t) depth: 3
 	
	
	


	allow automount_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(automount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(automount_t) depth: 3
 	
	
	


	allow automount_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(automount_t) depth: 2
 	
	
	


	allow automount_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(automount_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(automount_t) depth: 3
 	
	
	


	allow automount_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(automount_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(automount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(automount_t) depth: 2
 	
	
	


	allow automount_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(automount_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(automount_t) depth: 2
 	
	
	


	allow automount_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(automount_t) depth: 1
 	
	allow automount_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(automount_t) depth: 0
 	
 	 	 	 	
##### begin sysnet_read_config(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(automount_t) depth: 2
 	
	
	


	allow automount_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(automount_t) depth: 1
 	
	allow automount_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(automount_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(automount_t) depth: 1
 	
	
	


	dontaudit automount_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(automount_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(automount_t) depth: 1
 	
	
		
	


		dontaudit automount_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(automount_t) depth: 0
 	


	 	 	 	 	
##### begin files_dontaudit_read_root_files(automount_t) depth: 1
 	
	
	


	dontaudit automount_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(automount_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(automount_t) depth: 1
 	
	
	


	dontaudit automount_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(automount_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(automount_t) depth: 1
 	
	
	


	dontaudit automount_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(automount_t) depth: 0
 	



	
		
	



	
		
	 	 	 	 	
##### begin bind_search_cache(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(automount_t) depth: 2
 	
	
	


	allow automount_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(automount_t) depth: 1
 	
	allow automount_t named_conf_t:dir { getattr search };
	allow automount_t named_zone_t:dir { getattr search };
	allow automount_t named_cache_t:dir { getattr search };

	 	 	 	
##### end bind_search_cache(automount_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin fstools_domtrans(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(automount_t) depth: 2
 	
	
	


	allow automount_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(automount_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(automount_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(automount_t,fsadm_exec_t,fsadm_t) depth: 3
 	
	allow automount_t fsadm_exec_t:file { getattr read execute };
	allow automount_t fsadm_t:process transition;
	dontaudit automount_t fsadm_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(automount_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	type_transition automount_t fsadm_exec_t:process fsadm_t;
 	 	 	 	
##### end domain_auto_trans(automount_t,fsadm_exec_t,fsadm_t) depth: 1
 	

	allow automount_t fsadm_t:fd use;
	allow fsadm_t automount_t:fd use;
	allow fsadm_t automount_t:fifo_file { getattr read write append ioctl lock };
	allow fsadm_t automount_t:process sigchld;

	 	 	 	
##### end fstools_domtrans(automount_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(automount_t) depth: 1
 	
	
	


	allow automount_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(automount_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(automount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(automount_t) depth: 2
 	
	
	


	allow automount_t device_t:dir { read getattr lock search ioctl };
	allow automount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(automount_t) depth: 1
 	
	allow automount_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(automount_t) depth: 0
 	

	



	


########################################
#
# Declarations
#

# for DNSSEC key files
 	 	 	 	
##### begin files_security_file(dnssec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(dnssec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(dnssec_t) depth: 3
 	
	
	


	allow dnssec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dnssec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dnssec_t) depth: 3
 	
	
	


	allow dnssec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dnssec_t) depth: 2
 	
	typeattribute dnssec_t file_type;

	 	 	 	
##### end files_type(dnssec_t) depth: 1
 	
	typeattribute dnssec_t security_file_type;

	 	 	 	
##### end files_security_file(dnssec_t) depth: 0
 	

 	 	 	 	
##### begin init_daemon_domain(named_t,named_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(named_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(named_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute named_t domain;

	# allow the domain to read its /proc/pid entries
	allow named_t self:dir { read getattr lock search ioctl };
	allow named_t self:lnk_file { read getattr lock ioctl };
	allow named_t self:file { getattr read write append ioctl lock };

	# allow named_t to create child processes in this domain
	allow named_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types named_t;
		role sysadm_r types named_t;
		role user_r types named_t;
		role staff_r types named_t;
	

	 	 	 	
##### end domain_base_type(named_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(named_t) depth: 3
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(named_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(named_t) depth: 3
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(named_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(named_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(named_t) depth: 4
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(named_t) depth: 3
 	
	allow named_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(named_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(named_t) depth: 3
 	
	
	


	allow named_t root_t:dir { read getattr lock search ioctl };
	allow named_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(named_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(named_t) depth: 3
 	
	
	


	allow named_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(named_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(named_t) depth: 3
 	
	
	


	allow named_t init_t:process signull;

	 	 	 	
##### end init_signull(named_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(named_t) depth: 3
 	
	
	


	allow named_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(named_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(named_t) depth: 3
 	
	
	


	allow named_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(named_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(named_t) depth: 3
 	
	
	


	dontaudit named_t security_t:dir search;
	dontaudit named_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(named_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(named_t) depth: 3
 	
	
	


	dontaudit named_t selinux_config_t:dir search;
	dontaudit named_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(named_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(named_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(named_t,named_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(named_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_exec_t) depth: 4
 	
	
	


	allow named_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_exec_t) depth: 4
 	
	
	


	allow named_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_exec_t) depth: 3
 	
	typeattribute named_exec_t file_type;

	 	 	 	
##### end files_type(named_exec_t) depth: 2
 	

	allow named_t named_exec_t:file entrypoint;
	allow named_t named_exec_t:file { read getattr lock execute ioctl };

	typeattribute named_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(named_t,named_exec_t) depth: 1
 	

	role system_r types named_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool named_disable_trans false;
			
		
		if(named_disable_trans ) {
			
	
	


	allow initrc_t named_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init named_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,named_exec_t,named_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,named_exec_t,named_t) depth: 3
 	
	allow initrc_t named_exec_t:file { getattr read execute };
	allow initrc_t named_t:process transition;
	dontaudit initrc_t named_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,named_exec_t,named_t) depth: 2
 	
	type_transition initrc_t named_exec_t:process named_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,named_exec_t,named_t) depth: 1
 	
			allow initrc_t named_t:fd use;
			allow named_t initrc_t:fd use;
			allow named_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow named_t initrc_t:process sigchld;
			allow initrc_t named_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow named_t named_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(named_t,named_exec_t) depth: 0
 	
role system_r types named_t;

 	 	 	 	
##### begin init_system_domain(named_t,named_checkconf_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(named_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(named_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute named_t domain;

	# allow the domain to read its /proc/pid entries
	allow named_t self:dir { read getattr lock search ioctl };
	allow named_t self:lnk_file { read getattr lock ioctl };
	allow named_t self:file { getattr read write append ioctl lock };

	# allow named_t to create child processes in this domain
	allow named_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types named_t;
		role sysadm_r types named_t;
		role user_r types named_t;
		role staff_r types named_t;
	

	 	 	 	
##### end domain_base_type(named_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(named_t) depth: 3
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(named_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(named_t) depth: 3
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(named_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(named_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(named_t) depth: 4
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(named_t) depth: 3
 	
	allow named_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(named_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(named_t) depth: 3
 	
	
	


	allow named_t root_t:dir { read getattr lock search ioctl };
	allow named_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(named_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(named_t) depth: 3
 	
	
	


	allow named_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(named_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(named_t) depth: 3
 	
	
	


	allow named_t init_t:process signull;

	 	 	 	
##### end init_signull(named_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(named_t) depth: 3
 	
	
	


	allow named_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(named_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(named_t) depth: 3
 	
	
	


	allow named_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(named_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(named_t) depth: 3
 	
	
	


	dontaudit named_t security_t:dir search;
	dontaudit named_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(named_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(named_t) depth: 3
 	
	
	


	dontaudit named_t selinux_config_t:dir search;
	dontaudit named_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(named_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(named_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(named_t,named_checkconf_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(named_checkconf_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_checkconf_exec_t) depth: 4
 	
	
	


	allow named_checkconf_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_checkconf_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_checkconf_exec_t) depth: 4
 	
	
	


	allow named_checkconf_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_checkconf_exec_t) depth: 3
 	
	typeattribute named_checkconf_exec_t file_type;

	 	 	 	
##### end files_type(named_checkconf_exec_t) depth: 2
 	

	allow named_t named_checkconf_exec_t:file entrypoint;
	allow named_t named_checkconf_exec_t:file { read getattr lock execute ioctl };

	typeattribute named_checkconf_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(named_t,named_checkconf_exec_t) depth: 1
 	

	role system_r types named_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,named_checkconf_exec_t,named_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,named_checkconf_exec_t,named_t) depth: 3
 	
	allow initrc_t named_checkconf_exec_t:file { getattr read execute };
	allow initrc_t named_t:process transition;
	dontaudit initrc_t named_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,named_checkconf_exec_t,named_t) depth: 2
 	
	type_transition initrc_t named_checkconf_exec_t:process named_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,named_checkconf_exec_t,named_t) depth: 1
 	

	allow initrc_t named_t:fd use;
	allow named_t initrc_t:fd use;
	allow named_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow named_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(named_t,named_checkconf_exec_t) depth: 0
 	

# A type for configuration files of named.
 	 	 	 	
##### begin files_type(named_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_conf_t) depth: 2
 	
	
	


	allow named_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_conf_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_conf_t) depth: 2
 	
	
	


	allow named_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_conf_t) depth: 1
 	
	typeattribute named_conf_t file_type;

	 	 	 	
##### end files_type(named_conf_t) depth: 0
 	
 	 	 	 	
##### begin files_mountpoint(named_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(named_conf_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_conf_t) depth: 3
 	
	
	


	allow named_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_conf_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_conf_t) depth: 3
 	
	
	


	allow named_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_conf_t) depth: 2
 	
	typeattribute named_conf_t file_type;

	 	 	 	
##### end files_type(named_conf_t) depth: 1
 	
	typeattribute named_conf_t mountpoint;

	 	 	 	
##### end files_mountpoint(named_conf_t) depth: 0
 	

# for secondary zone files
 	 	 	 	
##### begin files_type(named_cache_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_cache_t) depth: 2
 	
	
	


	allow named_cache_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_cache_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_cache_t) depth: 2
 	
	
	


	allow named_cache_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_cache_t) depth: 1
 	
	typeattribute named_cache_t file_type;

	 	 	 	
##### end files_type(named_cache_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(named_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(named_log_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_log_t) depth: 3
 	
	
	


	allow named_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_log_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_log_t) depth: 3
 	
	
	


	allow named_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_log_t) depth: 2
 	
	typeattribute named_log_t file_type;

	 	 	 	
##### end files_type(named_log_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(named_log_t) depth: 2
 	
	
	


	allow named_log_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(named_log_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(named_log_t) depth: 2
 	
	
	


	allow named_log_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(named_log_t) depth: 1
 	
	typeattribute named_log_t logfile;

	 	 	 	
##### end logging_log_file(named_log_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(named_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(named_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_tmp_t) depth: 3
 	
	
	


	allow named_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_tmp_t) depth: 3
 	
	
	


	allow named_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_tmp_t) depth: 2
 	
	typeattribute named_tmp_t file_type;

	 	 	 	
##### end files_type(named_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(named_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(named_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_tmp_t) depth: 4
 	
	
	


	allow named_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_tmp_t) depth: 4
 	
	
	


	allow named_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_tmp_t) depth: 3
 	
	typeattribute named_tmp_t file_type;

	 	 	 	
##### end files_type(named_tmp_t) depth: 2
 	
	typeattribute named_tmp_t polymember;

	 	 	 	
##### end files_poly_member(named_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(named_tmp_t) depth: 2
 	
	
	


	allow named_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(named_tmp_t) depth: 1
 	
	typeattribute named_tmp_t tmpfile;
	allow named_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(named_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(named_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(named_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_var_run_t) depth: 3
 	
	
	


	allow named_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_var_run_t) depth: 3
 	
	
	


	allow named_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_var_run_t) depth: 2
 	
	typeattribute named_var_run_t file_type;

	 	 	 	
##### end files_type(named_var_run_t) depth: 1
 	
	typeattribute named_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(named_var_run_t) depth: 0
 	

# for primary zone files
 	 	 	 	
##### begin files_type(named_zone_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(named_zone_t) depth: 2
 	
	
	


	allow named_zone_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(named_zone_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(named_zone_t) depth: 2
 	
	
	


	allow named_zone_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(named_zone_t) depth: 1
 	
	typeattribute named_zone_t file_type;

	 	 	 	
##### end files_type(named_zone_t) depth: 0
 	

 	 	 	 	
##### begin init_system_domain(ndc_t,ndc_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(ndc_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(ndc_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute ndc_t domain;

	# allow the domain to read its /proc/pid entries
	allow ndc_t self:dir { read getattr lock search ioctl };
	allow ndc_t self:lnk_file { read getattr lock ioctl };
	allow ndc_t self:file { getattr read write append ioctl lock };

	# allow ndc_t to create child processes in this domain
	allow ndc_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types ndc_t;
		role sysadm_r types ndc_t;
		role user_r types ndc_t;
		role staff_r types ndc_t;
	

	 	 	 	
##### end domain_base_type(ndc_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(ndc_t) depth: 3
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(ndc_t) depth: 3
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(ndc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ndc_t) depth: 4
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ndc_t) depth: 3
 	
	allow ndc_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(ndc_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(ndc_t) depth: 3
 	
	
	


	allow ndc_t root_t:dir { read getattr lock search ioctl };
	allow ndc_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(ndc_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(ndc_t) depth: 3
 	
	
	


	allow ndc_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(ndc_t) depth: 3
 	
	
	


	allow ndc_t init_t:process signull;

	 	 	 	
##### end init_signull(ndc_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(ndc_t) depth: 3
 	
	
	


	allow ndc_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(ndc_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(ndc_t) depth: 3
 	
	
	


	allow ndc_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(ndc_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(ndc_t) depth: 3
 	
	
	


	dontaudit ndc_t security_t:dir search;
	dontaudit ndc_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(ndc_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(ndc_t) depth: 3
 	
	
	


	dontaudit ndc_t selinux_config_t:dir search;
	dontaudit ndc_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(ndc_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(ndc_t,ndc_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(ndc_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(ndc_exec_t) depth: 4
 	
	
	


	allow ndc_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ndc_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ndc_exec_t) depth: 4
 	
	
	


	allow ndc_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ndc_exec_t) depth: 3
 	
	typeattribute ndc_exec_t file_type;

	 	 	 	
##### end files_type(ndc_exec_t) depth: 2
 	

	allow ndc_t ndc_exec_t:file entrypoint;
	allow ndc_t ndc_exec_t:file { read getattr lock execute ioctl };

	typeattribute ndc_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(ndc_t,ndc_exec_t) depth: 1
 	

	role system_r types ndc_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,ndc_exec_t,ndc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,ndc_exec_t,ndc_t) depth: 3
 	
	allow initrc_t ndc_exec_t:file { getattr read execute };
	allow initrc_t ndc_t:process transition;
	dontaudit initrc_t ndc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,ndc_exec_t,ndc_t) depth: 2
 	
	type_transition initrc_t ndc_exec_t:process ndc_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,ndc_exec_t,ndc_t) depth: 1
 	

	allow initrc_t ndc_t:fd use;
	allow ndc_t initrc_t:fd use;
	allow ndc_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow ndc_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(ndc_t,ndc_exec_t) depth: 0
 	
role system_r types ndc_t;

########################################
#
# Named local policy
#

allow named_t self:capability { chown dac_override fowner setgid setuid sys_chroot sys_nice sys_resource };
dontaudit named_t self:capability sys_tty_config;
allow named_t self:process { setsched setcap setrlimit { sigchld sigkill sigstop signull signal } };
allow named_t self:fifo_file { getattr read write append ioctl lock };
allow named_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow named_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow named_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow named_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow named_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };

allow named_t dnssec_t:file { getattr read };

# read configuration
allow named_t named_conf_t:dir { read getattr lock search ioctl };
allow named_t named_conf_t:file { read getattr lock ioctl };
allow named_t named_conf_t:lnk_file { read getattr lock ioctl };

# write cache for secondary zones
allow named_t named_cache_t:dir { read getattr lock search ioctl add_name remove_name write };
allow named_t named_cache_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow named_t named_cache_t:lnk_file { create read getattr setattr link unlink rename };


	
	


	allow named_t named_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow named_t named_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow named_t named_log_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin logging_log_filetrans(named_t,named_log_t,{ file dir }) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(named_t) depth: 2
 	
	
	


	allow named_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(named_t) depth: 1
 	
	allow named_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition named_t var_log_t:{ file dir } named_log_t;

	 	 	 	
##### end logging_log_filetrans(named_t,named_log_t,{ file dir }) depth: 0
 	

allow named_t named_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow named_t named_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(named_t,named_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow named_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition named_t tmp_t:{ file dir } named_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(named_t,named_tmp_t,{ file dir }) depth: 0
 	

allow named_t named_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
allow named_t named_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow named_t named_var_run_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_pid_filetrans(named_t,named_var_run_t,{ file sock_file }) depth: 1
 	
	
	


	allow named_t var_t:dir { getattr search };
	allow named_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition named_t var_run_t:{ file sock_file } named_var_run_t;

	 	 	 	
##### end files_pid_filetrans(named_t,named_var_run_t,{ file sock_file }) depth: 0
 	

# read zone files
allow named_t named_zone_t:dir { read getattr lock search ioctl };
allow named_t named_zone_t:file { read getattr lock ioctl };
allow named_t named_zone_t:lnk_file { read getattr lock ioctl };

allow named_t ndc_t:tcp_socket { acceptfrom recvfrom };

 	 	 	 	
##### begin kernel_read_kernel_sysctls(named_t) depth: 1
 	
	
	


	allow named_t proc_t:dir search;
	allow named_t sysctl_t:dir { read getattr lock search ioctl };
	allow named_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow named_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(named_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(named_t) depth: 1
 	
	
	


	allow named_t proc_t:dir { read getattr lock search ioctl };
	allow named_t proc_t:lnk_file { getattr read };
	allow named_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(named_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(named_t) depth: 1
 	
	
	


	allow named_t proc_t:dir search;
	allow named_t proc_net_t:dir { read getattr lock search ioctl };
	allow named_t proc_net_t:file { read getattr lock ioctl };
	allow named_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(named_t) depth: 0
 	
 	 	 	 	
##### begin kernel_tcp_recvfrom(named_t) depth: 1
 	
	
	


	allow named_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(named_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(named_t) depth: 1
 	
	
	


	allow named_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(named_t) depth: 2
 	
	
	


	allow named_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow named_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(named_t) depth: 2
 	
	
	


	allow named_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(named_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(named_t) depth: 2
 	
	
	


	allow named_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(named_t) depth: 2
 	
	
	


	allow named_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(named_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(named_t) depth: 1
 	
	
	


	allow named_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(named_t) depth: 2
 	
	
	


	allow named_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(named_t) depth: 2
 	
	
	


	allow named_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(named_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(named_t) depth: 2
 	
	
	


	allow named_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(named_t) depth: 2
 	
	
	


	allow named_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(named_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(named_t) depth: 1
 	
	
	


	allow named_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(named_t) depth: 2
 	
	
	


	allow named_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(named_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(named_t) depth: 2
 	
	
	


	allow named_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(named_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(named_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(named_t) depth: 2
 	
	
	


	allow named_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(named_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(named_t) depth: 1
 	
	
	


	allow named_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(named_t) depth: 1
 	
	
	


	allow named_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_dns_port(named_t) depth: 1
 	
	
	


	allow named_t dns_port_t:tcp_socket name_bind;
	allow named_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_dns_port(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_dns_port(named_t) depth: 1
 	
	
	


	allow named_t dns_port_t:udp_socket name_bind;
	allow named_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_dns_port(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_rndc_port(named_t) depth: 1
 	
	
	


	allow named_t rndc_port_t:tcp_socket name_bind;
	allow named_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_rndc_port(named_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(named_t) depth: 1
 	
	
	


	allow named_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(named_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(named_t) depth: 1
 	
	
	


	allow named_t sysfs_t:dir { read getattr lock search ioctl };
	allow named_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(named_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_rand(named_t) depth: 1
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(named_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(named_t) depth: 1
 	
	
	


	allow named_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(named_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(named_t) depth: 1
 	
	
	


	allow named_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(named_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(named_t) depth: 1
 	
	
	


	dontaudit named_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(named_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_search_sbin(named_t) depth: 1
 	
	
	


	allow named_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(named_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(named_t) depth: 1
 	
	
	


	allow named_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(named_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(named_t) depth: 1
 	
	
	


	allow named_t etc_t:dir { read getattr lock search ioctl };
	allow named_t etc_t:file { read getattr lock ioctl };
	allow named_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(named_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(named_t) depth: 1
 	
	
	


	allow named_t etc_t:dir { read getattr lock search ioctl };
	allow named_t etc_runtime_t:file { read getattr lock ioctl };
	allow named_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(named_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(named_t) depth: 1
 	
	
	


	allow named_t init_t:fd use;

	 	 	 	
##### end init_use_fds(named_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(named_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(named_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(named_t) depth: 3
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(named_t) depth: 2
 	
	allow named_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(named_t) depth: 1
 	
	allow named_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(named_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(named_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(named_t) depth: 2
 	
	
	


	allow named_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(named_t) depth: 1
 	
	allow named_t lib_t:dir { read getattr lock search ioctl };
	allow named_t lib_t:lnk_file { read getattr lock ioctl };
	allow named_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow named_t ld_so_t:file { read getattr lock execute ioctl };
	allow named_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(named_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(named_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(named_t) depth: 2
 	
	
	


	allow named_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(named_t) depth: 1
 	
	allow named_t lib_t:dir { read getattr lock search ioctl };
	allow named_t lib_t:lnk_file { read getattr lock ioctl };
	allow named_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow named_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow named_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(named_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(named_t) depth: 1
 	
	
	


	allow named_t devlog_t:lnk_file read;
	allow named_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow named_t syslogd_t:unix_dgram_socket sendto;
	allow named_t syslogd_t:unix_stream_socket connectto;
	allow named_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow named_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(named_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(named_t) depth: 3
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(named_t) depth: 2
 	
	allow named_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(named_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(named_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(named_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(named_t) depth: 2
 	
	
	


	allow named_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(named_t) depth: 1
 	
	# FIXME: named_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(named_t) depth: 2
 	
	
	


	allow named_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(named_t) depth: 1
 	
	allow named_t locale_t:dir { read getattr lock search ioctl };
	allow named_t locale_t:lnk_file { read getattr lock ioctl };
	allow named_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(named_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(named_t) depth: 3
 	
	
	


	allow named_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(named_t) depth: 2
 	
	allow named_t lib_t:dir { read getattr lock search ioctl };
	allow named_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(named_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(named_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(named_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(named_t) depth: 2
 	
	
	


	allow named_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(named_t) depth: 1
 	
	allow named_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(named_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(named_t) depth: 1
 	
	
	


	dontaudit named_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(named_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(named_t) depth: 1
 	
	
		
	


		dontaudit named_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(named_t) depth: 0
 	


	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(named_t) depth: 1
 	
	
	


	dontaudit named_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(named_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(named_t) depth: 1
 	
	
	


	dontaudit named_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(named_t) depth: 0
 	
	 	 	 	 	
##### begin files_dontaudit_read_root_files(named_t) depth: 1
 	
	
	


	dontaudit named_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(named_t) depth: 0
 	



	
		if (named_write_master_zones) {
			
	allow named_t named_zone_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow named_t named_zone_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow named_t named_zone_t:lnk_file { create read getattr setattr link unlink rename };

		
		}
	



	
		
	



	
		
	 	 	 	 	
##### begin mount_send_nfs_client_request(named_t) depth: 1
 	
	
	


	allow named_t mount_t:udp_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end mount_send_nfs_client_request(named_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(named_t) depth: 1
 	
	
	


	allow named_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(named_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(named_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(named_t) depth: 2
 	
	
	


	allow named_t device_t:dir { read getattr lock search ioctl };
	allow named_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(named_t) depth: 1
 	
	allow named_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(named_t) depth: 0
 	

	




########################################
#
# NDC local policy
#

# cjp: why net_admin?!
allow ndc_t self:capability { dac_override net_admin };
allow ndc_t self:process { fork { sigchld sigkill sigstop signull signal } };
allow ndc_t self:fifo_file { read write getattr ioctl };
allow ndc_t self:unix_stream_socket { connect { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept } };
allow ndc_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow ndc_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };

allow ndc_t dnssec_t:file { getattr read };

allow ndc_t named_t:tcp_socket { connectto recvfrom };
allow ndc_t named_t:unix_stream_socket connectto;

allow ndc_t named_conf_t:file { getattr read };

allow ndc_t named_var_run_t:sock_file { getattr read write append ioctl lock };

allow ndc_t named_zone_t:dir search;

 	 	 	 	
##### begin kernel_read_kernel_sysctls(ndc_t) depth: 1
 	
	
	


	allow ndc_t proc_t:dir search;
	allow ndc_t sysctl_t:dir { read getattr lock search ioctl };
	allow ndc_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow ndc_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(ndc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_tcp_recvfrom(ndc_t) depth: 1
 	
	
	


	allow ndc_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(ndc_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(ndc_t) depth: 1
 	
	
	


	allow ndc_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(ndc_t) depth: 2
 	
	
	


	allow ndc_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow ndc_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(ndc_t) depth: 2
 	
	
	


	allow ndc_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(ndc_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(ndc_t) depth: 1
 	
	
	


	allow ndc_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(ndc_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(ndc_t) depth: 1
 	
	
	


	allow ndc_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(ndc_t) depth: 2
 	
	
	


	allow ndc_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(ndc_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(ndc_t) depth: 1
 	
	
	


	allow ndc_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(ndc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_rndc_port(ndc_t) depth: 1
 	
	
	


	allow ndc_t rndc_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_rndc_port(ndc_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(ndc_t) depth: 1
 	
	
	


	allow ndc_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(ndc_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(ndc_t) depth: 1
 	
	
	


	allow ndc_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(ndc_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(ndc_t) depth: 1
 	
	
	


	allow ndc_t etc_t:dir { read getattr lock search ioctl };
	allow ndc_t etc_t:file { read getattr lock ioctl };
	allow ndc_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(ndc_t) depth: 0
 	
 	 	 	 	
##### begin files_search_pids(ndc_t) depth: 1
 	
	
	


	allow ndc_t var_t:dir { getattr search };
	allow ndc_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(ndc_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(ndc_t) depth: 1
 	
	
	


	allow ndc_t init_t:fd use;

	 	 	 	
##### end init_use_fds(ndc_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(ndc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ndc_t) depth: 3
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ndc_t) depth: 2
 	
	allow ndc_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(ndc_t) depth: 1
 	
	allow ndc_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(ndc_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(ndc_t) depth: 2
 	
	
	


	allow ndc_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(ndc_t) depth: 1
 	
	allow ndc_t lib_t:dir { read getattr lock search ioctl };
	allow ndc_t lib_t:lnk_file { read getattr lock ioctl };
	allow ndc_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow ndc_t ld_so_t:file { read getattr lock execute ioctl };
	allow ndc_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(ndc_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(ndc_t) depth: 2
 	
	
	


	allow ndc_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(ndc_t) depth: 1
 	
	allow ndc_t lib_t:dir { read getattr lock search ioctl };
	allow ndc_t lib_t:lnk_file { read getattr lock ioctl };
	allow ndc_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow ndc_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow ndc_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(ndc_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(ndc_t) depth: 1
 	
	
	


	allow ndc_t devlog_t:lnk_file read;
	allow ndc_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow ndc_t syslogd_t:unix_dgram_socket sendto;
	allow ndc_t syslogd_t:unix_stream_socket connectto;
	allow ndc_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow ndc_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(ndc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ndc_t) depth: 3
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ndc_t) depth: 2
 	
	allow ndc_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(ndc_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(ndc_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(ndc_t) depth: 2
 	
	
	


	allow ndc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(ndc_t) depth: 1
 	
	# FIXME: ndc_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(ndc_t) depth: 2
 	
	
	


	allow ndc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(ndc_t) depth: 1
 	
	allow ndc_t locale_t:dir { read getattr lock search ioctl };
	allow ndc_t locale_t:lnk_file { read getattr lock ioctl };
	allow ndc_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(ndc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(ndc_t) depth: 3
 	
	
	


	allow ndc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(ndc_t) depth: 2
 	
	allow ndc_t lib_t:dir { read getattr lock search ioctl };
	allow ndc_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(ndc_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(ndc_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(ndc_t) depth: 2
 	
	
	


	allow ndc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(ndc_t) depth: 1
 	
	allow ndc_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(ndc_t) depth: 0
 	
 	 	 	 	
##### begin sysnet_dns_name_resolve(ndc_t) depth: 1
 	
	
	


	allow ndc_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow ndc_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(ndc_t) depth: 2
 	
	
	


	allow ndc_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(ndc_t) depth: 3
 	
	
	


	allow ndc_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(ndc_t) depth: 3
 	
	
	


	allow ndc_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(ndc_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(ndc_t) depth: 3
 	
	
	


	allow ndc_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow ndc_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(ndc_t) depth: 3
 	
	
	


	allow ndc_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(ndc_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(ndc_t) depth: 3
 	
	
	


	allow ndc_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(ndc_t) depth: 3
 	
	
	


	allow ndc_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(ndc_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(ndc_t) depth: 3
 	
	
	


	allow ndc_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(ndc_t) depth: 3
 	
	
	


	allow ndc_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(ndc_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(ndc_t) depth: 2
 	
	
	


	allow ndc_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(ndc_t) depth: 3
 	
	
	


	allow ndc_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(ndc_t) depth: 3
 	
	
	


	allow ndc_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(ndc_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(ndc_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(ndc_t) depth: 3
 	
	
	


	allow ndc_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(ndc_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(ndc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(ndc_t) depth: 2
 	
	
	


	allow ndc_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(ndc_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(ndc_t) depth: 2
 	
	
	


	allow ndc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(ndc_t) depth: 1
 	
	allow ndc_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(ndc_t) depth: 0
 	

# for /etc/rndc.key



	 	 	 	 	
##### begin kernel_dontaudit_read_unlabeled_files(ndc_t) depth: 1
 	
	
	


	dontaudit ndc_t unlabeled_t:file { getattr read };

	 	 	 	
##### end kernel_dontaudit_read_unlabeled_files(ndc_t) depth: 0
 	

	 	 	 	 	
##### begin term_use_unallocated_ttys(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ndc_t) depth: 1
 	
	allow ndc_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(ndc_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_generic_ptys(ndc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ndc_t) depth: 2
 	
	
	


	allow ndc_t device_t:dir { read getattr lock search ioctl };
	allow ndc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ndc_t) depth: 1
 	
	allow ndc_t devpts_t:dir { getattr search read lock ioctl };
	allow ndc_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(ndc_t) depth: 0
 	



	
		
	



	
		
	



	
		
	



	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin files_type(anacron_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(anacron_exec_t) depth: 2
 	
	
	


	allow anacron_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(anacron_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(anacron_exec_t) depth: 2
 	
	
	


	allow anacron_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(anacron_exec_t) depth: 1
 	
	typeattribute anacron_exec_t file_type;

	 	 	 	
##### end files_type(anacron_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(cron_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(cron_spool_t) depth: 2
 	
	
	


	allow cron_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(cron_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(cron_spool_t) depth: 2
 	
	
	


	allow cron_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(cron_spool_t) depth: 1
 	
	typeattribute cron_spool_t file_type;

	 	 	 	
##### end files_type(cron_spool_t) depth: 0
 	

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin init_daemon_domain(crond_t,crond_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(crond_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(crond_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute crond_t domain;

	# allow the domain to read its /proc/pid entries
	allow crond_t self:dir { read getattr lock search ioctl };
	allow crond_t self:lnk_file { read getattr lock ioctl };
	allow crond_t self:file { getattr read write append ioctl lock };

	# allow crond_t to create child processes in this domain
	allow crond_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types crond_t;
		role sysadm_r types crond_t;
		role user_r types crond_t;
		role staff_r types crond_t;
	

	 	 	 	
##### end domain_base_type(crond_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(crond_t) depth: 3
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(crond_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(crond_t) depth: 3
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(crond_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(crond_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(crond_t) depth: 3
 	
	allow crond_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(crond_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(crond_t) depth: 3
 	
	
	


	allow crond_t root_t:dir { read getattr lock search ioctl };
	allow crond_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(crond_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(crond_t) depth: 3
 	
	
	


	allow crond_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(crond_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(crond_t) depth: 3
 	
	
	


	allow crond_t init_t:process signull;

	 	 	 	
##### end init_signull(crond_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(crond_t) depth: 3
 	
	
	


	allow crond_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(crond_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(crond_t) depth: 3
 	
	
	


	allow crond_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(crond_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(crond_t) depth: 3
 	
	
	


	dontaudit crond_t security_t:dir search;
	dontaudit crond_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(crond_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(crond_t) depth: 3
 	
	
	


	dontaudit crond_t selinux_config_t:dir search;
	dontaudit crond_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(crond_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(crond_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(crond_t,crond_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(crond_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(crond_exec_t) depth: 4
 	
	
	


	allow crond_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crond_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crond_exec_t) depth: 4
 	
	
	


	allow crond_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crond_exec_t) depth: 3
 	
	typeattribute crond_exec_t file_type;

	 	 	 	
##### end files_type(crond_exec_t) depth: 2
 	

	allow crond_t crond_exec_t:file entrypoint;
	allow crond_t crond_exec_t:file { read getattr lock execute ioctl };

	typeattribute crond_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(crond_t,crond_exec_t) depth: 1
 	

	role system_r types crond_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool crond_disable_trans false;
			
		
		if(crond_disable_trans ) {
			
	
	


	allow initrc_t crond_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init crond_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,crond_exec_t,crond_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,crond_exec_t,crond_t) depth: 3
 	
	allow initrc_t crond_exec_t:file { getattr read execute };
	allow initrc_t crond_t:process transition;
	dontaudit initrc_t crond_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,crond_exec_t,crond_t) depth: 2
 	
	type_transition initrc_t crond_exec_t:process crond_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,crond_exec_t,crond_t) depth: 1
 	
			allow initrc_t crond_t:fd use;
			allow crond_t initrc_t:fd use;
			allow crond_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow crond_t initrc_t:process sigchld;
			allow initrc_t crond_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow crond_t crond_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(crond_t,crond_exec_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(crond_t) depth: 1
 	
	
	


	typeattribute crond_t privfd;

	 	 	 	
##### end domain_interactive_fd(crond_t) depth: 0
 	
 	 	 	 	
##### begin domain_cron_exemption_source(crond_t) depth: 1
 	
	
	


	typeattribute crond_t cron_source_domain;

	 	 	 	
##### end domain_cron_exemption_source(crond_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(crond_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(crond_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(crond_tmp_t) depth: 3
 	
	
	


	allow crond_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crond_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crond_tmp_t) depth: 3
 	
	
	


	allow crond_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crond_tmp_t) depth: 2
 	
	typeattribute crond_tmp_t file_type;

	 	 	 	
##### end files_type(crond_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(crond_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(crond_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(crond_tmp_t) depth: 4
 	
	
	


	allow crond_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crond_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crond_tmp_t) depth: 4
 	
	
	


	allow crond_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crond_tmp_t) depth: 3
 	
	typeattribute crond_tmp_t file_type;

	 	 	 	
##### end files_type(crond_tmp_t) depth: 2
 	
	typeattribute crond_tmp_t polymember;

	 	 	 	
##### end files_poly_member(crond_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(crond_tmp_t) depth: 2
 	
	
	


	allow crond_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(crond_tmp_t) depth: 1
 	
	typeattribute crond_tmp_t tmpfile;
	allow crond_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(crond_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(crond_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(crond_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(crond_var_run_t) depth: 3
 	
	
	


	allow crond_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crond_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crond_var_run_t) depth: 3
 	
	
	


	allow crond_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crond_var_run_t) depth: 2
 	
	typeattribute crond_var_run_t file_type;

	 	 	 	
##### end files_type(crond_var_run_t) depth: 1
 	
	typeattribute crond_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(crond_var_run_t) depth: 0
 	

 	 	 	 	
##### begin files_type(crontab_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(crontab_exec_t) depth: 2
 	
	
	


	allow crontab_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crontab_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crontab_exec_t) depth: 2
 	
	
	


	allow crontab_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crontab_exec_t) depth: 1
 	
	typeattribute crontab_exec_t file_type;

	 	 	 	
##### end files_type(crontab_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(system_cron_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_cron_spool_t) depth: 2
 	
	
	


	allow system_cron_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_cron_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_cron_spool_t) depth: 2
 	
	
	


	allow system_cron_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_cron_spool_t) depth: 1
 	
	typeattribute system_cron_spool_t file_type;

	 	 	 	
##### end files_type(system_cron_spool_t) depth: 0
 	


	typealias crond_t alias system_crond_t;

 	 	 	 	
##### begin init_daemon_domain(system_crond_t,anacron_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(system_crond_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(system_crond_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute system_crond_t domain;

	# allow the domain to read its /proc/pid entries
	allow system_crond_t self:dir { read getattr lock search ioctl };
	allow system_crond_t self:lnk_file { read getattr lock ioctl };
	allow system_crond_t self:file { getattr read write append ioctl lock };

	# allow system_crond_t to create child processes in this domain
	allow system_crond_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types system_crond_t;
		role sysadm_r types system_crond_t;
		role user_r types system_crond_t;
		role staff_r types system_crond_t;
	

	 	 	 	
##### end domain_base_type(system_crond_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t device_t:dir { read getattr lock search ioctl };
	allow system_crond_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(system_crond_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t device_t:dir { read getattr lock search ioctl };
	allow system_crond_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(system_crond_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(system_crond_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_crond_t) depth: 4
 	
	
	


	allow system_crond_t device_t:dir { read getattr lock search ioctl };
	allow system_crond_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_crond_t) depth: 3
 	
	allow system_crond_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(system_crond_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t root_t:dir { read getattr lock search ioctl };
	allow system_crond_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(system_crond_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(system_crond_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t init_t:process signull;

	 	 	 	
##### end init_signull(system_crond_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(system_crond_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(system_crond_t) depth: 3
 	
	
	


	allow system_crond_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(system_crond_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(system_crond_t) depth: 3
 	
	
	


	dontaudit system_crond_t security_t:dir search;
	dontaudit system_crond_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(system_crond_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(system_crond_t) depth: 3
 	
	
	


	dontaudit system_crond_t selinux_config_t:dir search;
	dontaudit system_crond_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(system_crond_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(system_crond_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(system_crond_t,anacron_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(anacron_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(anacron_exec_t) depth: 4
 	
	
	


	allow anacron_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(anacron_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(anacron_exec_t) depth: 4
 	
	
	


	allow anacron_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(anacron_exec_t) depth: 3
 	
	typeattribute anacron_exec_t file_type;

	 	 	 	
##### end files_type(anacron_exec_t) depth: 2
 	

	allow system_crond_t anacron_exec_t:file entrypoint;
	allow system_crond_t anacron_exec_t:file { read getattr lock execute ioctl };

	typeattribute anacron_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(system_crond_t,anacron_exec_t) depth: 1
 	

	role system_r types system_crond_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool system_crond_disable_trans false;
			
		
		if(system_crond_disable_trans ) {
			
	
	


	allow initrc_t anacron_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init anacron_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,anacron_exec_t,system_crond_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,anacron_exec_t,system_crond_t) depth: 3
 	
	allow initrc_t anacron_exec_t:file { getattr read execute };
	allow initrc_t system_crond_t:process transition;
	dontaudit initrc_t system_crond_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,anacron_exec_t,system_crond_t) depth: 2
 	
	type_transition initrc_t anacron_exec_t:process system_crond_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,anacron_exec_t,system_crond_t) depth: 1
 	
			allow initrc_t system_crond_t:fd use;
			allow system_crond_t initrc_t:fd use;
			allow system_crond_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow system_crond_t initrc_t:process sigchld;
			allow initrc_t system_crond_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow system_crond_t anacron_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(system_crond_t,anacron_exec_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_shell_entry_type(system_crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_entry_file(system_crond_t,shell_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(shell_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(shell_exec_t) depth: 4
 	
	
	


	allow shell_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(shell_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(shell_exec_t) depth: 4
 	
	
	


	allow shell_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(shell_exec_t) depth: 3
 	
	typeattribute shell_exec_t file_type;

	 	 	 	
##### end files_type(shell_exec_t) depth: 2
 	

	allow system_crond_t shell_exec_t:file entrypoint;
	allow system_crond_t shell_exec_t:file { read getattr lock execute ioctl };

	typeattribute shell_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(system_crond_t,shell_exec_t) depth: 1
 	

	 	 	 	
##### end corecmd_shell_entry_type(system_crond_t) depth: 0
 	
role system_r types system_crond_t;

 	 	 	 	
##### begin files_lock_file(system_crond_lock_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(system_crond_lock_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_crond_lock_t) depth: 3
 	
	
	


	allow system_crond_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_crond_lock_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_crond_lock_t) depth: 3
 	
	
	


	allow system_crond_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_crond_lock_t) depth: 2
 	
	typeattribute system_crond_lock_t file_type;

	 	 	 	
##### end files_type(system_crond_lock_t) depth: 1
 	
	typeattribute system_crond_lock_t lockfile;

	 	 	 	
##### end files_lock_file(system_crond_lock_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(system_crond_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(system_crond_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_crond_tmp_t) depth: 3
 	
	
	


	allow system_crond_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_crond_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_crond_tmp_t) depth: 3
 	
	
	


	allow system_crond_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_crond_tmp_t) depth: 2
 	
	typeattribute system_crond_tmp_t file_type;

	 	 	 	
##### end files_type(system_crond_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(system_crond_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(system_crond_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_crond_tmp_t) depth: 4
 	
	
	


	allow system_crond_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_crond_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_crond_tmp_t) depth: 4
 	
	
	


	allow system_crond_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_crond_tmp_t) depth: 3
 	
	typeattribute system_crond_tmp_t file_type;

	 	 	 	
##### end files_type(system_crond_tmp_t) depth: 2
 	
	typeattribute system_crond_tmp_t polymember;

	 	 	 	
##### end files_poly_member(system_crond_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(system_crond_tmp_t) depth: 2
 	
	
	


	allow system_crond_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(system_crond_tmp_t) depth: 1
 	
	typeattribute system_crond_tmp_t tmpfile;
	allow system_crond_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(system_crond_tmp_t) depth: 0
 	


	type sysadm_cron_spool_t;
	 	 	 	 	
##### begin files_type(sysadm_cron_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sysadm_cron_spool_t) depth: 2
 	
	
	


	allow sysadm_cron_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sysadm_cron_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sysadm_cron_spool_t) depth: 2
 	
	
	


	allow sysadm_cron_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sysadm_cron_spool_t) depth: 1
 	
	typeattribute sysadm_cron_spool_t file_type;

	 	 	 	
##### end files_type(sysadm_cron_spool_t) depth: 0
 	


########################################
#
# Cron Local policy
#

allow crond_t self:capability { dac_override setgid setuid sys_nice dac_read_search audit_control };
dontaudit crond_t self:capability { sys_resource sys_tty_config };
allow crond_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow crond_t self:process { setexec setfscreate };
allow crond_t self:fd use;
allow crond_t self:fifo_file { getattr read write append ioctl lock };
allow crond_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow crond_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow crond_t self:unix_dgram_socket sendto;
allow crond_t self:unix_stream_socket connectto;
allow crond_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow crond_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow crond_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow crond_t self:msg { send receive };

allow crond_t crond_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_pid_filetrans(crond_t,crond_var_run_t,file) depth: 1
 	
	
	


	allow crond_t var_t:dir { getattr search };
	allow crond_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition crond_t var_run_t:file crond_var_run_t;

	 	 	 	
##### end files_pid_filetrans(crond_t,crond_var_run_t,file) depth: 0
 	

allow crond_t cron_spool_t:dir { read getattr lock search ioctl add_name remove_name write };
allow crond_t cron_spool_t:file { read getattr lock ioctl };
allow crond_t system_cron_spool_t:dir { read getattr lock search ioctl };
allow crond_t system_cron_spool_t:file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_read_kernel_sysctls(crond_t) depth: 1
 	
	
	


	allow crond_t proc_t:dir search;
	allow crond_t sysctl_t:dir { read getattr lock search ioctl };
	allow crond_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow crond_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(crond_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_sysfs(crond_t) depth: 1
 	
	
	


	allow crond_t sysfs_t:dir { read getattr lock search ioctl };
	allow crond_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(crond_t) depth: 0
 	
 	 	 	 	
##### begin selinux_get_fs_mount(crond_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(crond_t) depth: 2
 	
	
	


	allow crond_t proc_t:dir { read getattr lock search ioctl };
	allow crond_t proc_t:lnk_file { getattr read };
	allow crond_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(crond_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(crond_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(crond_t) depth: 1
 	
	
	


	allow crond_t security_t:dir { read search getattr };
	allow crond_t security_t:file { getattr read write };
	allow crond_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(crond_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(crond_t) depth: 1
 	
	
	


	allow crond_t security_t:dir { read search getattr };
	allow crond_t security_t:file { getattr read write };
	allow crond_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(crond_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(crond_t) depth: 1
 	
	
	


	allow crond_t security_t:dir { read search getattr };
	allow crond_t security_t:file { getattr read write };
	allow crond_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(crond_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(crond_t) depth: 1
 	
	
	


	allow crond_t security_t:dir { read search getattr };
	allow crond_t security_t:file { getattr read write };
	allow crond_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(crond_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(crond_t) depth: 1
 	
	
	


	allow crond_t security_t:dir { read search getattr };
	allow crond_t security_t:file { getattr read write };
	allow crond_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(crond_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_urand(crond_t) depth: 1
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(crond_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(crond_t) depth: 1
 	
	
	


	allow crond_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(crond_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(crond_t) depth: 1
 	
	
	


	allow crond_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(crond_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(crond_t) depth: 1
 	
	
	


	dontaudit crond_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(crond_t) depth: 0
 	

# need auth_chkpwd to check for locked accounts.
 	 	 	 	
##### begin auth_domtrans_chk_passwd(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(crond_t) depth: 2
 	
	
	


	allow crond_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(crond_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(crond_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(crond_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	allow crond_t chkpwd_exec_t:file { getattr read execute };
	allow crond_t system_chkpwd_t:process transition;
	dontaudit crond_t system_chkpwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(crond_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	type_transition crond_t chkpwd_exec_t:process system_chkpwd_t;
 	 	 	 	
##### end domain_auto_trans(crond_t,chkpwd_exec_t,system_chkpwd_t) depth: 1
 	

	allow crond_t self:capability { audit_write audit_control };
	allow crond_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

	allow crond_t system_chkpwd_t:fd use;
	allow system_chkpwd_t crond_t:fd use;
	allow system_chkpwd_t crond_t:fifo_file { getattr read write append ioctl lock };
	allow system_chkpwd_t crond_t:process sigchld;

	dontaudit crond_t shadow_t:file { getattr read };

	 	 	 	 	
##### begin dev_read_rand(crond_t) depth: 2
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(crond_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(crond_t) depth: 2
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(crond_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_certs(crond_t) depth: 2
 	
	
	


	allow crond_t cert_t:dir { read getattr lock search ioctl };
	allow crond_t cert_t:file { read getattr lock ioctl };
	allow crond_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(crond_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(crond_t) depth: 2
 	
	
	


	allow crond_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow crond_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(crond_t) depth: 3
 	
	
	


	allow crond_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(crond_t) depth: 4
 	
	
	


	allow crond_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(crond_t) depth: 4
 	
	
	


	allow crond_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(crond_t) depth: 4
 	
	
	


	allow crond_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow crond_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(crond_t) depth: 4
 	
	
	


	allow crond_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(crond_t) depth: 3
 	
	
	


	allow crond_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(crond_t) depth: 4
 	
	
	


	allow crond_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(crond_t) depth: 4
 	
	
	


	allow crond_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(crond_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(crond_t) depth: 4
 	
	
	


	allow crond_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(crond_t) depth: 3
 	
	
	


	allow crond_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(crond_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(crond_t) depth: 3
 	
	
	


	allow crond_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(crond_t) depth: 2
 	
	allow crond_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(crond_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(crond_t) depth: 2
 	
	
	
		

	allow crond_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(crond_t) depth: 3
 	
	
	


	allow crond_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(crond_t) depth: 4
 	
	
	


	allow crond_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow crond_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(crond_t) depth: 4
 	
	
	


	allow crond_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(crond_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(crond_t) depth: 4
 	
	
	


	allow crond_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(crond_t) depth: 3
 	
	
	


	allow crond_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(crond_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(crond_t) depth: 4
 	
	
	


	allow crond_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(crond_t) depth: 3
 	
	
	


	allow crond_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(crond_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(crond_t) depth: 3
 	
	
	


	allow crond_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(crond_t) depth: 2
 	
	allow crond_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(crond_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_domtrans_chk_passwd(crond_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_shell(crond_t) depth: 1
 	
	
	


	allow crond_t bin_t:dir { read getattr lock search ioctl };
	allow crond_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow crond_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(crond_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_list_sbin(crond_t) depth: 1
 	
	
	


	allow crond_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(crond_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_symlinks(crond_t) depth: 1
 	
	
	


	allow crond_t sbin_t:dir search;
	allow crond_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(crond_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(crond_t) depth: 1
 	
	
	


	allow crond_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(crond_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(crond_t) depth: 1
 	
	
	


	allow crond_t etc_t:dir { read getattr lock search ioctl };
	allow crond_t etc_t:file { read getattr lock ioctl };
	allow crond_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(crond_t) depth: 0
 	
 	 	 	 	
##### begin files_read_generic_spool(crond_t) depth: 1
 	
	
	


	allow crond_t var_t:dir search;
	allow crond_t var_spool_t:dir { read getattr lock search ioctl };
	allow crond_t var_spool_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_generic_spool(crond_t) depth: 0
 	
 	 	 	 	
##### begin files_list_usr(crond_t) depth: 1
 	
	
	


	allow crond_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(crond_t) depth: 0
 	
# Read from /var/spool/cron.
 	 	 	 	
##### begin files_search_var_lib(crond_t) depth: 1
 	
	
	


	allow crond_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(crond_t) depth: 0
 	
 	 	 	 	
##### begin files_search_default(crond_t) depth: 1
 	
	
	


	allow crond_t default_t:dir search;

	 	 	 	
##### end files_search_default(crond_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(crond_t) depth: 1
 	
	
	


	allow crond_t init_t:fd use;

	 	 	 	
##### end init_use_fds(crond_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(crond_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(crond_t) depth: 2
 	
	allow crond_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(crond_t) depth: 1
 	
	allow crond_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(crond_t) depth: 0
 	
 	 	 	 	
##### begin init_rw_utmp(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(crond_t) depth: 2
 	
	
	


	allow crond_t var_t:dir { getattr search };
	allow crond_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(crond_t) depth: 1
 	
	allow crond_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(crond_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(crond_t) depth: 2
 	
	
	


	allow crond_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(crond_t) depth: 1
 	
	allow crond_t lib_t:dir { read getattr lock search ioctl };
	allow crond_t lib_t:lnk_file { read getattr lock ioctl };
	allow crond_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow crond_t ld_so_t:file { read getattr lock execute ioctl };
	allow crond_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(crond_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(crond_t) depth: 2
 	
	
	


	allow crond_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(crond_t) depth: 1
 	
	allow crond_t lib_t:dir { read getattr lock search ioctl };
	allow crond_t lib_t:lnk_file { read getattr lock ioctl };
	allow crond_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow crond_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow crond_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(crond_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(crond_t) depth: 1
 	
	
	


	allow crond_t devlog_t:lnk_file read;
	allow crond_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow crond_t syslogd_t:unix_dgram_socket sendto;
	allow crond_t syslogd_t:unix_stream_socket connectto;
	allow crond_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow crond_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(crond_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(crond_t) depth: 3
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(crond_t) depth: 2
 	
	allow crond_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(crond_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(crond_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(crond_t) depth: 2
 	
	
	


	allow crond_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(crond_t) depth: 1
 	
	allow crond_t selinux_config_t:dir { read getattr lock search ioctl };
	allow crond_t selinux_config_t:file { read getattr lock ioctl };
	allow crond_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(crond_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_default_contexts(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(crond_t) depth: 2
 	
	
	


	allow crond_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(crond_t) depth: 1
 	
	allow crond_t selinux_config_t:dir search;
	allow crond_t default_context_t:dir { read getattr lock search ioctl };
	allow crond_t default_context_t:file { read getattr lock ioctl };
	allow crond_t default_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_default_contexts(crond_t) depth: 0
 	
 	 	 	 	
##### begin seutil_sigchld_newrole(crond_t) depth: 1
 	
	
	


	allow crond_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(crond_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(crond_t) depth: 2
 	
	
	


	allow crond_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(crond_t) depth: 1
 	
	# FIXME: crond_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(crond_t) depth: 2
 	
	
	


	allow crond_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(crond_t) depth: 1
 	
	allow crond_t locale_t:dir { read getattr lock search ioctl };
	allow crond_t locale_t:lnk_file { read getattr lock ioctl };
	allow crond_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(crond_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(crond_t) depth: 3
 	
	
	


	allow crond_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(crond_t) depth: 2
 	
	allow crond_t lib_t:dir { read getattr lock search ioctl };
	allow crond_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(crond_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(crond_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(crond_t) depth: 1
 	
	
	


	allow crond_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(crond_t) depth: 0
 	
# Not sure why this is needed
 	 	 	 	
##### begin userdom_list_all_users_home_dirs(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(crond_t) depth: 1
 	
	allow crond_t home_dir_type:dir { getattr search read lock ioctl };

	 	 	 	
##### end userdom_list_all_users_home_dirs(crond_t) depth: 0
 	




	allow crond_t system_crond_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow crond_t system_crond_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow crond_t system_crond_tmp_t:lnk_file { create read getattr setattr link unlink rename };
	allow crond_t system_crond_tmp_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow crond_t system_crond_tmp_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_tmp_filetrans(crond_t,system_crond_tmp_t,{ dir file lnk_file sock_file fifo_file }) depth: 1
 	
	
	


	allow crond_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition crond_t tmp_t:{ dir file lnk_file sock_file fifo_file } system_crond_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(crond_t,system_crond_tmp_t,{ dir file lnk_file sock_file fifo_file }) depth: 0
 	

	 	 	 	 	
##### begin unconfined_domain(crond_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(crond_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow crond_t self:capability *;
	allow crond_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow crond_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow crond_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow crond_t self:nscd *;
	allow crond_t self:dbus *;
	allow crond_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(crond_t) depth: 3
 	
	
	


	allow crond_t proc_type:{ dir file } *;

	allow crond_t sysctl_t:{ dir file } *;

	allow crond_t kernel_t:system *;

	allow crond_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow crond_t unlabeled_t:filesystem *;
	allow crond_t unlabeled_t:association *;

	typeattribute crond_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute crond_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(crond_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow crond_t { proc_t proc_net_t }:dir search;

	allow crond_t sysctl_type:dir { read getattr lock search ioctl };
	allow crond_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(crond_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(crond_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(crond_t) depth: 3
 	
	
	


	allow crond_t node_type:node *;
	allow crond_t netif_type:netif *;
	allow crond_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow crond_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow crond_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow crond_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(crond_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(crond_t) depth: 5
 	
	
	


	allow crond_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(crond_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(crond_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(crond_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(crond_t) depth: 3
 	
	
	


	allow crond_t device_node:{ chr_file blk_file } *;
	allow crond_t mtrr_device_t:{ dir file } *;

	allow crond_t self:capability sys_rawio;
	typeattribute crond_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(crond_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(crond_t) depth: 3
 	
	
	


	typeattribute crond_t unconfined_domain_type;

	# pass all constraints
	typeattribute crond_t can_change_process_identity;
	typeattribute crond_t can_change_process_role;
	typeattribute crond_t can_change_object_identity;
	typeattribute crond_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow crond_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow crond_t domain:fd use;
	allow crond_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow crond_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow crond_t domain:{ sem msgq shm } *;
	allow crond_t domain:msg { send receive };

	# For /proc/pid
	allow crond_t domain:dir { read getattr lock search ioctl };
	allow crond_t domain:file { read getattr lock ioctl };
	allow crond_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(crond_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(crond_t) depth: 3
 	
	
	


	dontaudit crond_t domain:dir { read getattr lock search ioctl };
	dontaudit crond_t domain:lnk_file { read getattr lock ioctl };
	dontaudit crond_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit crond_t domain:sock_file { read getattr lock ioctl };
	dontaudit crond_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(crond_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(crond_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow crond_t file_type:{ file chr_file } ~execmod;
	allow crond_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow crond_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow crond_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow crond_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(crond_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(crond_t) depth: 3
 	
	
	


	allow crond_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow crond_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(crond_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(crond_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow crond_t security_t:dir { getattr search read };
	allow crond_t security_t:file { getattr read write };

	typeattribute crond_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow crond_t security_t:security *;
		auditallow crond_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(crond_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow crond_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow crond_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow crond_t self:process execstack;
		auditallow crond_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit crond_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(crond_t) depth: 3
 	
	
	


	typeattribute crond_t can_read_shadow_passwords;
	typeattribute crond_t can_write_shadow_passwords;
	typeattribute crond_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(crond_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(crond_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(crond_t) depth: 4
 	
	
	


	allow crond_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(crond_t) depth: 3
 	
	allow crond_t lib_t:dir { read getattr lock search ioctl };
	allow crond_t lib_t:lnk_file { read getattr lock ioctl };
	allow crond_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow crond_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow crond_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(crond_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(crond_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(crond_t) depth: 4
 	
	
	


	allow crond_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(crond_t) depth: 3
 	
	allow crond_t selinux_config_t:dir search;
	allow crond_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow crond_t policy_config_t:file { getattr create write };
#	typeattribute crond_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(crond_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(crond_t) depth: 3
 	
	
	


	allow crond_t policy_config_t:file relabelto;
	typeattribute crond_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(crond_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(crond_t) depth: 3
 	
	
	


	allow crond_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow crond_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute crond_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute crond_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(crond_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(crond_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow crond_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow crond_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(crond_t) depth: 0
 	

	# cjp: fix this to generic_user interfaces
	 	 	 	 	
##### begin userdom_manage_user_home_content_dirs(user,crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(crond_t) depth: 1
 	
	allow crond_t user_home_dir_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow crond_t user_home_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };
 	 	 	 	
##### end userdom_manage_user_home_content_dirs(user,crond_t) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_files(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(crond_t) depth: 1
 	
	allow crond_t user_home_dir_t:dir { getattr search };
	allow crond_t user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow crond_t user_home_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_files(crond_t) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_symlinks(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(crond_t) depth: 1
 	
	allow crond_t user_home_dir_t:dir { getattr search };
	allow crond_t user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow crond_t user_home_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_symlinks(crond_t) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_sockets(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(crond_t) depth: 1
 	
	allow crond_t user_home_dir_t:dir { getattr search };
	allow crond_t user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow crond_t user_home_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_sockets(crond_t) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_pipes(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(crond_t) depth: 1
 	
	allow crond_t user_home_dir_t:dir { getattr search };
	allow crond_t user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow crond_t user_home_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_pipes(crond_t) depth: 0
 	
	 	 	 	 	
##### begin userdom_generic_user_home_dir_filetrans_generic_user_home_content(crond_t,{ dir file lnk_file fifo_file sock_file }) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(crond_t) depth: 2
 	
	
	


	allow crond_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(crond_t) depth: 1
 	
	allow crond_t user_home_dir_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition crond_t user_home_dir_t:{ dir file lnk_file fifo_file sock_file } user_home_t;

	 	 	 	
##### end userdom_generic_user_home_dir_filetrans_generic_user_home_content(crond_t,{ dir file lnk_file fifo_file sock_file }) depth: 0
 	

	allow crond_t unconfined_t:dbus send_msg;
	allow crond_t initrc_t:dbus send_msg;



	
		if (fcron_crond) {
			
	allow crond_t system_cron_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };

		
		}
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin udev_read_db(crond_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(crond_t) depth: 2
 	
	
	


	allow crond_t device_t:dir { read getattr lock search ioctl };
	allow crond_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(crond_t) depth: 1
 	
	allow crond_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(crond_t) depth: 0
 	

	


########################################
#
# System cron process domain
#


	
		
	



	# cjp: FIXME
	allow crond_t unconfined_t:process transition;



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin files_type(svc_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_conf_t) depth: 2
 	
	
	


	allow svc_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_conf_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_conf_t) depth: 2
 	
	
	


	allow svc_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_conf_t) depth: 1
 	
	typeattribute svc_conf_t file_type;

	 	 	 	
##### end files_type(svc_conf_t) depth: 0
 	

 	 	 	 	
##### begin files_type(svc_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_log_t) depth: 2
 	
	
	


	allow svc_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_log_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_log_t) depth: 2
 	
	
	


	allow svc_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_log_t) depth: 1
 	
	typeattribute svc_log_t file_type;

	 	 	 	
##### end files_type(svc_log_t) depth: 0
 	

 	 	 	 	
##### begin domain_type(svc_multilog_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(svc_multilog_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute svc_multilog_t domain;

	# allow the domain to read its /proc/pid entries
	allow svc_multilog_t self:dir { read getattr lock search ioctl };
	allow svc_multilog_t self:lnk_file { read getattr lock ioctl };
	allow svc_multilog_t self:file { getattr read write append ioctl lock };

	# allow svc_multilog_t to create child processes in this domain
	allow svc_multilog_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types svc_multilog_t;
		role sysadm_r types svc_multilog_t;
		role user_r types svc_multilog_t;
		role staff_r types svc_multilog_t;
	

	 	 	 	
##### end domain_base_type(svc_multilog_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t device_t:dir { read getattr lock search ioctl };
	allow svc_multilog_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(svc_multilog_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t device_t:dir { read getattr lock search ioctl };
	allow svc_multilog_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(svc_multilog_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(svc_multilog_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(svc_multilog_t) depth: 3
 	
	
	


	allow svc_multilog_t device_t:dir { read getattr lock search ioctl };
	allow svc_multilog_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(svc_multilog_t) depth: 2
 	
	allow svc_multilog_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(svc_multilog_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t root_t:dir { read getattr lock search ioctl };
	allow svc_multilog_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(svc_multilog_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(svc_multilog_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t init_t:process signull;

	 	 	 	
##### end init_signull(svc_multilog_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(svc_multilog_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(svc_multilog_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(svc_multilog_t) depth: 2
 	
	
	


	dontaudit svc_multilog_t security_t:dir search;
	dontaudit svc_multilog_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(svc_multilog_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(svc_multilog_t) depth: 2
 	
	
	


	dontaudit svc_multilog_t selinux_config_t:dir search;
	dontaudit svc_multilog_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(svc_multilog_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(svc_multilog_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(svc_multilog_t,svc_multilog_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(svc_multilog_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_multilog_exec_t) depth: 3
 	
	
	


	allow svc_multilog_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_multilog_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_multilog_exec_t) depth: 3
 	
	
	


	allow svc_multilog_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_multilog_exec_t) depth: 2
 	
	typeattribute svc_multilog_exec_t file_type;

	 	 	 	
##### end files_type(svc_multilog_exec_t) depth: 1
 	

	allow svc_multilog_t svc_multilog_exec_t:file entrypoint;
	allow svc_multilog_t svc_multilog_exec_t:file { read getattr lock execute ioctl };

	typeattribute svc_multilog_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(svc_multilog_t,svc_multilog_exec_t) depth: 0
 	
role system_r types svc_multilog_t;

 	 	 	 	
##### begin domain_type(svc_run_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(svc_run_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute svc_run_t domain;

	# allow the domain to read its /proc/pid entries
	allow svc_run_t self:dir { read getattr lock search ioctl };
	allow svc_run_t self:lnk_file { read getattr lock ioctl };
	allow svc_run_t self:file { getattr read write append ioctl lock };

	# allow svc_run_t to create child processes in this domain
	allow svc_run_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types svc_run_t;
		role sysadm_r types svc_run_t;
		role user_r types svc_run_t;
		role staff_r types svc_run_t;
	

	 	 	 	
##### end domain_base_type(svc_run_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t device_t:dir { read getattr lock search ioctl };
	allow svc_run_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(svc_run_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t device_t:dir { read getattr lock search ioctl };
	allow svc_run_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(svc_run_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(svc_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(svc_run_t) depth: 3
 	
	
	


	allow svc_run_t device_t:dir { read getattr lock search ioctl };
	allow svc_run_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(svc_run_t) depth: 2
 	
	allow svc_run_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(svc_run_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t root_t:dir { read getattr lock search ioctl };
	allow svc_run_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(svc_run_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(svc_run_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t init_t:process signull;

	 	 	 	
##### end init_signull(svc_run_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(svc_run_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(svc_run_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(svc_run_t) depth: 2
 	
	
	


	dontaudit svc_run_t security_t:dir search;
	dontaudit svc_run_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(svc_run_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(svc_run_t) depth: 2
 	
	
	


	dontaudit svc_run_t selinux_config_t:dir search;
	dontaudit svc_run_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(svc_run_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(svc_run_t,svc_run_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(svc_run_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_run_exec_t) depth: 3
 	
	
	


	allow svc_run_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_run_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_run_exec_t) depth: 3
 	
	
	


	allow svc_run_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_run_exec_t) depth: 2
 	
	typeattribute svc_run_exec_t file_type;

	 	 	 	
##### end files_type(svc_run_exec_t) depth: 1
 	

	allow svc_run_t svc_run_exec_t:file entrypoint;
	allow svc_run_t svc_run_exec_t:file { read getattr lock execute ioctl };

	typeattribute svc_run_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(svc_run_t,svc_run_exec_t) depth: 0
 	
role system_r types svc_run_t;

 	 	 	 	
##### begin init_domain(svc_start_t,svc_start_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(svc_start_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(svc_start_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute svc_start_t domain;

	# allow the domain to read its /proc/pid entries
	allow svc_start_t self:dir { read getattr lock search ioctl };
	allow svc_start_t self:lnk_file { read getattr lock ioctl };
	allow svc_start_t self:file { getattr read write append ioctl lock };

	# allow svc_start_t to create child processes in this domain
	allow svc_start_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types svc_start_t;
		role sysadm_r types svc_start_t;
		role user_r types svc_start_t;
		role staff_r types svc_start_t;
	

	 	 	 	
##### end domain_base_type(svc_start_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t device_t:dir { read getattr lock search ioctl };
	allow svc_start_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t device_t:dir { read getattr lock search ioctl };
	allow svc_start_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(svc_start_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(svc_start_t) depth: 4
 	
	
	


	allow svc_start_t device_t:dir { read getattr lock search ioctl };
	allow svc_start_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(svc_start_t) depth: 3
 	
	allow svc_start_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(svc_start_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t root_t:dir { read getattr lock search ioctl };
	allow svc_start_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(svc_start_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t init_t:process signull;

	 	 	 	
##### end init_signull(svc_start_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(svc_start_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(svc_start_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(svc_start_t) depth: 3
 	
	
	


	dontaudit svc_start_t security_t:dir search;
	dontaudit svc_start_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(svc_start_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(svc_start_t) depth: 3
 	
	
	


	dontaudit svc_start_t selinux_config_t:dir search;
	dontaudit svc_start_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(svc_start_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(svc_start_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(svc_start_t,svc_start_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(svc_start_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_start_exec_t) depth: 4
 	
	
	


	allow svc_start_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_start_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_start_exec_t) depth: 4
 	
	
	


	allow svc_start_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_start_exec_t) depth: 3
 	
	typeattribute svc_start_exec_t file_type;

	 	 	 	
##### end files_type(svc_start_exec_t) depth: 2
 	

	allow svc_start_t svc_start_exec_t:file entrypoint;
	allow svc_start_t svc_start_exec_t:file { read getattr lock execute ioctl };

	typeattribute svc_start_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(svc_start_t,svc_start_exec_t) depth: 1
 	

	role system_r types svc_start_t;

	 	 	 	 	
##### begin domain_auto_trans(init_t,svc_start_exec_t,svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(init_t,svc_start_exec_t,svc_start_t) depth: 3
 	
	allow init_t svc_start_exec_t:file { getattr read execute };
	allow init_t svc_start_t:process transition;
	dontaudit init_t svc_start_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(init_t,svc_start_exec_t,svc_start_t) depth: 2
 	
	type_transition init_t svc_start_exec_t:process svc_start_t;
 	 	 	 	
##### end domain_auto_trans(init_t,svc_start_exec_t,svc_start_t) depth: 1
 	

	allow svc_start_t init_t:fd use;
	allow init_t svc_start_t:fd use;
	allow svc_start_t init_t:fifo_file { getattr read write append ioctl lock };
	allow svc_start_t init_t:process sigchld;

	 	 	 	
##### end init_domain(svc_start_t,svc_start_exec_t) depth: 0
 	
 	 	 	 	
##### begin init_system_domain(svc_start_t,svc_start_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(svc_start_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(svc_start_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute svc_start_t domain;

	# allow the domain to read its /proc/pid entries
	allow svc_start_t self:dir { read getattr lock search ioctl };
	allow svc_start_t self:lnk_file { read getattr lock ioctl };
	allow svc_start_t self:file { getattr read write append ioctl lock };

	# allow svc_start_t to create child processes in this domain
	allow svc_start_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types svc_start_t;
		role sysadm_r types svc_start_t;
		role user_r types svc_start_t;
		role staff_r types svc_start_t;
	

	 	 	 	
##### end domain_base_type(svc_start_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t device_t:dir { read getattr lock search ioctl };
	allow svc_start_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t device_t:dir { read getattr lock search ioctl };
	allow svc_start_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(svc_start_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(svc_start_t) depth: 4
 	
	
	


	allow svc_start_t device_t:dir { read getattr lock search ioctl };
	allow svc_start_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(svc_start_t) depth: 3
 	
	allow svc_start_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(svc_start_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t root_t:dir { read getattr lock search ioctl };
	allow svc_start_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(svc_start_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t init_t:process signull;

	 	 	 	
##### end init_signull(svc_start_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(svc_start_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(svc_start_t) depth: 3
 	
	
	


	allow svc_start_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(svc_start_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(svc_start_t) depth: 3
 	
	
	


	dontaudit svc_start_t security_t:dir search;
	dontaudit svc_start_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(svc_start_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(svc_start_t) depth: 3
 	
	
	


	dontaudit svc_start_t selinux_config_t:dir search;
	dontaudit svc_start_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(svc_start_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(svc_start_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(svc_start_t,svc_start_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(svc_start_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_start_exec_t) depth: 4
 	
	
	


	allow svc_start_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_start_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_start_exec_t) depth: 4
 	
	
	


	allow svc_start_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_start_exec_t) depth: 3
 	
	typeattribute svc_start_exec_t file_type;

	 	 	 	
##### end files_type(svc_start_exec_t) depth: 2
 	

	allow svc_start_t svc_start_exec_t:file entrypoint;
	allow svc_start_t svc_start_exec_t:file { read getattr lock execute ioctl };

	typeattribute svc_start_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(svc_start_t,svc_start_exec_t) depth: 1
 	

	role system_r types svc_start_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,svc_start_exec_t,svc_start_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,svc_start_exec_t,svc_start_t) depth: 3
 	
	allow initrc_t svc_start_exec_t:file { getattr read execute };
	allow initrc_t svc_start_t:process transition;
	dontaudit initrc_t svc_start_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,svc_start_exec_t,svc_start_t) depth: 2
 	
	type_transition initrc_t svc_start_exec_t:process svc_start_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,svc_start_exec_t,svc_start_t) depth: 1
 	

	allow initrc_t svc_start_t:fd use;
	allow svc_start_t initrc_t:fd use;
	allow svc_start_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow svc_start_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(svc_start_t,svc_start_exec_t) depth: 0
 	
role system_r types svc_start_t;

 	 	 	 	
##### begin files_type(svc_svc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(svc_svc_t) depth: 2
 	
	
	


	allow svc_svc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(svc_svc_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(svc_svc_t) depth: 2
 	
	
	


	allow svc_svc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(svc_svc_t) depth: 1
 	
	typeattribute svc_svc_t file_type;

	 	 	 	
##### end files_type(svc_svc_t) depth: 0
 	

########################################
#
# multilog local policy
#

# multilog creates /service/*/log/status
allow svc_multilog_t svc_svc_t:dir { read getattr lock search ioctl add_name remove_name write };
allow svc_multilog_t svc_svc_t:file { create ioctl read getattr lock write setattr append link unlink rename };

 	 	 	 	
##### begin init_use_fds(svc_multilog_t) depth: 1
 	
	
	


	allow svc_multilog_t init_t:fd use;

	 	 	 	
##### end init_use_fds(svc_multilog_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(svc_multilog_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(svc_multilog_t) depth: 1
 	
	allow svc_multilog_t lib_t:dir { read getattr lock search ioctl };
	allow svc_multilog_t lib_t:lnk_file { read getattr lock ioctl };
	allow svc_multilog_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow svc_multilog_t ld_so_t:file { read getattr lock execute ioctl };
	allow svc_multilog_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(svc_multilog_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(svc_multilog_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(svc_multilog_t) depth: 1
 	
	allow svc_multilog_t lib_t:dir { read getattr lock search ioctl };
	allow svc_multilog_t lib_t:lnk_file { read getattr lock ioctl };
	allow svc_multilog_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow svc_multilog_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow svc_multilog_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(svc_multilog_t) depth: 0
 	

# writes to /var/log/*/*
 	 	 	 	
##### begin logging_manage_generic_logs(svc_multilog_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(svc_multilog_t) depth: 2
 	
	
	


	allow svc_multilog_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(svc_multilog_t) depth: 1
 	
	allow svc_multilog_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow svc_multilog_t var_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end logging_manage_generic_logs(svc_multilog_t) depth: 0
 	

 	 	 	 	
##### begin daemontools_ipc_domain(svc_multilog_t) depth: 1
 	
	
	


	allow svc_multilog_t svc_start_t:process sigchld;
	allow svc_multilog_t svc_start_t:fd use;
	allow svc_multilog_t svc_start_t:fifo_file { read write getattr };
	allow svc_start_t svc_multilog_t:process signal;

	 	 	 	
##### end daemontools_ipc_domain(svc_multilog_t) depth: 0
 	

########################################
#
# local policy for binaries that impose 
# a given environment to supervised daemons
# ie. softlimit, setuidgid, envuidgid, envdir, fghack ..
#

allow svc_run_t self:capability { setgid setuid chown fsetid };
allow svc_run_t self:process setrlimit;
allow svc_run_t self:fifo_file { getattr read write append ioctl lock };
allow svc_run_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };

allow svc_run_t svc_conf_t:dir { read getattr lock search ioctl };
allow svc_run_t svc_conf_t:file { read getattr lock ioctl };


	
	


	allow svc_run_t svc_run_exec_t :file { { read getattr lock execute ioctl } execute_no_trans };


 	 	 	 	
##### begin kernel_read_system_state(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t proc_t:dir { read getattr lock search ioctl };
	allow svc_run_t proc_t:lnk_file { getattr read };
	allow svc_run_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(svc_run_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t bin_t:dir { read getattr lock search ioctl };
	allow svc_run_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow svc_run_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t sbin_t:dir { read getattr lock search ioctl };
	allow svc_run_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow svc_run_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t bin_t:dir { read getattr lock search ioctl };
	allow svc_run_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow svc_run_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_ls(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t bin_t:dir { read getattr lock search ioctl };
	allow svc_run_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow svc_run_t ls_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_ls(svc_run_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t etc_t:dir { read getattr lock search ioctl };
	allow svc_run_t etc_t:file { read getattr lock ioctl };
	allow svc_run_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t etc_t:dir { read getattr lock search ioctl };
	allow svc_run_t etc_runtime_t:file { read getattr lock ioctl };
	allow svc_run_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin files_search_pids(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t var_t:dir { getattr search };
	allow svc_run_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin files_search_var_lib(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(svc_run_t) depth: 0
 	

 	 	 	 	
##### begin init_use_script_fds(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin init_use_fds(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t init_t:fd use;

	 	 	 	
##### end init_use_fds(svc_run_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(svc_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(svc_run_t) depth: 1
 	
	allow svc_run_t lib_t:dir { read getattr lock search ioctl };
	allow svc_run_t lib_t:lnk_file { read getattr lock ioctl };
	allow svc_run_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow svc_run_t ld_so_t:file { read getattr lock execute ioctl };
	allow svc_run_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(svc_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(svc_run_t) depth: 2
 	
	
	


	allow svc_run_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(svc_run_t) depth: 1
 	
	allow svc_run_t lib_t:dir { read getattr lock search ioctl };
	allow svc_run_t lib_t:lnk_file { read getattr lock ioctl };
	allow svc_run_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow svc_run_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow svc_run_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(svc_run_t) depth: 0
 	

 	 	 	 	
##### begin daemontools_domtrans_multilog(svc_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(svc_run_t,svc_multilog_exec_t,svc_multilog_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(svc_run_t,svc_multilog_exec_t,svc_multilog_t) depth: 3
 	
	allow svc_run_t svc_multilog_exec_t:file { getattr read execute };
	allow svc_run_t svc_multilog_t:process transition;
	dontaudit svc_run_t svc_multilog_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(svc_run_t,svc_multilog_exec_t,svc_multilog_t) depth: 2
 	
	type_transition svc_run_t svc_multilog_exec_t:process svc_multilog_t;
 	 	 	 	
##### end domain_auto_trans(svc_run_t,svc_multilog_exec_t,svc_multilog_t) depth: 1
 	

	allow svc_run_t svc_multilog_t:fd use;
	allow svc_multilog_t svc_run_t:fd use;
	allow svc_multilog_t svc_run_t:fifo_file { getattr read write append ioctl lock };
	allow svc_multilog_t svc_run_t:process sigchld;

	 	 	 	
##### end daemontools_domtrans_multilog(svc_run_t) depth: 0
 	
 	 	 	 	
##### begin daemontools_read_svc(svc_run_t) depth: 1
 	
	
	


	allow svc_run_t svc_svc_t:dir { read getattr lock search ioctl };
	allow svc_run_t svc_svc_t:file { read getattr lock ioctl };

	 	 	 	
##### end daemontools_read_svc(svc_run_t) depth: 0
 	

########################################
#
# local policy for service monitoring programs
# ie svc, svscan, supervise ...
#

allow svc_start_t svc_run_t:process signal;

allow svc_start_t self:fifo_file { getattr read write append ioctl lock };
allow svc_start_t self:capability kill;
allow svc_start_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };


	
	


	allow svc_start_t svc_start_exec_t :file { { read getattr lock execute ioctl } execute_no_trans };


 	 	 	 	
##### begin corecmd_read_sbin_symlinks(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t sbin_t:dir search;
	allow svc_start_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t bin_t:dir { read getattr lock search ioctl };
	allow svc_start_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow svc_start_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t bin_t:dir { read getattr lock search ioctl };
	allow svc_start_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow svc_start_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(svc_start_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t etc_t:dir { read getattr lock search ioctl };
	allow svc_start_t etc_t:file { read getattr lock ioctl };
	allow svc_start_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t etc_t:dir { read getattr lock search ioctl };
	allow svc_start_t etc_runtime_t:file { read getattr lock ioctl };
	allow svc_start_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin files_search_var(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin files_search_pids(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t var_t:dir { getattr search };
	allow svc_start_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(svc_start_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(svc_start_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(svc_start_t) depth: 2
 	
	
	


	allow svc_start_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(svc_start_t) depth: 1
 	
	allow svc_start_t lib_t:dir { read getattr lock search ioctl };
	allow svc_start_t lib_t:lnk_file { read getattr lock ioctl };
	allow svc_start_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow svc_start_t ld_so_t:file { read getattr lock execute ioctl };
	allow svc_start_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(svc_start_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(svc_start_t) depth: 2
 	
	
	


	allow svc_start_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(svc_start_t) depth: 1
 	
	allow svc_start_t lib_t:dir { read getattr lock search ioctl };
	allow svc_start_t lib_t:lnk_file { read getattr lock ioctl };
	allow svc_start_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow svc_start_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow svc_start_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(svc_start_t) depth: 0
 	

 	 	 	 	
##### begin daemontools_domtrans_run(svc_start_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(svc_start_t,svc_run_exec_t,svc_run_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(svc_start_t,svc_run_exec_t,svc_run_t) depth: 3
 	
	allow svc_start_t svc_run_exec_t:file { getattr read execute };
	allow svc_start_t svc_run_t:process transition;
	dontaudit svc_start_t svc_run_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(svc_start_t,svc_run_exec_t,svc_run_t) depth: 2
 	
	type_transition svc_start_t svc_run_exec_t:process svc_run_t;
 	 	 	 	
##### end domain_auto_trans(svc_start_t,svc_run_exec_t,svc_run_t) depth: 1
 	

	allow svc_start_t svc_run_t:fd use;
	allow svc_run_t svc_start_t:fd use;
	allow svc_run_t svc_start_t:fifo_file { getattr read write append ioctl lock };
	allow svc_run_t svc_start_t:process sigchld;

	 	 	 	
##### end daemontools_domtrans_run(svc_start_t) depth: 0
 	
 	 	 	 	
##### begin daemontools_manage_svc(svc_start_t) depth: 1
 	
	
	


	allow svc_start_t svc_svc_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow svc_start_t svc_svc_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow svc_start_t svc_svc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow svc_start_t svc_svc_t:lnk_file { read create };

	 	 	 	
##### end daemontools_manage_svc(svc_start_t) depth: 0
 	

	


########################################
#
# Declarations
#
    
# kernel_domtrans_to(devd_t, devd_exec_t)
 	 	 	 	
##### begin init_daemon_domain(devd_t,devd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(devd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(devd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute devd_t domain;

	# allow the domain to read its /proc/pid entries
	allow devd_t self:dir { read getattr lock search ioctl };
	allow devd_t self:lnk_file { read getattr lock ioctl };
	allow devd_t self:file { getattr read write append ioctl lock };

	# allow devd_t to create child processes in this domain
	allow devd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types devd_t;
		role sysadm_r types devd_t;
		role user_r types devd_t;
		role staff_r types devd_t;
	

	 	 	 	
##### end domain_base_type(devd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(devd_t) depth: 3
 	
	
	


	allow devd_t device_t:dir { read getattr lock search ioctl };
	allow devd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(devd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(devd_t) depth: 3
 	
	
	


	allow devd_t device_t:dir { read getattr lock search ioctl };
	allow devd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(devd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(devd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(devd_t) depth: 4
 	
	
	


	allow devd_t device_t:dir { read getattr lock search ioctl };
	allow devd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(devd_t) depth: 3
 	
	allow devd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(devd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(devd_t) depth: 3
 	
	
	


	allow devd_t root_t:dir { read getattr lock search ioctl };
	allow devd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(devd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(devd_t) depth: 3
 	
	
	


	allow devd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(devd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(devd_t) depth: 3
 	
	
	


	allow devd_t init_t:process signull;

	 	 	 	
##### end init_signull(devd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(devd_t) depth: 3
 	
	
	


	allow devd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(devd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(devd_t) depth: 3
 	
	
	


	allow devd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(devd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(devd_t) depth: 3
 	
	
	


	dontaudit devd_t security_t:dir search;
	dontaudit devd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(devd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(devd_t) depth: 3
 	
	
	


	dontaudit devd_t selinux_config_t:dir search;
	dontaudit devd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(devd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(devd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(devd_t,devd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(devd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(devd_exec_t) depth: 4
 	
	
	


	allow devd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(devd_exec_t) depth: 4
 	
	
	


	allow devd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(devd_exec_t) depth: 3
 	
	typeattribute devd_exec_t file_type;

	 	 	 	
##### end files_type(devd_exec_t) depth: 2
 	

	allow devd_t devd_exec_t:file entrypoint;
	allow devd_t devd_exec_t:file { read getattr lock execute ioctl };

	typeattribute devd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(devd_t,devd_exec_t) depth: 1
 	

	role system_r types devd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool devd_disable_trans false;
			
		
		if(devd_disable_trans ) {
			
	
	


	allow initrc_t devd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init devd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,devd_exec_t,devd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,devd_exec_t,devd_t) depth: 3
 	
	allow initrc_t devd_exec_t:file { getattr read execute };
	allow initrc_t devd_t:process transition;
	dontaudit initrc_t devd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,devd_exec_t,devd_t) depth: 2
 	
	type_transition initrc_t devd_exec_t:process devd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,devd_exec_t,devd_t) depth: 1
 	
			allow initrc_t devd_t:fd use;
			allow devd_t initrc_t:fd use;
			allow devd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow devd_t initrc_t:process sigchld;
			allow initrc_t devd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow devd_t devd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(devd_t,devd_exec_t) depth: 0
 	


 	 	 	 	
##### begin files_config_file(devd_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(devd_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(devd_etc_t) depth: 3
 	
	
	


	allow devd_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devd_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(devd_etc_t) depth: 3
 	
	
	


	allow devd_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(devd_etc_t) depth: 2
 	
	typeattribute devd_etc_t file_type;

	 	 	 	
##### end files_type(devd_etc_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute devd_etc_t usercanread;

	 	 	 	
##### end files_config_file(devd_etc_t) depth: 0
 	
 	 	 	 	
##### begin init_daemon_domain(devd_t,devd_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(devd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(devd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute devd_t domain;

	# allow the domain to read its /proc/pid entries
	allow devd_t self:dir { read getattr lock search ioctl };
	allow devd_t self:lnk_file { read getattr lock ioctl };
	allow devd_t self:file { getattr read write append ioctl lock };

	# allow devd_t to create child processes in this domain
	allow devd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types devd_t;
		role sysadm_r types devd_t;
		role user_r types devd_t;
		role staff_r types devd_t;
	

	 	 	 	
##### end domain_base_type(devd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(devd_t) depth: 3
 	
	
	


	allow devd_t device_t:dir { read getattr lock search ioctl };
	allow devd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(devd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(devd_t) depth: 3
 	
	
	


	allow devd_t device_t:dir { read getattr lock search ioctl };
	allow devd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(devd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(devd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(devd_t) depth: 4
 	
	
	


	allow devd_t device_t:dir { read getattr lock search ioctl };
	allow devd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(devd_t) depth: 3
 	
	allow devd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(devd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(devd_t) depth: 3
 	
	
	


	allow devd_t root_t:dir { read getattr lock search ioctl };
	allow devd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(devd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(devd_t) depth: 3
 	
	
	


	allow devd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(devd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(devd_t) depth: 3
 	
	
	


	allow devd_t init_t:process signull;

	 	 	 	
##### end init_signull(devd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(devd_t) depth: 3
 	
	
	


	allow devd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(devd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(devd_t) depth: 3
 	
	
	


	allow devd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(devd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(devd_t) depth: 3
 	
	
	


	dontaudit devd_t security_t:dir search;
	dontaudit devd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(devd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(devd_t) depth: 3
 	
	
	


	dontaudit devd_t selinux_config_t:dir search;
	dontaudit devd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(devd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(devd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(devd_t,devd_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(devd_etc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(devd_etc_t) depth: 4
 	
	
	


	allow devd_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devd_etc_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(devd_etc_t) depth: 4
 	
	
	


	allow devd_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(devd_etc_t) depth: 3
 	
	typeattribute devd_etc_t file_type;

	 	 	 	
##### end files_type(devd_etc_t) depth: 2
 	

	allow devd_t devd_etc_t:file entrypoint;
	allow devd_t devd_etc_t:file { read getattr lock execute ioctl };

	typeattribute devd_etc_t entry_type;

	 	 	 	
##### end domain_entry_file(devd_t,devd_etc_t) depth: 1
 	

	role system_r types devd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
		if(devd_disable_trans ) {
			
	
	


	allow initrc_t devd_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init devd_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,devd_etc_t,devd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,devd_etc_t,devd_t) depth: 3
 	
	allow initrc_t devd_etc_t:file { getattr read execute };
	allow initrc_t devd_t:process transition;
	dontaudit initrc_t devd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,devd_etc_t,devd_t) depth: 2
 	
	type_transition initrc_t devd_etc_t:process devd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,devd_etc_t,devd_t) depth: 1
 	
			allow initrc_t devd_t:fd use;
			allow devd_t initrc_t:fd use;
			allow devd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow devd_t initrc_t:process sigchld;
			allow initrc_t devd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow devd_t devd_etc_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(devd_t,devd_etc_t) depth: 0
 	

########################################
#
# Local policy
#   


allow devd_t devd_etc_t:file { read getattr lock ioctl };
allow devd_t devd_etc_t:dir { read getattr lock search ioctl };
allow devd_t devd_etc_t:lnk_file { read getattr lock ioctl };

	
	


	allow devd_t devd_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };
  


	
	


	allow devd_t devd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };





	


########################################
#
# Declarations
#

 	 	 	 	
##### begin init_daemon_domain(dhcpd_t,dhcpd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(dhcpd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(dhcpd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute dhcpd_t domain;

	# allow the domain to read its /proc/pid entries
	allow dhcpd_t self:dir { read getattr lock search ioctl };
	allow dhcpd_t self:lnk_file { read getattr lock ioctl };
	allow dhcpd_t self:file { getattr read write append ioctl lock };

	# allow dhcpd_t to create child processes in this domain
	allow dhcpd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types dhcpd_t;
		role sysadm_r types dhcpd_t;
		role user_r types dhcpd_t;
		role staff_r types dhcpd_t;
	

	 	 	 	
##### end domain_base_type(dhcpd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(dhcpd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(dhcpd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(dhcpd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpd_t) depth: 4
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpd_t) depth: 3
 	
	allow dhcpd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(dhcpd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t root_t:dir { read getattr lock search ioctl };
	allow dhcpd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(dhcpd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(dhcpd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t init_t:process signull;

	 	 	 	
##### end init_signull(dhcpd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(dhcpd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(dhcpd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(dhcpd_t) depth: 3
 	
	
	


	dontaudit dhcpd_t security_t:dir search;
	dontaudit dhcpd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(dhcpd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(dhcpd_t) depth: 3
 	
	
	


	dontaudit dhcpd_t selinux_config_t:dir search;
	dontaudit dhcpd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(dhcpd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(dhcpd_t,dhcpd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpd_exec_t) depth: 4
 	
	
	


	allow dhcpd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpd_exec_t) depth: 4
 	
	
	


	allow dhcpd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpd_exec_t) depth: 3
 	
	typeattribute dhcpd_exec_t file_type;

	 	 	 	
##### end files_type(dhcpd_exec_t) depth: 2
 	

	allow dhcpd_t dhcpd_exec_t:file entrypoint;
	allow dhcpd_t dhcpd_exec_t:file { read getattr lock execute ioctl };

	typeattribute dhcpd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(dhcpd_t,dhcpd_exec_t) depth: 1
 	

	role system_r types dhcpd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool dhcpd_disable_trans false;
			
		
		if(dhcpd_disable_trans ) {
			
	
	


	allow initrc_t dhcpd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init dhcpd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,dhcpd_exec_t,dhcpd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,dhcpd_exec_t,dhcpd_t) depth: 3
 	
	allow initrc_t dhcpd_exec_t:file { getattr read execute };
	allow initrc_t dhcpd_t:process transition;
	dontaudit initrc_t dhcpd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,dhcpd_exec_t,dhcpd_t) depth: 2
 	
	type_transition initrc_t dhcpd_exec_t:process dhcpd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,dhcpd_exec_t,dhcpd_t) depth: 1
 	
			allow initrc_t dhcpd_t:fd use;
			allow dhcpd_t initrc_t:fd use;
			allow dhcpd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow dhcpd_t initrc_t:process sigchld;
			allow initrc_t dhcpd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow dhcpd_t dhcpd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(dhcpd_t,dhcpd_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(dhcpd_state_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpd_state_t) depth: 2
 	
	
	


	allow dhcpd_state_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpd_state_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpd_state_t) depth: 2
 	
	
	


	allow dhcpd_state_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpd_state_t) depth: 1
 	
	typeattribute dhcpd_state_t file_type;

	 	 	 	
##### end files_type(dhcpd_state_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(dhcpd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpd_tmp_t) depth: 3
 	
	
	


	allow dhcpd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpd_tmp_t) depth: 3
 	
	
	


	allow dhcpd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpd_tmp_t) depth: 2
 	
	typeattribute dhcpd_tmp_t file_type;

	 	 	 	
##### end files_type(dhcpd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(dhcpd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpd_tmp_t) depth: 4
 	
	
	


	allow dhcpd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpd_tmp_t) depth: 4
 	
	
	


	allow dhcpd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpd_tmp_t) depth: 3
 	
	typeattribute dhcpd_tmp_t file_type;

	 	 	 	
##### end files_type(dhcpd_tmp_t) depth: 2
 	
	typeattribute dhcpd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(dhcpd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(dhcpd_tmp_t) depth: 2
 	
	
	


	allow dhcpd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(dhcpd_tmp_t) depth: 1
 	
	typeattribute dhcpd_tmp_t tmpfile;
	allow dhcpd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(dhcpd_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(dhcpd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpd_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpd_var_run_t) depth: 3
 	
	
	


	allow dhcpd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpd_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpd_var_run_t) depth: 3
 	
	
	


	allow dhcpd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpd_var_run_t) depth: 2
 	
	typeattribute dhcpd_var_run_t file_type;

	 	 	 	
##### end files_type(dhcpd_var_run_t) depth: 1
 	
	typeattribute dhcpd_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(dhcpd_var_run_t) depth: 0
 	

########################################
#
# Local policy
#

allow dhcpd_t self:capability net_raw;
dontaudit dhcpd_t self:capability { net_admin sys_tty_config };
allow dhcpd_t self:process { sigchld sigkill sigstop signull signal };
allow dhcpd_t self:fifo_file { read write getattr };
allow dhcpd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow dhcpd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow dhcpd_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };
allow dhcpd_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow dhcpd_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
# Allow dhcpd_t to use packet sockets
allow dhcpd_t self:packet_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow dhcpd_t self:rawip_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };


	
	


	allow dhcpd_t dhcpd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow dhcpd_t dhcpd_state_t:dir { read getattr lock search ioctl add_name remove_name write };
allow dhcpd_t dhcpd_state_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin sysnet_dhcp_state_filetrans(dhcpd_t,dhcpd_state_t,file) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var_lib(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(dhcpd_t) depth: 1
 	
	allow dhcpd_t dhcp_state_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition dhcpd_t dhcp_state_t:file dhcpd_state_t;

	 	 	 	
##### end sysnet_dhcp_state_filetrans(dhcpd_t,dhcpd_state_t,file) depth: 0
 	

allow dhcpd_t dhcpd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow dhcpd_t dhcpd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(dhcpd_t,dhcpd_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow dhcpd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition dhcpd_t tmp_t:{ file dir } dhcpd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(dhcpd_t,dhcpd_tmp_t,{ file dir }) depth: 0
 	

allow dhcpd_t dhcpd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow dhcpd_t dhcpd_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(dhcpd_t,dhcpd_var_run_t,file) depth: 1
 	
	
	


	allow dhcpd_t var_t:dir { getattr search };
	allow dhcpd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition dhcpd_t var_run_t:file dhcpd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(dhcpd_t,dhcpd_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t proc_t:dir { read getattr lock search ioctl };
	allow dhcpd_t proc_t:lnk_file { getattr read };
	allow dhcpd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t proc_t:dir search;
	allow dhcpd_t sysctl_t:dir { read getattr lock search ioctl };
	allow dhcpd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow dhcpd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(dhcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow dhcpd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(dhcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(dhcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(dhcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(dhcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(dhcpd_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(dhcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_dhcpd_port(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t dhcpd_port_t:tcp_socket name_bind;
	allow dhcpd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_dhcpd_port(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_dhcpd_port(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t dhcpd_port_t:udp_socket name_bind;
	allow dhcpd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_dhcpd_port(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_pxe_port(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t pxe_port_t:udp_socket name_bind;
	

	 	 	 	
##### end corenet_udp_bind_pxe_port(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t sysfs_t:dir { read getattr lock search ioctl };
	allow dhcpd_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_rand(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_urand(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(dhcpd_t) depth: 1
 	
	
	


	dontaudit dhcpd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t bin_t:dir { read getattr lock search ioctl };
	allow dhcpd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow dhcpd_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t sbin_t:dir { read getattr lock search ioctl };
	allow dhcpd_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow dhcpd_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t etc_t:dir { read getattr lock search ioctl };
	allow dhcpd_t etc_t:file { read getattr lock ioctl };
	allow dhcpd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t usr_t:dir { read getattr lock search ioctl };
	allow dhcpd_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t etc_t:dir { read getattr lock search ioctl };
	allow dhcpd_t etc_runtime_t:file { read getattr lock ioctl };
	allow dhcpd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin files_search_var_lib(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(dhcpd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpd_t) depth: 2
 	
	allow dhcpd_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(dhcpd_t) depth: 1
 	
	allow dhcpd_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(dhcpd_t) depth: 1
 	
	allow dhcpd_t lib_t:dir { read getattr lock search ioctl };
	allow dhcpd_t lib_t:lnk_file { read getattr lock ioctl };
	allow dhcpd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow dhcpd_t ld_so_t:file { read getattr lock execute ioctl };
	allow dhcpd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(dhcpd_t) depth: 1
 	
	allow dhcpd_t lib_t:dir { read getattr lock search ioctl };
	allow dhcpd_t lib_t:lnk_file { read getattr lock ioctl };
	allow dhcpd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow dhcpd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow dhcpd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t devlog_t:lnk_file read;
	allow dhcpd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow dhcpd_t syslogd_t:unix_dgram_socket sendto;
	allow dhcpd_t syslogd_t:unix_stream_socket connectto;
	allow dhcpd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow dhcpd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(dhcpd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpd_t) depth: 2
 	
	allow dhcpd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(dhcpd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(dhcpd_t) depth: 1
 	
	# FIXME: dhcpd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(dhcpd_t) depth: 1
 	
	allow dhcpd_t locale_t:dir { read getattr lock search ioctl };
	allow dhcpd_t locale_t:lnk_file { read getattr lock ioctl };
	allow dhcpd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(dhcpd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(dhcpd_t) depth: 3
 	
	
	


	allow dhcpd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(dhcpd_t) depth: 2
 	
	allow dhcpd_t lib_t:dir { read getattr lock search ioctl };
	allow dhcpd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(dhcpd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(dhcpd_t) depth: 1
 	
	allow dhcpd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin sysnet_read_dhcp_config(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(dhcpd_t) depth: 1
 	
	allow dhcpd_t dhcp_etc_t:dir search;
	allow dhcpd_t dhcp_etc_t:file { getattr read };

	 	 	 	
##### end sysnet_read_dhcp_config(dhcpd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(dhcpd_t) depth: 1
 	
	
	


	dontaudit dhcpd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(dhcpd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(dhcpd_t) depth: 1
 	
	
		
	


		dontaudit dhcpd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(dhcpd_t) depth: 0
 	




	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(dhcpd_t) depth: 1
 	
	
	


	dontaudit dhcpd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(dhcpd_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(dhcpd_t) depth: 1
 	
	
	


	dontaudit dhcpd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(dhcpd_t) depth: 0
 	
	 	 	 	 	
##### begin files_dontaudit_read_root_files(dhcpd_t) depth: 1
 	
	
	


	dontaudit dhcpd_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(dhcpd_t) depth: 0
 	



	
		
	# used for dynamic DNS
	 	 	 	 	
##### begin bind_read_dnssec_keys(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t { named_conf_t named_zone_t }:dir search;
	allow dhcpd_t dnssec_t:file { getattr read };

	 	 	 	
##### end bind_read_dnssec_keys(dhcpd_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin mount_send_nfs_client_request(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t mount_t:udp_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end mount_send_nfs_client_request(dhcpd_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(dhcpd_t) depth: 1
 	
	
	


	allow dhcpd_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(dhcpd_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(dhcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpd_t) depth: 2
 	
	
	


	allow dhcpd_t device_t:dir { read getattr lock search ioctl };
	allow dhcpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpd_t) depth: 1
 	
	allow dhcpd_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(dhcpd_t) depth: 0
 	

	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin init_system_domain(fsadm_t,fsadm_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(fsadm_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(fsadm_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute fsadm_t domain;

	# allow the domain to read its /proc/pid entries
	allow fsadm_t self:dir { read getattr lock search ioctl };
	allow fsadm_t self:lnk_file { read getattr lock ioctl };
	allow fsadm_t self:file { getattr read write append ioctl lock };

	# allow fsadm_t to create child processes in this domain
	allow fsadm_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types fsadm_t;
		role sysadm_r types fsadm_t;
		role user_r types fsadm_t;
		role staff_r types fsadm_t;
	

	 	 	 	
##### end domain_base_type(fsadm_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(fsadm_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 4
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 3
 	
	allow fsadm_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(fsadm_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t root_t:dir { read getattr lock search ioctl };
	allow fsadm_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(fsadm_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t init_t:process signull;

	 	 	 	
##### end init_signull(fsadm_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(fsadm_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(fsadm_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(fsadm_t) depth: 3
 	
	
	


	dontaudit fsadm_t security_t:dir search;
	dontaudit fsadm_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(fsadm_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(fsadm_t) depth: 3
 	
	
	


	dontaudit fsadm_t selinux_config_t:dir search;
	dontaudit fsadm_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(fsadm_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(fsadm_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(fsadm_t,fsadm_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(fsadm_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(fsadm_exec_t) depth: 4
 	
	
	


	allow fsadm_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(fsadm_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(fsadm_exec_t) depth: 4
 	
	
	


	allow fsadm_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(fsadm_exec_t) depth: 3
 	
	typeattribute fsadm_exec_t file_type;

	 	 	 	
##### end files_type(fsadm_exec_t) depth: 2
 	

	allow fsadm_t fsadm_exec_t:file entrypoint;
	allow fsadm_t fsadm_exec_t:file { read getattr lock execute ioctl };

	typeattribute fsadm_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(fsadm_t,fsadm_exec_t) depth: 1
 	

	role system_r types fsadm_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,fsadm_exec_t,fsadm_t) depth: 3
 	
	allow initrc_t fsadm_exec_t:file { getattr read execute };
	allow initrc_t fsadm_t:process transition;
	dontaudit initrc_t fsadm_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	type_transition initrc_t fsadm_exec_t:process fsadm_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,fsadm_exec_t,fsadm_t) depth: 1
 	

	allow initrc_t fsadm_t:fd use;
	allow fsadm_t initrc_t:fd use;
	allow fsadm_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow fsadm_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(fsadm_t,fsadm_exec_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_read_up(fsadm_t) depth: 1
 	
	
	


	typeattribute fsadm_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(fsadm_t) depth: 0
 	
role system_r types fsadm_t;

 	 	 	 	
##### begin files_tmp_file(fsadm_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(fsadm_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(fsadm_tmp_t) depth: 3
 	
	
	


	allow fsadm_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(fsadm_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(fsadm_tmp_t) depth: 3
 	
	
	


	allow fsadm_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(fsadm_tmp_t) depth: 2
 	
	typeattribute fsadm_tmp_t file_type;

	 	 	 	
##### end files_type(fsadm_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(fsadm_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(fsadm_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(fsadm_tmp_t) depth: 4
 	
	
	


	allow fsadm_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(fsadm_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(fsadm_tmp_t) depth: 4
 	
	
	


	allow fsadm_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(fsadm_tmp_t) depth: 3
 	
	typeattribute fsadm_tmp_t file_type;

	 	 	 	
##### end files_type(fsadm_tmp_t) depth: 2
 	
	typeattribute fsadm_tmp_t polymember;

	 	 	 	
##### end files_poly_member(fsadm_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(fsadm_tmp_t) depth: 2
 	
	
	


	allow fsadm_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(fsadm_tmp_t) depth: 1
 	
	typeattribute fsadm_tmp_t tmpfile;
	allow fsadm_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(fsadm_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_type(swapfile_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(swapfile_t) depth: 2
 	
	
	


	allow swapfile_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(swapfile_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(swapfile_t) depth: 2
 	
	
	


	allow swapfile_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(swapfile_t) depth: 1
 	
	typeattribute swapfile_t file_type;

	 	 	 	
##### end files_type(swapfile_t) depth: 0
 	

########################################
#
# local policy
#

# ipc_lock is for losetup
allow fsadm_t self:capability { ipc_lock sys_rawio sys_admin sys_tty_config dac_override dac_read_search };
allow fsadm_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execmem execheap };
allow fsadm_t self:fd use;
allow fsadm_t self:fifo_file { getattr read write append ioctl lock };
allow fsadm_t self:sock_file { read getattr lock ioctl };
allow fsadm_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow fsadm_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow fsadm_t self:unix_dgram_socket sendto;
allow fsadm_t self:unix_stream_socket connectto;
allow fsadm_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow fsadm_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow fsadm_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow fsadm_t self:msg { send receive };


	
	


	allow fsadm_t fsadm_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow fsadm_t fsadm_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow fsadm_t fsadm_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(fsadm_t,fsadm_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow fsadm_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition fsadm_t tmp_t:{ file dir } fsadm_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(fsadm_t,fsadm_tmp_t,{ file dir }) depth: 0
 	

# Enable swapping to files
allow fsadm_t swapfile_t:file { read write getattr swapon };

 	 	 	 	
##### begin kernel_read_system_state(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t proc_t:dir { read getattr lock search ioctl };
	allow fsadm_t proc_t:lnk_file { getattr read };
	allow fsadm_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t proc_t:dir search;
	allow fsadm_t sysctl_t:dir { read getattr lock search ioctl };
	allow fsadm_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow fsadm_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(fsadm_t) depth: 0
 	
# Allow console log change (updfstab)
 	 	 	 	
##### begin kernel_change_ring_buffer_level(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t kernel_t:system syslog_console;

	 	 	 	
##### end kernel_change_ring_buffer_level(fsadm_t) depth: 0
 	
# mkreiserfs needs this
 	 	 	 	
##### begin kernel_getattr_proc(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t proc_t:filesystem getattr;

	 	 	 	
##### end kernel_getattr_proc(fsadm_t) depth: 0
 	
# Access to /initrd devices
 	 	 	 	
##### begin kernel_rw_unlabeled_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t unlabeled_t:dir { read getattr lock search ioctl add_name remove_name write };

	 	 	 	
##### end kernel_rw_unlabeled_dirs(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rw_unlabeled_blk_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t unlabeled_t:blk_file getattr;

	 	 	 	
##### end kernel_rw_unlabeled_blk_files(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin files_getattr_boot_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t boot_t:dir getattr;

	 	 	 	
##### end files_getattr_boot_dirs(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin dev_getattr_all_chr_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_node:chr_file getattr;

	 	 	 	
##### end dev_getattr_all_chr_files(fsadm_t) depth: 0
 	
# mkreiserfs and other programs need this for UUID
 	 	 	 	
##### begin dev_read_rand(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_urand(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(fsadm_t) depth: 0
 	
# Recreate /dev/cdrom.
 	 	 	 	
##### begin dev_manage_generic_symlinks(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow fsadm_t device_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end dev_manage_generic_symlinks(fsadm_t) depth: 0
 	
# Access to /initrd devices
 	 	 	 	
##### begin dev_search_usbfs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t usbfs_t:dir search;

	 	 	 	
##### end dev_search_usbfs(fsadm_t) depth: 0
 	
# for swapon
 	 	 	 	
##### begin dev_read_sysfs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t sysfs_t:dir { read getattr lock search ioctl };
	allow fsadm_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(fsadm_t) depth: 0
 	
# Access to /initrd devices
 	 	 	 	
##### begin dev_getattr_usbfs_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t usbfs_t:dir getattr;

	 	 	 	
##### end dev_getattr_usbfs_dirs(fsadm_t) depth: 0
 	
# Access to /dev/mapper/control
 	 	 	 	
##### begin dev_rw_lvm_control(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t lvm_control_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_lvm_control(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin fs_getattr_xattr_fs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin fs_rw_ramfs_pipes(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t ramfs_t:fifo_file { getattr read write append ioctl lock };

	 	 	 	
##### end fs_rw_ramfs_pipes(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin fs_rw_tmpfs_files(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_search_tmpfs(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t tmpfs_t:dir search;

	 	 	 	
##### end fs_search_tmpfs(fsadm_t) depth: 1
 	
	allow fsadm_t tmpfs_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end fs_rw_tmpfs_files(fsadm_t) depth: 0
 	
# remount file system to apply changes
 	 	 	 	
##### begin fs_remount_xattr_fs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t fs_t:filesystem remount;

	 	 	 	
##### end fs_remount_xattr_fs(fsadm_t) depth: 0
 	
# for /dev/shm
 	 	 	 	
##### begin fs_search_tmpfs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t tmpfs_t:dir search;

	 	 	 	
##### end fs_search_tmpfs(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin fs_getattr_tmpfs_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t tmpfs_t:dir getattr;

	 	 	 	
##### end fs_getattr_tmpfs_dirs(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin fs_read_tmpfs_symlinks(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_search_tmpfs(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t tmpfs_t:dir search;

	 	 	 	
##### end fs_search_tmpfs(fsadm_t) depth: 1
 	
	allow fsadm_t tmpfs_t:lnk_file read;

	 	 	 	
##### end fs_read_tmpfs_symlinks(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_write_down(fsadm_t) depth: 1
 	
	
	


	typeattribute fsadm_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin storage_raw_read_fixed_disk(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t fixed_disk_device_t:chr_file { read getattr lock ioctl };
	#ifdef(`distro_sebsd', `
	#	allow fsadm_t fixed_disk_device_t:chr_file r_file_perms;
	#')
	typeattribute fsadm_t fixed_disk_raw_read;

	 	 	 	
##### end storage_raw_read_fixed_disk(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin storage_raw_write_fixed_disk(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t fixed_disk_device_t:blk_file { getattr write append ioctl };
	typeattribute fsadm_t fixed_disk_raw_write;

	 	 	 	
##### end storage_raw_write_fixed_disk(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin storage_raw_read_removable_device(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t removable_device_t:blk_file { read getattr lock ioctl };

	 	 	 	
##### end storage_raw_read_removable_device(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin storage_raw_write_removable_device(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t removable_device_t:blk_file { getattr write ioctl };

	 	 	 	
##### end storage_raw_write_removable_device(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin storage_read_scsi_generic(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t scsi_generic_device_t:chr_file { read getattr lock ioctl };
	typeattribute fsadm_t scsi_generic_read;

	 	 	 	
##### end storage_read_scsi_generic(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin storage_swapon_fixed_disk(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t fixed_disk_device_t:blk_file { getattr swapon };

	 	 	 	
##### end storage_swapon_fixed_disk(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_list_bin(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_list_sbin(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_symlinks(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t bin_t:dir search;
	allow fsadm_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_symlinks(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t sbin_t:dir search;
	allow fsadm_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(fsadm_t) depth: 0
 	
# cjp: these are probably not needed:
 	 	 	 	
##### begin corecmd_read_bin_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t bin_t:dir search;
	allow fsadm_t bin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_files(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_pipes(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t bin_t:dir search;
	allow fsadm_t bin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_pipes(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_sockets(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t bin_t:dir search;
	allow fsadm_t bin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_sockets(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t sbin_t:dir search;
	allow fsadm_t sbin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_files(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_pipes(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t sbin_t:dir search;
	allow fsadm_t sbin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_pipes(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_sockets(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t sbin_t:dir search;
	allow fsadm_t sbin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_sockets(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin files_list_home(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t usr_t:dir { read getattr lock search ioctl };
	allow fsadm_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t etc_t:dir { read getattr lock search ioctl };
	allow fsadm_t etc_t:file { read getattr lock ioctl };
	allow fsadm_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_lost_found(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t lost_found_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow fsadm_t lost_found_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow fsadm_t lost_found_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow fsadm_t lost_found_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow fsadm_t lost_found_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end files_manage_lost_found(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_isid_type_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t file_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };

	 	 	 	
##### end files_manage_isid_type_dirs(fsadm_t) depth: 0
 	
# Write to /etc/mtab.
 	 	 	 	
##### begin files_manage_etc_runtime_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow fsadm_t etc_runtime_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	type_transition fsadm_t etc_t:file etc_runtime_t;

	 	 	 	
##### end files_manage_etc_runtime_files(fsadm_t) depth: 0
 	
# Access to /initrd devices
 	 	 	 	
##### begin files_rw_isid_type_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t file_t:dir { read getattr lock search ioctl add_name remove_name write };

	 	 	 	
##### end files_rw_isid_type_dirs(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin files_rw_isid_type_blk_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t file_t:dir search;
	allow fsadm_t file_t:blk_file { getattr read write append ioctl lock };

	 	 	 	
##### end files_rw_isid_type_blk_files(fsadm_t) depth: 0
 	
# Recreate /mnt/cdrom.
 	 	 	 	
##### begin files_manage_mnt_dirs(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t mnt_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };

	 	 	 	
##### end files_manage_mnt_dirs(fsadm_t) depth: 0
 	
# for tune2fs
 	 	 	 	
##### begin files_search_all(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t file_type:dir search;

	 	 	 	
##### end files_search_all(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t init_t:fd use;

	 	 	 	
##### end init_use_fds(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(fsadm_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	allow fsadm_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(fsadm_t) depth: 1
 	
	allow fsadm_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(fsadm_t) depth: 1
 	
	allow fsadm_t lib_t:dir { read getattr lock search ioctl };
	allow fsadm_t lib_t:lnk_file { read getattr lock ioctl };
	allow fsadm_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow fsadm_t ld_so_t:file { read getattr lock execute ioctl };
	allow fsadm_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(fsadm_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(fsadm_t) depth: 1
 	
	allow fsadm_t lib_t:dir { read getattr lock search ioctl };
	allow fsadm_t lib_t:lnk_file { read getattr lock ioctl };
	allow fsadm_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow fsadm_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow fsadm_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t devlog_t:lnk_file read;
	allow fsadm_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow fsadm_t syslogd_t:unix_dgram_socket sendto;
	allow fsadm_t syslogd_t:unix_stream_socket connectto;
	allow fsadm_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow fsadm_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(fsadm_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	allow fsadm_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(fsadm_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(fsadm_t) depth: 1
 	
	# FIXME: fsadm_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(fsadm_t) depth: 1
 	
	allow fsadm_t locale_t:dir { read getattr lock search ioctl };
	allow fsadm_t locale_t:lnk_file { read getattr lock ioctl };
	allow fsadm_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(fsadm_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(fsadm_t) depth: 3
 	
	
	


	allow fsadm_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(fsadm_t) depth: 2
 	
	allow fsadm_t lib_t:dir { read getattr lock search ioctl };
	allow fsadm_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(fsadm_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin modutils_read_module_config(fsadm_t) depth: 1
 	
	
	


	# This file type can be in /etc or
	# /lib(64)?/modules
	 	 	 	 	
##### begin files_search_etc(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(fsadm_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_boot(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t boot_t:dir { getattr search };

	 	 	 	
##### end files_search_boot(fsadm_t) depth: 1
 	

	allow fsadm_t modules_conf_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end modutils_read_module_config(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(fsadm_t) depth: 1
 	
	allow fsadm_t selinux_config_t:dir { read getattr lock search ioctl };
	allow fsadm_t selinux_config_t:file { read getattr lock ioctl };
	allow fsadm_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(fsadm_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(fsadm_t) depth: 0
 	


	 	 	 	 	
##### begin term_use_unallocated_ttys(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(fsadm_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_generic_ptys(fsadm_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(fsadm_t) depth: 2
 	
	
	


	allow fsadm_t device_t:dir { read getattr lock search ioctl };
	allow fsadm_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(fsadm_t) depth: 1
 	
	allow fsadm_t devpts_t:dir { getattr search read lock ioctl };
	allow fsadm_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(fsadm_t) depth: 0
 	



	
		if (read_default_t) {
			
	 	 	 	 	
##### begin files_list_default(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t default_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_default(fsadm_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_files(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t default_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_files(fsadm_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_symlinks(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t default_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_symlinks(fsadm_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_sockets(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t default_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_sockets(fsadm_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_pipes(fsadm_t) depth: 1
 	
	
	


	allow fsadm_t default_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_pipes(fsadm_t) depth: 0
 	

		
		}
	



	
		
	



	
		
	# for smartctl cron jobs
	 	 	 	 	
##### begin cron_system_entry(fsadm_t,fsadm_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(system_crond_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(system_crond_t,fsadm_exec_t,fsadm_t) depth: 3
 	
	allow system_crond_t fsadm_exec_t:file { getattr read execute };
	allow system_crond_t fsadm_t:process transition;
	dontaudit system_crond_t fsadm_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(system_crond_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	type_transition system_crond_t fsadm_exec_t:process fsadm_t;
 	 	 	 	
##### end domain_auto_trans(system_crond_t,fsadm_exec_t,fsadm_t) depth: 1
 	

	# cjp: perhaps these four rules from the old
	# domain_auto_trans are not needed?
	allow system_crond_t fsadm_t:fd use;
	allow fsadm_t system_crond_t:fd use;
	allow fsadm_t system_crond_t:fifo_file { getattr read write append ioctl lock };
	allow fsadm_t system_crond_t:process sigchld;

	allow fsadm_t crond_t:fifo_file { getattr read write append ioctl lock };
	allow fsadm_t crond_t:fd use;
	allow fsadm_t crond_t:process sigchld;

	 	 	 	
##### end cron_system_entry(fsadm_t,fsadm_exec_t) depth: 0
 	

	



	
		
	



	


########################################
#
# Declarations
#

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin init_domain(getty_t,getty_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(getty_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(getty_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute getty_t domain;

	# allow the domain to read its /proc/pid entries
	allow getty_t self:dir { read getattr lock search ioctl };
	allow getty_t self:lnk_file { read getattr lock ioctl };
	allow getty_t self:file { getattr read write append ioctl lock };

	# allow getty_t to create child processes in this domain
	allow getty_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types getty_t;
		role sysadm_r types getty_t;
		role user_r types getty_t;
		role staff_r types getty_t;
	

	 	 	 	
##### end domain_base_type(getty_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(getty_t) depth: 3
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(getty_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(getty_t) depth: 3
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(getty_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(getty_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 4
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 3
 	
	allow getty_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(getty_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(getty_t) depth: 3
 	
	
	


	allow getty_t root_t:dir { read getattr lock search ioctl };
	allow getty_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(getty_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(getty_t) depth: 3
 	
	
	


	allow getty_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(getty_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(getty_t) depth: 3
 	
	
	


	allow getty_t init_t:process signull;

	 	 	 	
##### end init_signull(getty_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(getty_t) depth: 3
 	
	
	


	allow getty_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(getty_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(getty_t) depth: 3
 	
	
	


	allow getty_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(getty_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(getty_t) depth: 3
 	
	
	


	dontaudit getty_t security_t:dir search;
	dontaudit getty_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(getty_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(getty_t) depth: 3
 	
	
	


	dontaudit getty_t selinux_config_t:dir search;
	dontaudit getty_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(getty_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(getty_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(getty_t,getty_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(getty_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_exec_t) depth: 4
 	
	
	


	allow getty_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_exec_t) depth: 4
 	
	
	


	allow getty_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_exec_t) depth: 3
 	
	typeattribute getty_exec_t file_type;

	 	 	 	
##### end files_type(getty_exec_t) depth: 2
 	

	allow getty_t getty_exec_t:file entrypoint;
	allow getty_t getty_exec_t:file { read getattr lock execute ioctl };

	typeattribute getty_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(getty_t,getty_exec_t) depth: 1
 	

	role system_r types getty_t;

	 	 	 	 	
##### begin domain_auto_trans(init_t,getty_exec_t,getty_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(init_t,getty_exec_t,getty_t) depth: 3
 	
	allow init_t getty_exec_t:file { getattr read execute };
	allow init_t getty_t:process transition;
	dontaudit init_t getty_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(init_t,getty_exec_t,getty_t) depth: 2
 	
	type_transition init_t getty_exec_t:process getty_t;
 	 	 	 	
##### end domain_auto_trans(init_t,getty_exec_t,getty_t) depth: 1
 	

	allow getty_t init_t:fd use;
	allow init_t getty_t:fd use;
	allow getty_t init_t:fifo_file { getattr read write append ioctl lock };
	allow getty_t init_t:process sigchld;

	 	 	 	
##### end init_domain(getty_t,getty_exec_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(getty_t) depth: 1
 	
	
	


	typeattribute getty_t privfd;

	 	 	 	
##### end domain_interactive_fd(getty_t) depth: 0
 	

typealias getty_etc_t alias etc_getty_t;
 	 	 	 	
##### begin files_config_file(getty_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(getty_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_etc_t) depth: 3
 	
	
	


	allow getty_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_etc_t) depth: 3
 	
	
	


	allow getty_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_etc_t) depth: 2
 	
	typeattribute getty_etc_t file_type;

	 	 	 	
##### end files_type(getty_etc_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute getty_etc_t usercanread;

	 	 	 	
##### end files_config_file(getty_etc_t) depth: 0
 	

 	 	 	 	
##### begin files_lock_file(getty_lock_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(getty_lock_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_lock_t) depth: 3
 	
	
	


	allow getty_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_lock_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_lock_t) depth: 3
 	
	
	


	allow getty_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_lock_t) depth: 2
 	
	typeattribute getty_lock_t file_type;

	 	 	 	
##### end files_type(getty_lock_t) depth: 1
 	
	typeattribute getty_lock_t lockfile;

	 	 	 	
##### end files_lock_file(getty_lock_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(getty_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(getty_log_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_log_t) depth: 3
 	
	
	


	allow getty_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_log_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_log_t) depth: 3
 	
	
	


	allow getty_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_log_t) depth: 2
 	
	typeattribute getty_log_t file_type;

	 	 	 	
##### end files_type(getty_log_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(getty_log_t) depth: 2
 	
	
	


	allow getty_log_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(getty_log_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(getty_log_t) depth: 2
 	
	
	


	allow getty_log_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(getty_log_t) depth: 1
 	
	typeattribute getty_log_t logfile;

	 	 	 	
##### end logging_log_file(getty_log_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(getty_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(getty_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_tmp_t) depth: 3
 	
	
	


	allow getty_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_tmp_t) depth: 3
 	
	
	


	allow getty_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_tmp_t) depth: 2
 	
	typeattribute getty_tmp_t file_type;

	 	 	 	
##### end files_type(getty_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(getty_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(getty_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_tmp_t) depth: 4
 	
	
	


	allow getty_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_tmp_t) depth: 4
 	
	
	


	allow getty_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_tmp_t) depth: 3
 	
	typeattribute getty_tmp_t file_type;

	 	 	 	
##### end files_type(getty_tmp_t) depth: 2
 	
	typeattribute getty_tmp_t polymember;

	 	 	 	
##### end files_poly_member(getty_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(getty_tmp_t) depth: 2
 	
	
	


	allow getty_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(getty_tmp_t) depth: 1
 	
	typeattribute getty_tmp_t tmpfile;
	allow getty_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(getty_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(getty_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(getty_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(getty_var_run_t) depth: 3
 	
	
	


	allow getty_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(getty_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(getty_var_run_t) depth: 3
 	
	
	


	allow getty_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(getty_var_run_t) depth: 2
 	
	typeattribute getty_var_run_t file_type;

	 	 	 	
##### end files_type(getty_var_run_t) depth: 1
 	
	typeattribute getty_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(getty_var_run_t) depth: 0
 	

########################################
#
# Getty local policy
#

# Use capabilities.
allow getty_t self:capability { dac_override chown sys_resource sys_tty_config fowner fsetid };
dontaudit getty_t self:capability sys_tty_config;
allow getty_t self:process { getpgid getsession { sigchld sigkill sigstop signull signal } };

allow getty_t getty_etc_t:dir { read getattr lock search ioctl };
allow getty_t getty_etc_t:file { read getattr lock ioctl };
allow getty_t getty_etc_t:lnk_file { getattr read };
 	 	 	 	
##### begin files_etc_filetrans(getty_t,getty_etc_t,{ file dir }) depth: 1
 	
	
	


	allow getty_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition getty_t etc_t:{ file dir } getty_etc_t;

	 	 	 	
##### end files_etc_filetrans(getty_t,getty_etc_t,{ file dir }) depth: 0
 	

allow getty_t getty_lock_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_lock_filetrans(getty_t,getty_lock_t,file) depth: 1
 	
	
	


	allow getty_t var_t:dir search;
	allow getty_t var_lock_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition getty_t var_lock_t:file getty_lock_t;

	 	 	 	
##### end files_lock_filetrans(getty_t,getty_lock_t,file) depth: 0
 	

allow getty_t getty_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin logging_log_filetrans(getty_t,getty_log_t,file) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(getty_t) depth: 2
 	
	
	


	allow getty_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(getty_t) depth: 1
 	
	allow getty_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition getty_t var_log_t:file getty_log_t;

	 	 	 	
##### end logging_log_filetrans(getty_t,getty_log_t,file) depth: 0
 	

allow getty_t getty_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow getty_t getty_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
 	 	 	 	
##### begin files_tmp_filetrans(getty_t,getty_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow getty_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition getty_t tmp_t:{ file dir } getty_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(getty_t,getty_tmp_t,{ file dir }) depth: 0
 	

allow getty_t getty_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow getty_t getty_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(getty_t,getty_var_run_t,file) depth: 1
 	
	
	


	allow getty_t var_t:dir { getattr search };
	allow getty_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition getty_t var_run_t:file getty_var_run_t;

	 	 	 	
##### end files_pid_filetrans(getty_t,getty_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_list_proc(getty_t) depth: 1
 	
	
	


	allow getty_t proc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_proc(getty_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(getty_t) depth: 1
 	
	
	


	allow getty_t proc_t:dir search;
	allow getty_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(getty_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(getty_t) depth: 1
 	
	
	


	allow getty_t sysfs_t:dir { read getattr lock search ioctl };
	allow getty_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(getty_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(getty_t) depth: 1
 	
	
	


	allow getty_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(getty_t) depth: 0
 	
# for error condition handling
 	 	 	 	
##### begin fs_getattr_xattr_fs(getty_t) depth: 1
 	
	
	


	allow getty_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(getty_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(getty_t) depth: 1
 	
	
	


	typeattribute getty_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(getty_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(getty_t) depth: 1
 	
	
	


	typeattribute getty_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(getty_t) depth: 0
 	

# Chown, chmod, read and write ttys.
 	 	 	 	
##### begin term_use_all_user_ttys(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 2
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 1
 	
	allow getty_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(getty_t) depth: 0
 	
 	 	 	 	
##### begin term_use_unallocated_ttys(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 2
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 1
 	
	allow getty_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(getty_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_all_user_ttys(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 2
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 1
 	
	allow getty_t ttynode:chr_file setattr;

	 	 	 	
##### end term_setattr_all_user_ttys(getty_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_unallocated_ttys(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 2
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 1
 	
	allow getty_t tty_device_t:chr_file setattr;

	 	 	 	
##### end term_setattr_unallocated_ttys(getty_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_console(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 2
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 1
 	
	allow getty_t console_device_t:chr_file setattr;

	 	 	 	
##### end term_setattr_console(getty_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_console(getty_t) depth: 1
 	
	
	


	dontaudit getty_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(getty_t) depth: 0
 	

 	 	 	 	
##### begin auth_rw_login_records(getty_t) depth: 1
 	
	
	


	allow getty_t wtmp_t:file { getattr read write append ioctl lock };
	 	 	 	 	
##### begin logging_search_logs(getty_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(getty_t) depth: 3
 	
	
	


	allow getty_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(getty_t) depth: 2
 	
	allow getty_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(getty_t) depth: 1
 	

	 	 	 	
##### end auth_rw_login_records(getty_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_search_bin(getty_t) depth: 1
 	
	
	


	allow getty_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(getty_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_search_sbin(getty_t) depth: 1
 	
	
	


	allow getty_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(getty_t) depth: 0
 	

 	 	 	 	
##### begin files_rw_generic_pids(getty_t) depth: 1
 	
	
	


	allow getty_t var_t:dir search;
	allow getty_t var_run_t:dir { read getattr lock search ioctl };
	allow getty_t var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end files_rw_generic_pids(getty_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(getty_t) depth: 1
 	
	
	


	allow getty_t etc_t:dir { read getattr lock search ioctl };
	allow getty_t etc_runtime_t:file { read getattr lock ioctl };
	allow getty_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(getty_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(getty_t) depth: 1
 	
	
	


	allow getty_t etc_t:dir { read getattr lock search ioctl };
	allow getty_t etc_t:file { read getattr lock ioctl };
	allow getty_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(getty_t) depth: 0
 	

 	 	 	 	
##### begin init_rw_utmp(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(getty_t) depth: 2
 	
	
	


	allow getty_t var_t:dir { getattr search };
	allow getty_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(getty_t) depth: 1
 	
	allow getty_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(getty_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(getty_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 3
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 2
 	
	allow getty_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(getty_t) depth: 1
 	
	allow getty_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(getty_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_use_script_ptys(getty_t) depth: 1
 	
	
	


	dontaudit getty_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_dontaudit_use_script_ptys(getty_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(getty_t) depth: 2
 	
	
	


	allow getty_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(getty_t) depth: 1
 	
	allow getty_t lib_t:dir { read getattr lock search ioctl };
	allow getty_t lib_t:lnk_file { read getattr lock ioctl };
	allow getty_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow getty_t ld_so_t:file { read getattr lock execute ioctl };
	allow getty_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(getty_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(getty_t) depth: 2
 	
	
	


	allow getty_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(getty_t) depth: 1
 	
	allow getty_t lib_t:dir { read getattr lock search ioctl };
	allow getty_t lib_t:lnk_file { read getattr lock ioctl };
	allow getty_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow getty_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow getty_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(getty_t) depth: 0
 	

 	 	 	 	
##### begin locallogin_domtrans(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin auth_domtrans_login_program(getty_t,local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_search_bin(getty_t) depth: 3
 	
	
	


	allow getty_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(getty_t) depth: 2
 	
	 	 	 	 	
##### begin domain_auto_trans(getty_t,login_exec_t,local_login_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(getty_t,login_exec_t,local_login_t) depth: 4
 	
	allow getty_t login_exec_t:file { getattr read execute };
	allow getty_t local_login_t:process transition;
	dontaudit getty_t local_login_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(getty_t,login_exec_t,local_login_t) depth: 3
 	
	type_transition getty_t login_exec_t:process local_login_t;
 	 	 	 	
##### end domain_auto_trans(getty_t,login_exec_t,local_login_t) depth: 2
 	

	allow getty_t local_login_t:fd use;
	allow local_login_t getty_t:fd use;
	allow local_login_t getty_t:fifo_file { getattr read write append ioctl lock };
	allow local_login_t getty_t:process sigchld;

	 	 	 	
##### end auth_domtrans_login_program(getty_t,local_login_t) depth: 1
 	

	 	 	 	
##### end locallogin_domtrans(getty_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(getty_t) depth: 1
 	
	
	


	allow getty_t devlog_t:lnk_file read;
	allow getty_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow getty_t syslogd_t:unix_dgram_socket sendto;
	allow getty_t syslogd_t:unix_stream_socket connectto;
	allow getty_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow getty_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(getty_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 3
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 2
 	
	allow getty_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(getty_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(getty_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(getty_t) depth: 2
 	
	
	


	allow getty_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(getty_t) depth: 1
 	
	# FIXME: getty_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(getty_t) depth: 2
 	
	
	


	allow getty_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(getty_t) depth: 1
 	
	allow getty_t locale_t:dir { read getattr lock search ioctl };
	allow getty_t locale_t:lnk_file { read getattr lock ioctl };
	allow getty_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(getty_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(getty_t) depth: 3
 	
	
	


	allow getty_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(getty_t) depth: 2
 	
	allow getty_t lib_t:dir { read getattr lock search ioctl };
	allow getty_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(getty_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(getty_t) depth: 0
 	


	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(getty_t) depth: 1
 	
	
	


	dontaudit getty_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(getty_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(getty_t) depth: 1
 	
	
	


	dontaudit getty_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(getty_t) depth: 0
 	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin udev_read_db(getty_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(getty_t) depth: 2
 	
	
	


	allow getty_t device_t:dir { read getattr lock search ioctl };
	allow getty_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(getty_t) depth: 1
 	
	allow getty_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(getty_t) depth: 0
 	

	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin init_system_domain(hostname_t,hostname_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(hostname_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(hostname_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute hostname_t domain;

	# allow the domain to read its /proc/pid entries
	allow hostname_t self:dir { read getattr lock search ioctl };
	allow hostname_t self:lnk_file { read getattr lock ioctl };
	allow hostname_t self:file { getattr read write append ioctl lock };

	# allow hostname_t to create child processes in this domain
	allow hostname_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types hostname_t;
		role sysadm_r types hostname_t;
		role user_r types hostname_t;
		role staff_r types hostname_t;
	

	 	 	 	
##### end domain_base_type(hostname_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(hostname_t) depth: 3
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(hostname_t) depth: 3
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(hostname_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(hostname_t) depth: 4
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(hostname_t) depth: 3
 	
	allow hostname_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(hostname_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(hostname_t) depth: 3
 	
	
	


	allow hostname_t root_t:dir { read getattr lock search ioctl };
	allow hostname_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(hostname_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(hostname_t) depth: 3
 	
	
	


	allow hostname_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(hostname_t) depth: 3
 	
	
	


	allow hostname_t init_t:process signull;

	 	 	 	
##### end init_signull(hostname_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(hostname_t) depth: 3
 	
	
	


	allow hostname_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(hostname_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(hostname_t) depth: 3
 	
	
	


	allow hostname_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(hostname_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(hostname_t) depth: 3
 	
	
	


	dontaudit hostname_t security_t:dir search;
	dontaudit hostname_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(hostname_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(hostname_t) depth: 3
 	
	
	


	dontaudit hostname_t selinux_config_t:dir search;
	dontaudit hostname_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(hostname_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(hostname_t,hostname_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(hostname_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(hostname_exec_t) depth: 4
 	
	
	


	allow hostname_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(hostname_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(hostname_exec_t) depth: 4
 	
	
	


	allow hostname_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(hostname_exec_t) depth: 3
 	
	typeattribute hostname_exec_t file_type;

	 	 	 	
##### end files_type(hostname_exec_t) depth: 2
 	

	allow hostname_t hostname_exec_t:file entrypoint;
	allow hostname_t hostname_exec_t:file { read getattr lock execute ioctl };

	typeattribute hostname_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(hostname_t,hostname_exec_t) depth: 1
 	

	role system_r types hostname_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,hostname_exec_t,hostname_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,hostname_exec_t,hostname_t) depth: 3
 	
	allow initrc_t hostname_exec_t:file { getattr read execute };
	allow initrc_t hostname_t:process transition;
	dontaudit initrc_t hostname_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,hostname_exec_t,hostname_t) depth: 2
 	
	type_transition initrc_t hostname_exec_t:process hostname_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,hostname_exec_t,hostname_t) depth: 1
 	

	allow initrc_t hostname_t:fd use;
	allow hostname_t initrc_t:fd use;
	allow hostname_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow hostname_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(hostname_t,hostname_exec_t) depth: 0
 	
role system_r types hostname_t;

########################################
#
# Local policy
#

# for setting the hostname
allow hostname_t self:process { sigchld sigkill sigstop signull signal };
allow hostname_t self:capability sys_admin;
allow hostname_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
dontaudit hostname_t self:capability sys_tty_config;

 	 	 	 	
##### begin kernel_list_proc(hostname_t) depth: 1
 	
	
	


	allow hostname_t proc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_proc(hostname_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(hostname_t) depth: 1
 	
	
	


	allow hostname_t proc_t:dir search;
	allow hostname_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(hostname_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(hostname_t) depth: 1
 	
	
	


	allow hostname_t sysfs_t:dir { read getattr lock search ioctl };
	allow hostname_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(hostname_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(hostname_t) depth: 1
 	
	
	


	allow hostname_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(hostname_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(hostname_t) depth: 1
 	
	
	


	allow hostname_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(hostname_t) depth: 0
 	
 	 	 	 	
##### begin fs_dontaudit_use_tmpfs_chr_dev(hostname_t) depth: 1
 	
	
	


	dontaudit hostname_t tmpfs_t:dir { read getattr lock search ioctl };
	dontaudit hostname_t tmpfs_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end fs_dontaudit_use_tmpfs_chr_dev(hostname_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(hostname_t) depth: 1
 	
	
	


	dontaudit hostname_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(hostname_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ttys(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(hostname_t) depth: 2
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(hostname_t) depth: 1
 	
	allow hostname_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(hostname_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(hostname_t) depth: 2
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(hostname_t) depth: 1
 	
	allow hostname_t devpts_t:dir { read getattr lock search ioctl };
	allow hostname_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(hostname_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(hostname_t) depth: 1
 	
	
	


	allow hostname_t init_t:fd use;

	 	 	 	
##### end init_use_fds(hostname_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_fds(hostname_t) depth: 1
 	
	
	


	allow hostname_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(hostname_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(hostname_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(hostname_t) depth: 3
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(hostname_t) depth: 2
 	
	allow hostname_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(hostname_t) depth: 1
 	
	allow hostname_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(hostname_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(hostname_t) depth: 1
 	
	
	


	allow hostname_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(hostname_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(hostname_t) depth: 1
 	
	
	


	allow hostname_t etc_t:dir { read getattr lock search ioctl };
	allow hostname_t etc_t:file { read getattr lock ioctl };
	allow hostname_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(hostname_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_var(hostname_t) depth: 1
 	
	
	


	dontaudit hostname_t var_t:dir search;

	 	 	 	
##### end files_dontaudit_search_var(hostname_t) depth: 0
 	
# for when /usr is not mounted:
 	 	 	 	
##### begin files_dontaudit_search_isid_type_dirs(hostname_t) depth: 1
 	
	
	


	dontaudit hostname_t file_t:dir { getattr search };

	 	 	 	
##### end files_dontaudit_search_isid_type_dirs(hostname_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(hostname_t) depth: 2
 	
	
	


	allow hostname_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(hostname_t) depth: 1
 	
	allow hostname_t lib_t:dir { read getattr lock search ioctl };
	allow hostname_t lib_t:lnk_file { read getattr lock ioctl };
	allow hostname_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow hostname_t ld_so_t:file { read getattr lock execute ioctl };
	allow hostname_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(hostname_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(hostname_t) depth: 2
 	
	
	


	allow hostname_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(hostname_t) depth: 1
 	
	allow hostname_t lib_t:dir { read getattr lock search ioctl };
	allow hostname_t lib_t:lnk_file { read getattr lock ioctl };
	allow hostname_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow hostname_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow hostname_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(hostname_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(hostname_t) depth: 1
 	
	
	


	allow hostname_t devlog_t:lnk_file read;
	allow hostname_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow hostname_t syslogd_t:unix_dgram_socket sendto;
	allow hostname_t syslogd_t:unix_stream_socket connectto;
	allow hostname_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow hostname_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(hostname_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(hostname_t) depth: 3
 	
	
	


	allow hostname_t device_t:dir { read getattr lock search ioctl };
	allow hostname_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(hostname_t) depth: 2
 	
	allow hostname_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(hostname_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(hostname_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(hostname_t) depth: 2
 	
	
	


	allow hostname_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(hostname_t) depth: 1
 	
	# FIXME: hostname_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(hostname_t) depth: 2
 	
	
	


	allow hostname_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(hostname_t) depth: 1
 	
	allow hostname_t locale_t:dir { read getattr lock search ioctl };
	allow hostname_t locale_t:lnk_file { read getattr lock ioctl };
	allow hostname_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(hostname_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(hostname_t) depth: 3
 	
	
	


	allow hostname_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(hostname_t) depth: 2
 	
	allow hostname_t lib_t:dir { read getattr lock search ioctl };
	allow hostname_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(hostname_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(hostname_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(hostname_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(hostname_t) depth: 2
 	
	
	


	allow hostname_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(hostname_t) depth: 1
 	
	allow hostname_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(hostname_t) depth: 0
 	
 	 	 	 	
##### begin sysnet_dns_name_resolve(hostname_t) depth: 1
 	
	
	


	allow hostname_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow hostname_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(hostname_t) depth: 2
 	
	
	


	allow hostname_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(hostname_t) depth: 3
 	
	
	


	allow hostname_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(hostname_t) depth: 3
 	
	
	


	allow hostname_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(hostname_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(hostname_t) depth: 3
 	
	
	


	allow hostname_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow hostname_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(hostname_t) depth: 3
 	
	
	


	allow hostname_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(hostname_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(hostname_t) depth: 2
 	
	
	


	allow hostname_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(hostname_t) depth: 3
 	
	
	


	allow hostname_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(hostname_t) depth: 3
 	
	
	


	allow hostname_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(hostname_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(hostname_t) depth: 3
 	
	
	


	allow hostname_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(hostname_t) depth: 3
 	
	
	


	allow hostname_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(hostname_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(hostname_t) depth: 2
 	
	
	


	allow hostname_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(hostname_t) depth: 3
 	
	
	


	allow hostname_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(hostname_t) depth: 3
 	
	
	


	allow hostname_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(hostname_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(hostname_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(hostname_t) depth: 3
 	
	
	


	allow hostname_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(hostname_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(hostname_t) depth: 2
 	
	
	


	allow hostname_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(hostname_t) depth: 2
 	
	
	


	allow hostname_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(hostname_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(hostname_t) depth: 2
 	
	
	


	allow hostname_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(hostname_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(hostname_t) depth: 2
 	
	
	


	allow hostname_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(hostname_t) depth: 1
 	
	allow hostname_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(hostname_t) depth: 0
 	






	


########################################
#
# Declarations
#

 	 	 	 	
##### begin init_daemon_domain(inetd_t,inetd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(inetd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(inetd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute inetd_t domain;

	# allow the domain to read its /proc/pid entries
	allow inetd_t self:dir { read getattr lock search ioctl };
	allow inetd_t self:lnk_file { read getattr lock ioctl };
	allow inetd_t self:file { getattr read write append ioctl lock };

	# allow inetd_t to create child processes in this domain
	allow inetd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types inetd_t;
		role sysadm_r types inetd_t;
		role user_r types inetd_t;
		role staff_r types inetd_t;
	

	 	 	 	
##### end domain_base_type(inetd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(inetd_t) depth: 3
 	
	
	


	allow inetd_t device_t:dir { read getattr lock search ioctl };
	allow inetd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(inetd_t) depth: 3
 	
	
	


	allow inetd_t device_t:dir { read getattr lock search ioctl };
	allow inetd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(inetd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(inetd_t) depth: 4
 	
	
	


	allow inetd_t device_t:dir { read getattr lock search ioctl };
	allow inetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(inetd_t) depth: 3
 	
	allow inetd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(inetd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(inetd_t) depth: 3
 	
	
	


	allow inetd_t root_t:dir { read getattr lock search ioctl };
	allow inetd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(inetd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(inetd_t) depth: 3
 	
	
	


	allow inetd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(inetd_t) depth: 3
 	
	
	


	allow inetd_t init_t:process signull;

	 	 	 	
##### end init_signull(inetd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(inetd_t) depth: 3
 	
	
	


	allow inetd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(inetd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(inetd_t) depth: 3
 	
	
	


	allow inetd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(inetd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(inetd_t) depth: 3
 	
	
	


	dontaudit inetd_t security_t:dir search;
	dontaudit inetd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(inetd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(inetd_t) depth: 3
 	
	
	


	dontaudit inetd_t selinux_config_t:dir search;
	dontaudit inetd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(inetd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(inetd_t,inetd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_exec_t) depth: 4
 	
	
	


	allow inetd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_exec_t) depth: 4
 	
	
	


	allow inetd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_exec_t) depth: 3
 	
	typeattribute inetd_exec_t file_type;

	 	 	 	
##### end files_type(inetd_exec_t) depth: 2
 	

	allow inetd_t inetd_exec_t:file entrypoint;
	allow inetd_t inetd_exec_t:file { read getattr lock execute ioctl };

	typeattribute inetd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(inetd_t,inetd_exec_t) depth: 1
 	

	role system_r types inetd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool inetd_disable_trans false;
			
		
		if(inetd_disable_trans ) {
			
	
	


	allow initrc_t inetd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init inetd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,inetd_exec_t,inetd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,inetd_exec_t,inetd_t) depth: 3
 	
	allow initrc_t inetd_exec_t:file { getattr read execute };
	allow initrc_t inetd_t:process transition;
	dontaudit initrc_t inetd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,inetd_exec_t,inetd_t) depth: 2
 	
	type_transition initrc_t inetd_exec_t:process inetd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,inetd_exec_t,inetd_t) depth: 1
 	
			allow initrc_t inetd_t:fd use;
			allow inetd_t initrc_t:fd use;
			allow inetd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow inetd_t initrc_t:process sigchld;
			allow initrc_t inetd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow inetd_t inetd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(inetd_t,inetd_exec_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(inetd_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_log_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_log_t) depth: 3
 	
	
	


	allow inetd_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_log_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_log_t) depth: 3
 	
	
	


	allow inetd_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_log_t) depth: 2
 	
	typeattribute inetd_log_t file_type;

	 	 	 	
##### end files_type(inetd_log_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(inetd_log_t) depth: 2
 	
	
	


	allow inetd_log_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(inetd_log_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(inetd_log_t) depth: 2
 	
	
	


	allow inetd_log_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(inetd_log_t) depth: 1
 	
	typeattribute inetd_log_t logfile;

	 	 	 	
##### end logging_log_file(inetd_log_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(inetd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_tmp_t) depth: 3
 	
	
	


	allow inetd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_tmp_t) depth: 3
 	
	
	


	allow inetd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_tmp_t) depth: 2
 	
	typeattribute inetd_tmp_t file_type;

	 	 	 	
##### end files_type(inetd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(inetd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_tmp_t) depth: 4
 	
	
	


	allow inetd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_tmp_t) depth: 4
 	
	
	


	allow inetd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_tmp_t) depth: 3
 	
	typeattribute inetd_tmp_t file_type;

	 	 	 	
##### end files_type(inetd_tmp_t) depth: 2
 	
	typeattribute inetd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(inetd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(inetd_tmp_t) depth: 2
 	
	
	


	allow inetd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(inetd_tmp_t) depth: 1
 	
	typeattribute inetd_tmp_t tmpfile;
	allow inetd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(inetd_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(inetd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_var_run_t) depth: 3
 	
	
	


	allow inetd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_var_run_t) depth: 3
 	
	
	


	allow inetd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_var_run_t) depth: 2
 	
	typeattribute inetd_var_run_t file_type;

	 	 	 	
##### end files_type(inetd_var_run_t) depth: 1
 	
	typeattribute inetd_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(inetd_var_run_t) depth: 0
 	

 	 	 	 	
##### begin inetd_service_domain(inetd_child_t,inetd_child_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin inetd_core_service_domain(inetd_child_t,inetd_child_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin domain_type(inetd_child_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(inetd_child_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute inetd_child_t domain;

	# allow the domain to read its /proc/pid entries
	allow inetd_child_t self:dir { read getattr lock search ioctl };
	allow inetd_child_t self:lnk_file { read getattr lock ioctl };
	allow inetd_child_t self:file { getattr read write append ioctl lock };

	# allow inetd_child_t to create child processes in this domain
	allow inetd_child_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types inetd_child_t;
		role sysadm_r types inetd_child_t;
		role user_r types inetd_child_t;
		role staff_r types inetd_child_t;
	

	 	 	 	
##### end domain_base_type(inetd_child_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t device_t:dir { read getattr lock search ioctl };
	allow inetd_child_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(inetd_child_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t device_t:dir { read getattr lock search ioctl };
	allow inetd_child_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(inetd_child_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(inetd_child_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(inetd_child_t) depth: 5
 	
	
	


	allow inetd_child_t device_t:dir { read getattr lock search ioctl };
	allow inetd_child_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(inetd_child_t) depth: 4
 	
	allow inetd_child_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(inetd_child_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t root_t:dir { read getattr lock search ioctl };
	allow inetd_child_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(inetd_child_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(inetd_child_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t init_t:process signull;

	 	 	 	
##### end init_signull(inetd_child_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(inetd_child_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(inetd_child_t) depth: 4
 	
	
	


	allow inetd_child_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(inetd_child_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(inetd_child_t) depth: 4
 	
	
	


	dontaudit inetd_child_t security_t:dir search;
	dontaudit inetd_child_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(inetd_child_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(inetd_child_t) depth: 4
 	
	
	


	dontaudit inetd_child_t selinux_config_t:dir search;
	dontaudit inetd_child_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(inetd_child_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(inetd_child_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(inetd_child_t,inetd_child_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_child_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_child_exec_t) depth: 5
 	
	
	


	allow inetd_child_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_child_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_child_exec_t) depth: 5
 	
	
	


	allow inetd_child_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_child_exec_t) depth: 4
 	
	typeattribute inetd_child_exec_t file_type;

	 	 	 	
##### end files_type(inetd_child_exec_t) depth: 3
 	

	allow inetd_child_t inetd_child_exec_t:file entrypoint;
	allow inetd_child_t inetd_child_exec_t:file { read getattr lock execute ioctl };

	typeattribute inetd_child_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(inetd_child_t,inetd_child_exec_t) depth: 2
 	

	role system_r types inetd_child_t;

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool inetd_child_disable_trans false;
			
		
		if(inetd_child_disable_trans ) {
#			can_exec(inetd_t,inetd_child_exec_t)
			# cjp: this must be wrong
			
	

			
	
	


	allow { unconfined_t initrc_t } inetd_child_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(inetd_t,inetd_child_exec_t,inetd_child_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(inetd_t,inetd_child_exec_t,inetd_child_t) depth: 4
 	
	allow inetd_t inetd_child_exec_t:file { getattr read execute };
	allow inetd_t inetd_child_t:process transition;
	dontaudit inetd_t inetd_child_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(inetd_t,inetd_child_exec_t,inetd_child_t) depth: 3
 	
	type_transition inetd_t inetd_child_exec_t:process inetd_child_t;
 	 	 	 	
##### end domain_auto_trans(inetd_t,inetd_child_exec_t,inetd_child_t) depth: 2
 	
			allow inetd_t inetd_child_t:fd use;
			allow inetd_child_t inetd_t:fd use;
			allow inetd_child_t inetd_t:fifo_file { getattr read write append ioctl lock };
			allow inetd_child_t inetd_t:process sigchld;
			dontaudit inetd_t inetd_child_t:process { noatsecure siginh rlimitinh };

			allow inetd_t inetd_child_t:process sigkill;

			# make sediff happy
			allow inetd_child_t inetd_child_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	 	 	 	
##### end inetd_core_service_domain(inetd_child_t,inetd_child_exec_t) depth: 1
 	

	allow inetd_child_t inetd_t:tcp_socket { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept };
	allow inetd_child_t inetd_t:udp_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end inetd_service_domain(inetd_child_t,inetd_child_exec_t) depth: 0
 	
role system_r types inetd_child_t;

 	 	 	 	
##### begin files_tmp_file(inetd_child_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_child_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_child_tmp_t) depth: 3
 	
	
	


	allow inetd_child_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_child_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_child_tmp_t) depth: 3
 	
	
	


	allow inetd_child_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_child_tmp_t) depth: 2
 	
	typeattribute inetd_child_tmp_t file_type;

	 	 	 	
##### end files_type(inetd_child_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(inetd_child_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_child_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_child_tmp_t) depth: 4
 	
	
	


	allow inetd_child_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_child_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_child_tmp_t) depth: 4
 	
	
	


	allow inetd_child_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_child_tmp_t) depth: 3
 	
	typeattribute inetd_child_tmp_t file_type;

	 	 	 	
##### end files_type(inetd_child_tmp_t) depth: 2
 	
	typeattribute inetd_child_tmp_t polymember;

	 	 	 	
##### end files_poly_member(inetd_child_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(inetd_child_tmp_t) depth: 2
 	
	
	


	allow inetd_child_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(inetd_child_tmp_t) depth: 1
 	
	typeattribute inetd_child_tmp_t tmpfile;
	allow inetd_child_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(inetd_child_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(inetd_child_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(inetd_child_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(inetd_child_var_run_t) depth: 3
 	
	
	


	allow inetd_child_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(inetd_child_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(inetd_child_var_run_t) depth: 3
 	
	
	


	allow inetd_child_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(inetd_child_var_run_t) depth: 2
 	
	typeattribute inetd_child_var_run_t file_type;

	 	 	 	
##### end files_type(inetd_child_var_run_t) depth: 1
 	
	typeattribute inetd_child_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(inetd_child_var_run_t) depth: 0
 	

########################################
#
# Local policy
#

allow inetd_t self:capability { setuid setgid };
dontaudit inetd_t self:capability sys_tty_config;
allow inetd_t self:process setsched;
allow inetd_t self:fifo_file { getattr read write append ioctl lock };
allow inetd_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow inetd_t self:udp_socket { connect { create ioctl read getattr write setattr append bind getopt setopt shutdown } };

allow inetd_t inetd_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin logging_log_filetrans(inetd_t,inetd_log_t,file) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(inetd_t) depth: 2
 	
	
	


	allow inetd_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(inetd_t) depth: 1
 	
	allow inetd_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition inetd_t var_log_t:file inetd_log_t;

	 	 	 	
##### end logging_log_filetrans(inetd_t,inetd_log_t,file) depth: 0
 	

allow inetd_t inetd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow inetd_t inetd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(inetd_t,inetd_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow inetd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition inetd_t tmp_t:{ file dir } inetd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(inetd_t,inetd_tmp_t,{ file dir }) depth: 0
 	

allow inetd_t inetd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_pid_filetrans(inetd_t,inetd_var_run_t,file) depth: 1
 	
	
	


	allow inetd_t var_t:dir { getattr search };
	allow inetd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition inetd_t var_run_t:file inetd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(inetd_t,inetd_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(inetd_t) depth: 1
 	
	
	


	allow inetd_t proc_t:dir search;
	allow inetd_t sysctl_t:dir { read getattr lock search ioctl };
	allow inetd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow inetd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(inetd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_list_proc(inetd_t) depth: 1
 	
	
	


	allow inetd_t proc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_proc(inetd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(inetd_t) depth: 1
 	
	
	


	allow inetd_t proc_t:dir search;
	allow inetd_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(inetd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_tcp_recvfrom(inetd_t) depth: 1
 	
	
	


	allow inetd_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(inetd_t) depth: 0
 	

# networking:
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(inetd_t) depth: 1
 	
	
	


	allow inetd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(inetd_t) depth: 2
 	
	
	


	allow inetd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(inetd_t) depth: 2
 	
	
	


	allow inetd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(inetd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(inetd_t) depth: 2
 	
	
	


	allow inetd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow inetd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(inetd_t) depth: 2
 	
	
	


	allow inetd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(inetd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(inetd_t) depth: 1
 	
	
	


	allow inetd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(inetd_t) depth: 2
 	
	
	


	allow inetd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(inetd_t) depth: 2
 	
	
	


	allow inetd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(inetd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(inetd_t) depth: 2
 	
	
	


	allow inetd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(inetd_t) depth: 2
 	
	
	


	allow inetd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(inetd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(inetd_t) depth: 1
 	
	
	


	allow inetd_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(inetd_t) depth: 2
 	
	
	


	allow inetd_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(inetd_t) depth: 2
 	
	
	


	allow inetd_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(inetd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(inetd_t) depth: 2
 	
	
	


	allow inetd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(inetd_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(inetd_t) depth: 1
 	
	
	


	allow inetd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(inetd_t) depth: 1
 	
	
	


	allow inetd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(inetd_t) depth: 1
 	
	
	


	allow inetd_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(inetd_t) depth: 0
 	

# listen on service ports:
 	 	 	 	
##### begin corenet_tcp_bind_amanda_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t amanda_port_t:tcp_socket name_bind;
	

	 	 	 	
##### end corenet_tcp_bind_amanda_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_amanda_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t amanda_port_t:udp_socket name_bind;
	

	 	 	 	
##### end corenet_udp_bind_amanda_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_auth_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t auth_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_auth_port(inetd_t) depth: 0
 	
#corenet_udp_bind_comsat_port(inetd_t)
 	 	 	 	
##### begin corenet_tcp_bind_dbskkd_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t dbskkd_port_t:tcp_socket name_bind;
	

	 	 	 	
##### end corenet_tcp_bind_dbskkd_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_dbskkd_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t dbskkd_port_t:udp_socket name_bind;
	

	 	 	 	
##### end corenet_udp_bind_dbskkd_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_ftp_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t ftp_port_t:udp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_ftp_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_inetd_child_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t inetd_child_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_inetd_child_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_inetd_child_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t inetd_child_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_inetd_child_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_ktalkd_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t ktalkd_port_t:udp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_ktalkd_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_printer_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t printer_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_printer_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_rsh_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t rsh_port_t:udp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_rsh_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_rsync_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t rsync_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_rsync_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_rsync_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t rsync_port_t:udp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_rsync_port(inetd_t) depth: 0
 	
#corenet_tcp_bind_stunnel_port(inetd_t)
 	 	 	 	
##### begin corenet_tcp_bind_swat_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t swat_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_swat_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_swat_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t swat_port_t:udp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_swat_port(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_tftp_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t tftp_port_t:udp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_tftp_port(inetd_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(inetd_t) depth: 1
 	
	
	


	allow inetd_t sysfs_t:dir { read getattr lock search ioctl };
	allow inetd_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(inetd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(inetd_t) depth: 1
 	
	
	


	allow inetd_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(inetd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(inetd_t) depth: 1
 	
	
	


	allow inetd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(inetd_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(inetd_t) depth: 1
 	
	
	


	dontaudit inetd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(inetd_t) depth: 0
 	

# Run other daemons in the inetd_child_t domain.
 	 	 	 	
##### begin corecmd_search_bin(inetd_t) depth: 1
 	
	
	


	allow inetd_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(inetd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_symlinks(inetd_t) depth: 1
 	
	
	


	allow inetd_t sbin_t:dir search;
	allow inetd_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(inetd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(inetd_t) depth: 1
 	
	
	


	allow inetd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(inetd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(inetd_t) depth: 1
 	
	
	


	allow inetd_t etc_t:dir { read getattr lock search ioctl };
	allow inetd_t etc_t:file { read getattr lock ioctl };
	allow inetd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(inetd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(inetd_t) depth: 1
 	
	
	


	allow inetd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(inetd_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(inetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(inetd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(inetd_t) depth: 3
 	
	
	


	allow inetd_t device_t:dir { read getattr lock search ioctl };
	allow inetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(inetd_t) depth: 2
 	
	allow inetd_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(inetd_t) depth: 1
 	
	allow inetd_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(inetd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(inetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(inetd_t) depth: 2
 	
	
	


	allow inetd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(inetd_t) depth: 1
 	
	allow inetd_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_t lib_t:lnk_file { read getattr lock ioctl };
	allow inetd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow inetd_t ld_so_t:file { read getattr lock execute ioctl };
	allow inetd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(inetd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(inetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(inetd_t) depth: 2
 	
	
	


	allow inetd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(inetd_t) depth: 1
 	
	allow inetd_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_t lib_t:lnk_file { read getattr lock ioctl };
	allow inetd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow inetd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow inetd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(inetd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(inetd_t) depth: 1
 	
	
	


	allow inetd_t devlog_t:lnk_file read;
	allow inetd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow inetd_t syslogd_t:unix_dgram_socket sendto;
	allow inetd_t syslogd_t:unix_stream_socket connectto;
	allow inetd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow inetd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(inetd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(inetd_t) depth: 3
 	
	
	


	allow inetd_t device_t:dir { read getattr lock search ioctl };
	allow inetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(inetd_t) depth: 2
 	
	allow inetd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(inetd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(inetd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(inetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(inetd_t) depth: 2
 	
	
	


	allow inetd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(inetd_t) depth: 1
 	
	# FIXME: inetd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(inetd_t) depth: 2
 	
	
	


	allow inetd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(inetd_t) depth: 1
 	
	allow inetd_t locale_t:dir { read getattr lock search ioctl };
	allow inetd_t locale_t:lnk_file { read getattr lock ioctl };
	allow inetd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(inetd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(inetd_t) depth: 3
 	
	
	


	allow inetd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(inetd_t) depth: 2
 	
	allow inetd_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(inetd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(inetd_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(inetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(inetd_t) depth: 2
 	
	
	


	allow inetd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(inetd_t) depth: 1
 	
	allow inetd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(inetd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(inetd_t) depth: 1
 	
	
	


	dontaudit inetd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(inetd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(inetd_t) depth: 1
 	
	
		
	


		dontaudit inetd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(inetd_t) depth: 0
 	


	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(inetd_t) depth: 1
 	
	
	


	dontaudit inetd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(inetd_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(inetd_t) depth: 1
 	
	
	


	dontaudit inetd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(inetd_t) depth: 0
 	
	 	 	 	 	
##### begin files_dontaudit_read_root_files(inetd_t) depth: 1
 	
	
	


	dontaudit inetd_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(inetd_t) depth: 0
 	



	
		
	



	
		
	 	 	 	 	
##### begin mount_send_nfs_client_request(inetd_t) depth: 1
 	
	
	


	allow inetd_t mount_t:udp_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end mount_send_nfs_client_request(inetd_t) depth: 0
 	

	


# Communicate with the portmapper.

	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(inetd_t) depth: 1
 	
	
	


	allow inetd_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(inetd_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(inetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(inetd_t) depth: 2
 	
	
	


	allow inetd_t device_t:dir { read getattr lock search ioctl };
	allow inetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(inetd_t) depth: 1
 	
	allow inetd_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(inetd_t) depth: 0
 	

	



	 	 	 	 	
##### begin unconfined_domain(inetd_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(inetd_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow inetd_t self:capability *;
	allow inetd_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow inetd_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow inetd_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow inetd_t self:nscd *;
	allow inetd_t self:dbus *;
	allow inetd_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(inetd_t) depth: 3
 	
	
	


	allow inetd_t proc_type:{ dir file } *;

	allow inetd_t sysctl_t:{ dir file } *;

	allow inetd_t kernel_t:system *;

	allow inetd_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow inetd_t unlabeled_t:filesystem *;
	allow inetd_t unlabeled_t:association *;

	typeattribute inetd_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute inetd_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(inetd_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow inetd_t { proc_t proc_net_t }:dir search;

	allow inetd_t sysctl_type:dir { read getattr lock search ioctl };
	allow inetd_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(inetd_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(inetd_t) depth: 3
 	
	
	


	allow inetd_t node_type:node *;
	allow inetd_t netif_type:netif *;
	allow inetd_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow inetd_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow inetd_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow inetd_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(inetd_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(inetd_t) depth: 5
 	
	
	


	allow inetd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(inetd_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(inetd_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(inetd_t) depth: 3
 	
	
	


	allow inetd_t device_node:{ chr_file blk_file } *;
	allow inetd_t mtrr_device_t:{ dir file } *;

	allow inetd_t self:capability sys_rawio;
	typeattribute inetd_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(inetd_t) depth: 3
 	
	
	


	typeattribute inetd_t unconfined_domain_type;

	# pass all constraints
	typeattribute inetd_t can_change_process_identity;
	typeattribute inetd_t can_change_process_role;
	typeattribute inetd_t can_change_object_identity;
	typeattribute inetd_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow inetd_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow inetd_t domain:fd use;
	allow inetd_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow inetd_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow inetd_t domain:{ sem msgq shm } *;
	allow inetd_t domain:msg { send receive };

	# For /proc/pid
	allow inetd_t domain:dir { read getattr lock search ioctl };
	allow inetd_t domain:file { read getattr lock ioctl };
	allow inetd_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(inetd_t) depth: 3
 	
	
	


	dontaudit inetd_t domain:dir { read getattr lock search ioctl };
	dontaudit inetd_t domain:lnk_file { read getattr lock ioctl };
	dontaudit inetd_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit inetd_t domain:sock_file { read getattr lock ioctl };
	dontaudit inetd_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(inetd_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow inetd_t file_type:{ file chr_file } ~execmod;
	allow inetd_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow inetd_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow inetd_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow inetd_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(inetd_t) depth: 3
 	
	
	


	allow inetd_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow inetd_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(inetd_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(inetd_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow inetd_t security_t:dir { getattr search read };
	allow inetd_t security_t:file { getattr read write };

	typeattribute inetd_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow inetd_t security_t:security *;
		auditallow inetd_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(inetd_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow inetd_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow inetd_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow inetd_t self:process execstack;
		auditallow inetd_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit inetd_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(inetd_t) depth: 3
 	
	
	


	typeattribute inetd_t can_read_shadow_passwords;
	typeattribute inetd_t can_write_shadow_passwords;
	typeattribute inetd_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(inetd_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(inetd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(inetd_t) depth: 4
 	
	
	


	allow inetd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(inetd_t) depth: 3
 	
	allow inetd_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_t lib_t:lnk_file { read getattr lock ioctl };
	allow inetd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow inetd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow inetd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(inetd_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(inetd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(inetd_t) depth: 4
 	
	
	


	allow inetd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(inetd_t) depth: 3
 	
	allow inetd_t selinux_config_t:dir search;
	allow inetd_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow inetd_t policy_config_t:file { getattr create write };
#	typeattribute inetd_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(inetd_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(inetd_t) depth: 3
 	
	
	


	allow inetd_t policy_config_t:file relabelto;
	typeattribute inetd_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(inetd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(inetd_t) depth: 3
 	
	
	


	allow inetd_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow inetd_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute inetd_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute inetd_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(inetd_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(inetd_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow inetd_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow inetd_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(inetd_t) depth: 0
 	


########################################
#
# inetd child local_policy
#

allow inetd_child_t self:process { sigchld sigkill sigstop signull signal };
allow inetd_child_t self:fifo_file { getattr read write append ioctl lock };
allow inetd_child_t self:tcp_socket { { create ioctl read getattr write setattr append bind getopt setopt shutdown } listen accept };
allow inetd_child_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

# for identd
allow inetd_child_t self:netlink_tcpdiag_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };
allow inetd_child_t self:capability { setuid setgid };
allow inetd_child_t self:dir search;
allow inetd_child_t self:{ lnk_file file } { getattr read };
 	 	 	 	
##### begin files_search_home(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(inetd_child_t) depth: 0
 	

allow inetd_child_t inetd_child_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow inetd_child_t inetd_child_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(inetd_child_t,inetd_child_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow inetd_child_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition inetd_child_t tmp_t:{ file dir } inetd_child_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(inetd_child_t,inetd_child_tmp_t,{ file dir }) depth: 0
 	

allow inetd_child_t inetd_child_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow inetd_child_t inetd_child_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(inetd_child_t,inetd_child_var_run_t,file) depth: 1
 	
	
	


	allow inetd_child_t var_t:dir { getattr search };
	allow inetd_child_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition inetd_child_t var_run_t:file inetd_child_var_run_t;

	 	 	 	
##### end files_pid_filetrans(inetd_child_t,inetd_child_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t proc_t:dir search;
	allow inetd_child_t sysctl_t:dir { read getattr lock search ioctl };
	allow inetd_child_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow inetd_child_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t proc_t:dir { read getattr lock search ioctl };
	allow inetd_child_t proc_t:lnk_file { getattr read };
	allow inetd_child_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t proc_t:dir search;
	allow inetd_child_t proc_net_t:dir { read getattr lock search ioctl };
	allow inetd_child_t proc_net_t:file { read getattr lock ioctl };
	allow inetd_child_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(inetd_child_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow inetd_child_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(inetd_child_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(inetd_child_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(inetd_child_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(inetd_child_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(inetd_child_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(inetd_child_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_urand(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t device_t:dir { read getattr lock search ioctl };
	allow inetd_child_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t etc_t:dir { read getattr lock search ioctl };
	allow inetd_child_t etc_t:file { read getattr lock ioctl };
	allow inetd_child_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(inetd_child_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(inetd_child_t) depth: 1
 	
	allow inetd_child_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_child_t lib_t:lnk_file { read getattr lock ioctl };
	allow inetd_child_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow inetd_child_t ld_so_t:file { read getattr lock execute ioctl };
	allow inetd_child_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(inetd_child_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(inetd_child_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(inetd_child_t) depth: 1
 	
	allow inetd_child_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_child_t lib_t:lnk_file { read getattr lock ioctl };
	allow inetd_child_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow inetd_child_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow inetd_child_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(inetd_child_t) depth: 1
 	
	
	


	allow inetd_child_t devlog_t:lnk_file read;
	allow inetd_child_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow inetd_child_t syslogd_t:unix_dgram_socket sendto;
	allow inetd_child_t syslogd_t:unix_stream_socket connectto;
	allow inetd_child_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow inetd_child_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(inetd_child_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(inetd_child_t) depth: 3
 	
	
	


	allow inetd_child_t device_t:dir { read getattr lock search ioctl };
	allow inetd_child_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(inetd_child_t) depth: 2
 	
	allow inetd_child_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(inetd_child_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(inetd_child_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(inetd_child_t) depth: 1
 	
	# FIXME: inetd_child_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(inetd_child_t) depth: 1
 	
	allow inetd_child_t locale_t:dir { read getattr lock search ioctl };
	allow inetd_child_t locale_t:lnk_file { read getattr lock ioctl };
	allow inetd_child_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(inetd_child_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(inetd_child_t) depth: 3
 	
	
	


	allow inetd_child_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(inetd_child_t) depth: 2
 	
	allow inetd_child_t lib_t:dir { read getattr lock search ioctl };
	allow inetd_child_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(inetd_child_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(inetd_child_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(inetd_child_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(inetd_child_t) depth: 2
 	
	
	


	allow inetd_child_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(inetd_child_t) depth: 1
 	
	allow inetd_child_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(inetd_child_t) depth: 0
 	


	
		if (run_ssh_inetd) {
			
	 	 	 	 	
##### begin corenet_tcp_bind_ssh_port(inetd_t) depth: 1
 	
	
	


	allow inetd_t ssh_port_t:tcp_socket name_bind;
	allow inetd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_ssh_port(inetd_t) depth: 0
 	

		
		}
	



	
		
	



	
		
	



	
		
	



	
		
	



	



	


########################################
#
# Declarations
#

# used for direct running of init scripts
# by admin domains

#
# init_t is the domain of the init process.
#
# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin domain_type(init_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(init_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute init_t domain;

	# allow the domain to read its /proc/pid entries
	allow init_t self:dir { read getattr lock search ioctl };
	allow init_t self:lnk_file { read getattr lock ioctl };
	allow init_t self:file { getattr read write append ioctl lock };

	# allow init_t to create child processes in this domain
	allow init_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types init_t;
		role sysadm_r types init_t;
		role user_r types init_t;
		role staff_r types init_t;
	

	 	 	 	
##### end domain_base_type(init_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(init_t) depth: 2
 	
	
	


	allow init_t device_t:dir { read getattr lock search ioctl };
	allow init_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(init_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(init_t) depth: 2
 	
	
	


	allow init_t device_t:dir { read getattr lock search ioctl };
	allow init_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(init_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(init_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(init_t) depth: 3
 	
	
	


	allow init_t device_t:dir { read getattr lock search ioctl };
	allow init_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(init_t) depth: 2
 	
	allow init_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(init_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(init_t) depth: 2
 	
	
	


	allow init_t root_t:dir { read getattr lock search ioctl };
	allow init_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(init_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(init_t) depth: 2
 	
	
	


	allow init_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(init_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(init_t) depth: 2
 	
	
	


	allow init_t init_t:process signull;

	 	 	 	
##### end init_signull(init_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(init_t) depth: 2
 	
	
	


	allow init_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(init_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(init_t) depth: 2
 	
	
	


	allow init_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(init_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(init_t) depth: 2
 	
	
	


	dontaudit init_t security_t:dir search;
	dontaudit init_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(init_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(init_t) depth: 2
 	
	
	


	dontaudit init_t selinux_config_t:dir search;
	dontaudit init_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(init_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(init_t) depth: 0
 	
role system_r types init_t;

#
# init_exec_t is the type of the init program.
#
# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin kernel_domtrans_to(init_t,init_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(kernel_t,init_exec_t,init_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(kernel_t,init_exec_t,init_t) depth: 3
 	
	allow kernel_t init_exec_t:file { getattr read execute };
	allow kernel_t init_t:process transition;
	dontaudit kernel_t init_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(kernel_t,init_exec_t,init_t) depth: 2
 	
	type_transition kernel_t init_exec_t:process init_t;
 	 	 	 	
##### end domain_auto_trans(kernel_t,init_exec_t,init_t) depth: 1
 	

	allow kernel_t init_t:fd use;
	allow init_t kernel_t:fd use;
	allow init_t kernel_t:fifo_file { getattr read write append ioctl lock };
	allow init_t kernel_t:process sigchld;

	

	 	 	 	
##### end kernel_domtrans_to(init_t,init_exec_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(init_t,init_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(init_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(init_exec_t) depth: 3
 	
	
	


	allow init_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(init_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(init_exec_t) depth: 3
 	
	
	


	allow init_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(init_exec_t) depth: 2
 	
	typeattribute init_exec_t file_type;

	 	 	 	
##### end files_type(init_exec_t) depth: 1
 	

	allow init_t init_exec_t:file entrypoint;
	allow init_t init_exec_t:file { read getattr lock execute ioctl };

	typeattribute init_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(init_t,init_exec_t) depth: 0
 	

#
# init_var_run_t is the type for /var/run/shutdown.pid.
#
 	 	 	 	
##### begin files_pid_file(init_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(init_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(init_var_run_t) depth: 3
 	
	
	


	allow init_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(init_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(init_var_run_t) depth: 3
 	
	
	


	allow init_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(init_var_run_t) depth: 2
 	
	typeattribute init_var_run_t file_type;

	 	 	 	
##### end files_type(init_var_run_t) depth: 1
 	
	typeattribute init_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(init_var_run_t) depth: 0
 	

#
# initctl_t is the type of the named pipe created 
# by init during initialization.  This pipe is used
# to communicate with init.
#
 	 	 	 	
##### begin files_type(initctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(initctl_t) depth: 2
 	
	
	


	allow initctl_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initctl_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initctl_t) depth: 2
 	
	
	


	allow initctl_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initctl_t) depth: 1
 	
	typeattribute initctl_t file_type;

	 	 	 	
##### end files_type(initctl_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(initctl_t) depth: 1
 	
	
	


	typeattribute initctl_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(initctl_t) depth: 0
 	

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin domain_type(initrc_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(initrc_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute initrc_t domain;

	# allow the domain to read its /proc/pid entries
	allow initrc_t self:dir { read getattr lock search ioctl };
	allow initrc_t self:lnk_file { read getattr lock ioctl };
	allow initrc_t self:file { getattr read write append ioctl lock };

	# allow initrc_t to create child processes in this domain
	allow initrc_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types initrc_t;
		role sysadm_r types initrc_t;
		role user_r types initrc_t;
		role staff_r types initrc_t;
	

	 	 	 	
##### end domain_base_type(initrc_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 3
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	allow initrc_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(initrc_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(initrc_t) depth: 2
 	
	
	


	allow initrc_t root_t:dir { read getattr lock search ioctl };
	allow initrc_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(initrc_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(initrc_t) depth: 2
 	
	
	


	allow initrc_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(initrc_t) depth: 2
 	
	
	


	allow initrc_t init_t:process signull;

	 	 	 	
##### end init_signull(initrc_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(initrc_t) depth: 2
 	
	
	


	allow initrc_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(initrc_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(initrc_t) depth: 2
 	
	
	


	allow initrc_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(initrc_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(initrc_t) depth: 2
 	
	
	


	dontaudit initrc_t security_t:dir search;
	dontaudit initrc_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(initrc_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(initrc_t) depth: 2
 	
	
	


	dontaudit initrc_t selinux_config_t:dir search;
	dontaudit initrc_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(initrc_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(initrc_t) depth: 0
 	
role system_r types initrc_t;

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin domain_entry_file(initrc_t,initrc_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(initrc_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_exec_t) depth: 3
 	
	
	


	allow initrc_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_exec_t) depth: 3
 	
	
	


	allow initrc_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_exec_t) depth: 2
 	
	typeattribute initrc_exec_t file_type;

	 	 	 	
##### end files_type(initrc_exec_t) depth: 1
 	

	allow initrc_t initrc_exec_t:file entrypoint;
	allow initrc_t initrc_exec_t:file { read getattr lock execute ioctl };

	typeattribute initrc_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(initrc_t,initrc_exec_t) depth: 0
 	

 	 	 	 	
##### begin term_pty(initrc_devpts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(initrc_devpts_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_devpts_t) depth: 3
 	
	
	


	allow initrc_devpts_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_devpts_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_devpts_t) depth: 3
 	
	
	


	allow initrc_devpts_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_devpts_t) depth: 2
 	
	typeattribute initrc_devpts_t file_type;

	 	 	 	
##### end files_type(initrc_devpts_t) depth: 1
 	
	allow initrc_devpts_t devpts_t:filesystem associate;
	typeattribute initrc_devpts_t ptynode;

	 	 	 	
##### end term_pty(initrc_devpts_t) depth: 0
 	
 	 	 	 	
##### begin files_type(initrc_devpts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_devpts_t) depth: 2
 	
	
	


	allow initrc_devpts_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_devpts_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_devpts_t) depth: 2
 	
	
	


	allow initrc_devpts_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_devpts_t) depth: 1
 	
	typeattribute initrc_devpts_t file_type;

	 	 	 	
##### end files_type(initrc_devpts_t) depth: 0
 	

 	 	 	 	
##### begin files_type(initrc_state_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_state_t) depth: 2
 	
	
	


	allow initrc_state_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_state_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_state_t) depth: 2
 	
	
	


	allow initrc_state_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_state_t) depth: 1
 	
	typeattribute initrc_state_t file_type;

	 	 	 	
##### end files_type(initrc_state_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(initrc_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(initrc_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_tmp_t) depth: 3
 	
	
	


	allow initrc_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_tmp_t) depth: 3
 	
	
	


	allow initrc_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_tmp_t) depth: 2
 	
	typeattribute initrc_tmp_t file_type;

	 	 	 	
##### end files_type(initrc_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(initrc_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(initrc_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_tmp_t) depth: 4
 	
	
	


	allow initrc_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_tmp_t) depth: 4
 	
	
	


	allow initrc_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_tmp_t) depth: 3
 	
	typeattribute initrc_tmp_t file_type;

	 	 	 	
##### end files_type(initrc_tmp_t) depth: 2
 	
	typeattribute initrc_tmp_t polymember;

	 	 	 	
##### end files_poly_member(initrc_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(initrc_tmp_t) depth: 2
 	
	
	


	allow initrc_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(initrc_tmp_t) depth: 1
 	
	typeattribute initrc_tmp_t tmpfile;
	allow initrc_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(initrc_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(initrc_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(initrc_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(initrc_var_run_t) depth: 3
 	
	
	


	allow initrc_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(initrc_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(initrc_var_run_t) depth: 3
 	
	
	


	allow initrc_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(initrc_var_run_t) depth: 2
 	
	typeattribute initrc_var_run_t file_type;

	 	 	 	
##### end files_type(initrc_var_run_t) depth: 1
 	
	typeattribute initrc_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(initrc_var_run_t) depth: 0
 	

########################################
#
# Init local policy
#

# Use capabilities. old rule:
allow init_t self:capability ~sys_module;
# is ~sys_module really needed? observed: 
# sys_boot
# sys_tty_config
# kill: now provided by domain_kill_all_domains()
# setuid (from /sbin/shutdown)
# sys_chroot (from /usr/bin/chroot): now provided by corecmd_chroot_exec_chroot()

allow init_t self:fifo_file { getattr read write append ioctl lock };

# Re-exec itself
allow init_t init_exec_t:file { getattr read ioctl execute execute_no_trans };

allow init_t initrc_t:unix_stream_socket connectto;

# For /var/run/shutdown.pid.
allow init_t init_var_run_t:file { create getattr read append write setattr unlink };
 	 	 	 	
##### begin files_pid_filetrans(init_t,init_var_run_t,file) depth: 1
 	
	
	


	allow init_t var_t:dir { getattr search };
	allow init_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition init_t var_run_t:file init_var_run_t;

	 	 	 	
##### end files_pid_filetrans(init_t,init_var_run_t,file) depth: 0
 	

allow init_t initctl_t:fifo_file { create getattr read append write setattr unlink };
 	 	 	 	
##### begin fs_associate_tmpfs(initctl_t) depth: 1
 	
	
	


	allow initctl_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(initctl_t) depth: 0
 	
 	 	 	 	
##### begin dev_filetrans(init_t,initctl_t,fifo_file) depth: 1
 	
	
	


	allow init_t device_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition init_t device_t:fifo_file initctl_t;

	 	 	 	 	
##### begin fs_associate_tmpfs(initctl_t) depth: 2
 	
	
	


	allow initctl_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(initctl_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(initctl_t) depth: 2
 	
	
	


	allow initctl_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(initctl_t) depth: 1
 	

	 	 	 	
##### end dev_filetrans(init_t,initctl_t,fifo_file) depth: 0
 	

# Modify utmp.
allow init_t initrc_var_run_t:file { { getattr read write append ioctl lock } setattr };

# Run init scripts.
 	 	 	 	
##### begin domain_auto_trans(init_t,initrc_exec_t,initrc_t) depth: 1
 	
	 	 	 	 	
##### begin domain_trans(init_t,initrc_exec_t,initrc_t) depth: 2
 	
	allow init_t initrc_exec_t:file { getattr read execute };
	allow init_t initrc_t:process transition;
	dontaudit init_t initrc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(init_t,initrc_exec_t,initrc_t) depth: 1
 	
	type_transition init_t initrc_exec_t:process initrc_t;
 	 	 	 	
##### end domain_auto_trans(init_t,initrc_exec_t,initrc_t) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(init_t) depth: 1
 	
	
	


	allow init_t proc_t:dir { read getattr lock search ioctl };
	allow init_t proc_t:lnk_file { getattr read };
	allow init_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(init_t) depth: 0
 	
 	 	 	 	
##### begin kernel_share_state(init_t) depth: 1
 	
	
	


	allow kernel_t init_t:process share;

	 	 	 	
##### end kernel_share_state(init_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(init_t) depth: 1
 	
	
	


	allow init_t sysfs_t:dir { read getattr lock search ioctl };
	allow init_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(init_t) depth: 0
 	

 	 	 	 	
##### begin mls_process_write_down(init_t) depth: 1
 	
	
	


	typeattribute init_t mlsprocwrite;

	 	 	 	
##### end mls_process_write_down(init_t) depth: 0
 	

 	 	 	 	
##### begin selinux_set_boolean(init_t) depth: 1
 	
	
	


	allow init_t security_t:dir search;
	allow init_t security_t:dir { getattr search read };
	allow init_t security_t:file { getattr read write };

	if(!secure_mode_policyload) {
		allow init_t security_t:security setbool;
		auditallow init_t security_t:security setbool;
	}

	 	 	 	
##### end selinux_set_boolean(init_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_terms(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(init_t) depth: 2
 	
	
	


	allow init_t device_t:dir { read getattr lock search ioctl };
	allow init_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(init_t) depth: 1
 	
	allow init_t devpts_t:dir { read getattr lock search ioctl };
	allow init_t { console_device_t tty_device_t ttynode ptynode }:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_all_terms(init_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_chroot(init_t) depth: 1
 	
	
	


	
	
	


	allow init_t chroot_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

	allow init_t self:capability sys_chroot;

	 	 	 	
##### end corecmd_exec_chroot(init_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(init_t) depth: 1
 	
	
	


	allow init_t bin_t:dir { read getattr lock search ioctl };
	allow init_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow init_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(init_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(init_t) depth: 1
 	
	
	


	allow init_t sbin_t:dir { read getattr lock search ioctl };
	allow init_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow init_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(init_t) depth: 0
 	

 	 	 	 	
##### begin domain_kill_all_domains(init_t) depth: 1
 	
	
	


	allow init_t domain:process sigkill;
	allow init_t self:capability kill;

	 	 	 	
##### end domain_kill_all_domains(init_t) depth: 0
 	
 	 	 	 	
##### begin domain_signal_all_domains(init_t) depth: 1
 	
	
	


	allow init_t domain:process signal;

	 	 	 	
##### end domain_signal_all_domains(init_t) depth: 0
 	
 	 	 	 	
##### begin domain_signull_all_domains(init_t) depth: 1
 	
	
	


	allow init_t domain:process signull;

	 	 	 	
##### end domain_signull_all_domains(init_t) depth: 0
 	
 	 	 	 	
##### begin domain_sigstop_all_domains(init_t) depth: 1
 	
	
	


	allow init_t domain:process sigstop;

	 	 	 	
##### end domain_sigstop_all_domains(init_t) depth: 0
 	
 	 	 	 	
##### begin domain_sigstop_all_domains(init_t) depth: 1
 	
	
	


	allow init_t domain:process sigstop;

	 	 	 	
##### end domain_sigstop_all_domains(init_t) depth: 0
 	
 	 	 	 	
##### begin domain_sigchld_all_domains(init_t) depth: 1
 	
	
	


	allow init_t domain:process sigchld;

	 	 	 	
##### end domain_sigchld_all_domains(init_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(init_t) depth: 1
 	
	
	


	allow init_t etc_t:dir { read getattr lock search ioctl };
	allow init_t etc_t:file { read getattr lock ioctl };
	allow init_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(init_t) depth: 0
 	
 	 	 	 	
##### begin files_rw_generic_pids(init_t) depth: 1
 	
	
	


	allow init_t var_t:dir search;
	allow init_t var_run_t:dir { read getattr lock search ioctl };
	allow init_t var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end files_rw_generic_pids(init_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_isid_type_dirs(init_t) depth: 1
 	
	
	


	dontaudit init_t file_t:dir { getattr search };

	 	 	 	
##### end files_dontaudit_search_isid_type_dirs(init_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_etc_runtime_files(init_t) depth: 1
 	
	
	


	allow init_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow init_t etc_runtime_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	type_transition init_t etc_t:file etc_runtime_t;

	 	 	 	
##### end files_manage_etc_runtime_files(init_t) depth: 0
 	
# Run /etc/X11/prefdm:
 	 	 	 	
##### begin files_exec_etc_files(init_t) depth: 1
 	
	
	


	allow init_t etc_t:dir { read getattr lock search ioctl };
	allow init_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow init_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(init_t) depth: 0
 	
# file descriptors inherited from the rootfs:
 	 	 	 	
##### begin files_dontaudit_rw_root_files(init_t) depth: 1
 	
	
	


	dontaudit init_t root_t:file { read write };

	 	 	 	
##### end files_dontaudit_rw_root_files(init_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_rw_root_chr_files(init_t) depth: 1
 	
	
	


	dontaudit init_t root_t:chr_file { read write };

	 	 	 	
##### end files_dontaudit_rw_root_chr_files(init_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(init_t) depth: 2
 	
	
	


	allow init_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(init_t) depth: 1
 	
	allow init_t lib_t:dir { read getattr lock search ioctl };
	allow init_t lib_t:lnk_file { read getattr lock ioctl };
	allow init_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow init_t ld_so_t:file { read getattr lock execute ioctl };
	allow init_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(init_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(init_t) depth: 2
 	
	
	


	allow init_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(init_t) depth: 1
 	
	allow init_t lib_t:dir { read getattr lock search ioctl };
	allow init_t lib_t:lnk_file { read getattr lock ioctl };
	allow init_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow init_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow init_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(init_t) depth: 0
 	
 	 	 	 	
##### begin libs_rw_ld_so_cache(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(init_t) depth: 2
 	
	
	


	allow init_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(init_t) depth: 1
 	
	allow init_t ld_so_cache_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end libs_rw_ld_so_cache(init_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(init_t) depth: 1
 	
	
	


	allow init_t devlog_t:lnk_file read;
	allow init_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow init_t syslogd_t:unix_dgram_socket sendto;
	allow init_t syslogd_t:unix_stream_socket connectto;
	allow init_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow init_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(init_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(init_t) depth: 3
 	
	
	


	allow init_t device_t:dir { read getattr lock search ioctl };
	allow init_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(init_t) depth: 2
 	
	allow init_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(init_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(init_t) depth: 0
 	
 	 	 	 	
##### begin logging_rw_generic_logs(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(init_t) depth: 2
 	
	
	


	allow init_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(init_t) depth: 1
 	
	allow init_t var_log_t:dir { read getattr lock search ioctl };
	allow init_t var_log_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end logging_rw_generic_logs(init_t) depth: 0
 	

 	 	 	 	
##### begin mcs_killall(init_t) depth: 1
 	
	
	


	typeattribute init_t mcskillall;

	 	 	 	
##### end mcs_killall(init_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(init_t) depth: 1
 	
	
	


	typeattribute init_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(init_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(init_t) depth: 1
 	
	
	


	typeattribute init_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(init_t) depth: 0
 	
 	 	 	 	
##### begin mls_rangetrans_target(init_t) depth: 1
 	
	
	


	typeattribute init_t mlsrangetrans;

	 	 	 	
##### end mls_rangetrans_target(init_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(init_t) depth: 2
 	
	
	


	allow init_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(init_t) depth: 1
 	
	allow init_t selinux_config_t:dir { read getattr lock search ioctl };
	allow init_t selinux_config_t:file { read getattr lock ioctl };
	allow init_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(init_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(init_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(init_t) depth: 2
 	
	
	


	allow init_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(init_t) depth: 1
 	
	# FIXME: init_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(init_t) depth: 2
 	
	
	


	allow init_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(init_t) depth: 1
 	
	allow init_t locale_t:dir { read getattr lock search ioctl };
	allow init_t locale_t:lnk_file { read getattr lock ioctl };
	allow init_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(init_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(init_t) depth: 3
 	
	
	


	allow init_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(init_t) depth: 2
 	
	allow init_t lib_t:dir { read getattr lock search ioctl };
	allow init_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(init_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(init_t) depth: 0
 	




	 	 	 	 	
##### begin unconfined_domain(init_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(init_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow init_t self:capability *;
	allow init_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow init_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow init_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow init_t self:nscd *;
	allow init_t self:dbus *;
	allow init_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(init_t) depth: 3
 	
	
	


	allow init_t proc_type:{ dir file } *;

	allow init_t sysctl_t:{ dir file } *;

	allow init_t kernel_t:system *;

	allow init_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow init_t unlabeled_t:filesystem *;
	allow init_t unlabeled_t:association *;

	typeattribute init_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute init_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(init_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow init_t { proc_t proc_net_t }:dir search;

	allow init_t sysctl_type:dir { read getattr lock search ioctl };
	allow init_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(init_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(init_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(init_t) depth: 3
 	
	
	


	allow init_t node_type:node *;
	allow init_t netif_type:netif *;
	allow init_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow init_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow init_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow init_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(init_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(init_t) depth: 5
 	
	
	


	allow init_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(init_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(init_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(init_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(init_t) depth: 3
 	
	
	


	allow init_t device_node:{ chr_file blk_file } *;
	allow init_t mtrr_device_t:{ dir file } *;

	allow init_t self:capability sys_rawio;
	typeattribute init_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(init_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(init_t) depth: 3
 	
	
	


	typeattribute init_t unconfined_domain_type;

	# pass all constraints
	typeattribute init_t can_change_process_identity;
	typeattribute init_t can_change_process_role;
	typeattribute init_t can_change_object_identity;
	typeattribute init_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow init_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow init_t domain:fd use;
	allow init_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow init_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow init_t domain:{ sem msgq shm } *;
	allow init_t domain:msg { send receive };

	# For /proc/pid
	allow init_t domain:dir { read getattr lock search ioctl };
	allow init_t domain:file { read getattr lock ioctl };
	allow init_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(init_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(init_t) depth: 3
 	
	
	


	dontaudit init_t domain:dir { read getattr lock search ioctl };
	dontaudit init_t domain:lnk_file { read getattr lock ioctl };
	dontaudit init_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit init_t domain:sock_file { read getattr lock ioctl };
	dontaudit init_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(init_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(init_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow init_t file_type:{ file chr_file } ~execmod;
	allow init_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow init_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow init_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow init_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(init_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(init_t) depth: 3
 	
	
	


	allow init_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow init_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(init_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(init_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow init_t security_t:dir { getattr search read };
	allow init_t security_t:file { getattr read write };

	typeattribute init_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow init_t security_t:security *;
		auditallow init_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(init_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow init_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow init_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow init_t self:process execstack;
		auditallow init_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit init_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(init_t) depth: 3
 	
	
	


	typeattribute init_t can_read_shadow_passwords;
	typeattribute init_t can_write_shadow_passwords;
	typeattribute init_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(init_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(init_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(init_t) depth: 4
 	
	
	


	allow init_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(init_t) depth: 3
 	
	allow init_t lib_t:dir { read getattr lock search ioctl };
	allow init_t lib_t:lnk_file { read getattr lock ioctl };
	allow init_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow init_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow init_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(init_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(init_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(init_t) depth: 4
 	
	
	


	allow init_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(init_t) depth: 3
 	
	allow init_t selinux_config_t:dir search;
	allow init_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow init_t policy_config_t:file { getattr create write };
#	typeattribute init_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(init_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(init_t) depth: 3
 	
	
	


	allow init_t policy_config_t:file relabelto;
	typeattribute init_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(init_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(init_t) depth: 3
 	
	
	


	allow init_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow init_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute init_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute init_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(init_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(init_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow init_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow init_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(init_t) depth: 0
 	



	
		
	 	 	 	 	
##### begin auth_rw_login_records(init_t) depth: 1
 	
	
	


	allow init_t wtmp_t:file { getattr read write append ioctl lock };
	 	 	 	 	
##### begin logging_search_logs(init_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(init_t) depth: 3
 	
	
	


	allow init_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(init_t) depth: 2
 	
	allow init_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(init_t) depth: 1
 	

	 	 	 	
##### end auth_rw_login_records(init_t) depth: 0
 	

	



	
		
	



	
		
	


# Run the shell in the sysadm_t domain for single-user mode.

	
		
	 	 	 	 	
##### begin userdom_shell_domtrans_sysadm(init_t) depth: 1
 	
	
		#cjp: need to doublecheck this one
		 	 	 	 	
##### begin unconfined_shell_domtrans(init_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_domtrans(init_t,unconfined_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(init_t,unconfined_t) depth: 4
 	
	
	


	allow init_t bin_t:dir { read getattr lock search ioctl };
	allow init_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(init_t,shell_exec_t,unconfined_t) depth: 5
 	
	allow init_t shell_exec_t:file { getattr read execute };
	allow init_t unconfined_t:process transition;
	dontaudit init_t unconfined_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(init_t,shell_exec_t,unconfined_t) depth: 4
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(init_t,unconfined_t) depth: 3
 	
	type_transition init_t shell_exec_t:process unconfined_t;

	 	 	 	
##### end corecmd_shell_domtrans(init_t,unconfined_t) depth: 2
 	

	 	 	 	
##### end unconfined_shell_domtrans(init_t) depth: 1
 	
	

	 	 	 	
##### end userdom_shell_domtrans_sysadm(init_t) depth: 0
 	

	




########################################
#
# Init script local policy
#

allow initrc_t self:process { getpgid setsched setpgid setrlimit getsched };
allow initrc_t self:capability ~{ sys_admin sys_module };
allow initrc_t self:passwd rootok;

# Allow IPC with self
allow initrc_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow initrc_t self:unix_stream_socket { create listen accept ioctl read getattr write setattr append bind connect getopt setopt shutdown connectto };
allow initrc_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow initrc_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow initrc_t self:fifo_file { getattr read write append ioctl lock };
allow initrc_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };

allow initrc_t init_t:fd use;

allow initrc_t initrc_devpts_t:chr_file { getattr read write ioctl };
 	 	 	 	
##### begin term_create_pty(initrc_t,initrc_devpts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t ptmx_t:chr_file { getattr read write append ioctl lock };

	allow initrc_t devpts_t:dir { read getattr lock search ioctl };
	allow initrc_t devpts_t:filesystem getattr;
	dontaudit initrc_t bsdpty_device_t:chr_file { getattr read write };
	type_transition initrc_t devpts_t:chr_file initrc_devpts_t;

	 	 	 	
##### end term_create_pty(initrc_t,initrc_devpts_t) depth: 0
 	


	
	


	allow initrc_t initrc_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow initrc_t initrc_state_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow initrc_t initrc_state_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow initrc_t initrc_state_t:lnk_file { create read getattr setattr unlink rename };

allow initrc_t initrc_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_pid_filetrans(initrc_t,initrc_var_run_t,file) depth: 1
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition initrc_t var_run_t:file initrc_var_run_t;

	 	 	 	
##### end files_pid_filetrans(initrc_t,initrc_var_run_t,file) depth: 0
 	


	
	


	allow initrc_t initrc_tmp_t:file { { read getattr lock execute ioctl } execute_no_trans };

allow initrc_t initrc_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow initrc_t initrc_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
 	 	 	 	
##### begin files_tmp_filetrans(initrc_t,initrc_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow initrc_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition initrc_t tmp_t:{ file dir } initrc_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(initrc_t,initrc_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin init_write_initctl(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t initctl_t:fifo_file write;

	 	 	 	
##### end init_write_initctl(initrc_t) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(initrc_t) depth: 1
 	
	
	


	allow initrc_t proc_t:dir { read getattr lock search ioctl };
	allow initrc_t proc_t:lnk_file { getattr read };
	allow initrc_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_software_raid_state(initrc_t) depth: 1
 	
	
	


	allow initrc_t proc_t:dir { read getattr lock search ioctl };
	allow initrc_t proc_mdstat_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_software_raid_state(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(initrc_t) depth: 1
 	
	
	


	allow initrc_t proc_t:dir search;
	allow initrc_t proc_net_t:dir { read getattr lock search ioctl };
	allow initrc_t proc_net_t:file { read getattr lock ioctl };
	allow initrc_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_ring_buffer(initrc_t) depth: 1
 	
	
	


	allow initrc_t kernel_t:system syslog_read;

	 	 	 	
##### end kernel_read_ring_buffer(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_change_ring_buffer_level(initrc_t) depth: 1
 	
	
	


	allow initrc_t kernel_t:system syslog_console;

	 	 	 	
##### end kernel_change_ring_buffer_level(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_clear_ring_buffer(initrc_t) depth: 1
 	
	
	


	allow initrc_t kernel_t:system syslog_mod;

	 	 	 	
##### end kernel_clear_ring_buffer(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_get_sysvipc_info(initrc_t) depth: 1
 	
	
	


	allow initrc_t kernel_t:system ipc_info;

	 	 	 	
##### end kernel_get_sysvipc_info(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_all_sysctls(initrc_t) depth: 1
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow initrc_t { proc_t proc_net_t }:dir search;

	allow initrc_t sysctl_type:dir { read getattr lock search ioctl };
	allow initrc_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(initrc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rw_all_sysctls(initrc_t) depth: 1
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow initrc_t { proc_t proc_net_t }:dir search;

	allow initrc_t sysctl_type:dir { read getattr lock search ioctl };
	allow initrc_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(initrc_t) depth: 0
 	
# for lsof which is used by alsa shutdown:
 	 	 	 	
##### begin kernel_dontaudit_getattr_message_if(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t proc_kmsg_t:file getattr;

	 	 	 	
##### end kernel_dontaudit_getattr_message_if(initrc_t) depth: 0
 	

 	 	 	 	
##### begin files_read_kernel_symbol_table(initrc_t) depth: 1
 	
	
	


	allow initrc_t boot_t:dir { read getattr lock search ioctl };
	allow initrc_t system_map_t:file { read getattr lock ioctl };

	# cjp: this should be dropped:
	allow initrc_t boot_t:file { getattr read };

	 	 	 	
##### end files_read_kernel_symbol_table(initrc_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(initrc_t) depth: 1
 	
	
	


	allow initrc_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(initrc_t) depth: 2
 	
	
	


	allow initrc_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow initrc_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(initrc_t) depth: 2
 	
	
	


	allow initrc_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(initrc_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(initrc_t) depth: 2
 	
	
	


	allow initrc_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(initrc_t) depth: 2
 	
	
	


	allow initrc_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(initrc_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(initrc_t) depth: 1
 	
	
	


	allow initrc_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(initrc_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(initrc_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(initrc_t) depth: 1
 	
	
	


	allow initrc_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(initrc_t) depth: 2
 	
	
	


	allow initrc_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(initrc_t) depth: 2
 	
	
	


	allow initrc_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(initrc_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(initrc_t) depth: 2
 	
	
	


	allow initrc_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(initrc_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(initrc_t) depth: 1
 	
	
	


	allow initrc_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(initrc_t) depth: 1
 	
	
	


	allow initrc_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(initrc_t) depth: 1
 	
	
	


	allow initrc_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(initrc_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_rand(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_urand(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_write_rand(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t random_device_t:chr_file { getattr write ioctl };

	 	 	 	
##### end dev_write_rand(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_write_urand(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t urandom_device_t:chr_file { getattr write ioctl };

	 	 	 	
##### end dev_write_urand(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_rw_sysfs(initrc_t) depth: 1
 	
	
	


	allow initrc_t sysfs_t:dir { read getattr lock search ioctl };
	allow initrc_t sysfs_t:lnk_file { read getattr lock ioctl };
	allow initrc_t sysfs_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_sysfs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_list_usbfs(initrc_t) depth: 1
 	
	
	


	allow initrc_t usbfs_t:dir { read getattr lock search ioctl };
	allow initrc_t usbfs_t:lnk_file { read getattr lock ioctl };
	allow initrc_t usbfs_t:file getattr;

	 	 	 	
##### end dev_list_usbfs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_framebuffer(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t framebuf_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_framebuffer(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_realtime_clock(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t clock_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_realtime_clock(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_sound_mixer(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t sound_device_t:chr_file { getattr read ioctl };

	 	 	 	
##### end dev_read_sound_mixer(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_write_sound_mixer(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t sound_device_t:chr_file { getattr write ioctl };

	 	 	 	
##### end dev_write_sound_mixer(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_all_chr_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_node:chr_file setattr;

	 	 	 	
##### end dev_setattr_all_chr_files(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_lvm_control(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t lvm_control_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_lvm_control(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_delete_lvm_control_dev(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { getattr search read write remove_name };
	allow initrc_t lvm_control_t:chr_file unlink;

	 	 	 	
##### end dev_delete_lvm_control_dev(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_manage_generic_symlinks(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t device_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end dev_manage_generic_symlinks(initrc_t) depth: 0
 	
 	 	 	 	
##### begin dev_manage_generic_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t device_t:file { create getattr setattr read write append rename link unlink ioctl lock };

	 	 	 	
##### end dev_manage_generic_files(initrc_t) depth: 0
 	
# Wants to remove udev.tbl:
 	 	 	 	
##### begin dev_delete_generic_symlinks(initrc_t) depth: 1
 	
	
	


	allow initrc_t device_t:dir { getattr read write remove_name };
	allow initrc_t device_t:lnk_file unlink;

	 	 	 	
##### end dev_delete_generic_symlinks(initrc_t) depth: 0
 	

 	 	 	 	
##### begin fs_register_binary_executable_type(initrc_t) depth: 1
 	
	
	


	allow initrc_t binfmt_misc_fs_t:dir { getattr search };
	allow initrc_t binfmt_misc_fs_t:file { getattr ioctl write };

	 	 	 	
##### end fs_register_binary_executable_type(initrc_t) depth: 0
 	
# rhgb-console writes to ramfs
 	 	 	 	
##### begin fs_write_ramfs_pipes(initrc_t) depth: 1
 	
	
	


	allow initrc_t ramfs_t:fifo_file write;

	 	 	 	
##### end fs_write_ramfs_pipes(initrc_t) depth: 0
 	
# cjp: not sure why these are here; should use mount policy
 	 	 	 	
##### begin fs_mount_all_fs(initrc_t) depth: 1
 	
	
	


	allow initrc_t filesystem_type:filesystem mount;

	 	 	 	
##### end fs_mount_all_fs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin fs_unmount_all_fs(initrc_t) depth: 1
 	
	
	


	allow initrc_t filesystem_type:filesystem unmount;

	 	 	 	
##### end fs_unmount_all_fs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin fs_remount_all_fs(initrc_t) depth: 1
 	
	
	


	allow initrc_t filesystem_type:filesystem remount;

	 	 	 	
##### end fs_remount_all_fs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin fs_getattr_all_fs(initrc_t) depth: 1
 	
	
	


	allow initrc_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(initrc_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_enforce_mode(initrc_t) depth: 1
 	
	
	


	allow initrc_t security_t:dir { read search getattr };
	allow initrc_t security_t:file { getattr read };

	 	 	 	
##### end selinux_get_enforce_mode(initrc_t) depth: 0
 	

 	 	 	 	
##### begin storage_getattr_fixed_disk_dev(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t fixed_disk_device_t:blk_file getattr;

	 	 	 	
##### end storage_getattr_fixed_disk_dev(initrc_t) depth: 0
 	
 	 	 	 	
##### begin storage_setattr_fixed_disk_dev(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t fixed_disk_device_t:blk_file setattr;

	 	 	 	
##### end storage_setattr_fixed_disk_dev(initrc_t) depth: 0
 	
 	 	 	 	
##### begin storage_setattr_removable_dev(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t removable_device_t:blk_file setattr;

	 	 	 	
##### end storage_setattr_removable_dev(initrc_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_terms(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t devpts_t:dir { read getattr lock search ioctl };
	allow initrc_t { console_device_t tty_device_t ttynode ptynode }:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_all_terms(initrc_t) depth: 0
 	
 	 	 	 	
##### begin term_reset_tty_labels(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t ttynode:chr_file relabelfrom;
	allow initrc_t tty_device_t:chr_file relabelto;

	 	 	 	
##### end term_reset_tty_labels(initrc_t) depth: 0
 	

 	 	 	 	
##### begin auth_rw_login_records(initrc_t) depth: 1
 	
	
	


	allow initrc_t wtmp_t:file { getattr read write append ioctl lock };
	 	 	 	 	
##### begin logging_search_logs(initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 3
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 2
 	
	allow initrc_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(initrc_t) depth: 1
 	

	 	 	 	
##### end auth_rw_login_records(initrc_t) depth: 0
 	
 	 	 	 	
##### begin auth_setattr_login_records(initrc_t) depth: 1
 	
	
	


	allow initrc_t wtmp_t:file setattr;
	 	 	 	 	
##### begin logging_search_logs(initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 3
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 2
 	
	allow initrc_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(initrc_t) depth: 1
 	

	 	 	 	
##### end auth_setattr_login_records(initrc_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_lastlog(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 3
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 2
 	
	allow initrc_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(initrc_t) depth: 1
 	
	allow initrc_t lastlog_t:file { getattr read write setattr };

	 	 	 	
##### end auth_rw_lastlog(initrc_t) depth: 0
 	
 	 	 	 	
##### begin auth_read_pam_pid(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_pids(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(initrc_t) depth: 1
 	
	allow initrc_t pam_var_run_t:dir { read getattr lock search ioctl };
	allow initrc_t pam_var_run_t:file { read getattr lock ioctl };

	 	 	 	
##### end auth_read_pam_pid(initrc_t) depth: 0
 	
 	 	 	 	
##### begin auth_delete_pam_pid(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_pids(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(initrc_t) depth: 1
 	
	allow initrc_t pam_var_run_t:dir { getattr search read write remove_name };
	allow initrc_t pam_var_run_t:file { getattr unlink };

	 	 	 	
##### end auth_delete_pam_pid(initrc_t) depth: 0
 	
 	 	 	 	
##### begin auth_delete_pam_console_data(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_pids(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(initrc_t) depth: 1
 	
	allow initrc_t pam_var_console_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t pam_var_console_t:file unlink;

	 	 	 	
##### end auth_delete_pam_console_data(initrc_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(initrc_t) depth: 1
 	
	
	


	allow initrc_t bin_t:dir { read getattr lock search ioctl };
	allow initrc_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow initrc_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(initrc_t) depth: 1
 	
	
	


	allow initrc_t sbin_t:dir { read getattr lock search ioctl };
	allow initrc_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow initrc_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(initrc_t) depth: 1
 	
	
	


	allow initrc_t bin_t:dir { read getattr lock search ioctl };
	allow initrc_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow initrc_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(initrc_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_ls(initrc_t) depth: 1
 	
	
	


	allow initrc_t bin_t:dir { read getattr lock search ioctl };
	allow initrc_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow initrc_t ls_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_ls(initrc_t) depth: 0
 	

 	 	 	 	
##### begin domain_kill_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process sigkill;
	allow initrc_t self:capability kill;

	 	 	 	
##### end domain_kill_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_signal_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process signal;

	 	 	 	
##### end domain_signal_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_signull_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process signull;

	 	 	 	
##### end domain_signull_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_sigstop_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process sigstop;

	 	 	 	
##### end domain_sigstop_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_sigstop_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process sigstop;

	 	 	 	
##### end domain_sigstop_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_sigchld_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process sigchld;

	 	 	 	
##### end domain_sigchld_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_read_all_domains_state(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_search_proc(initrc_t) depth: 2
 	
	
	


	allow initrc_t proc_t:dir search;

	 	 	 	
##### end kernel_search_proc(initrc_t) depth: 1
 	
	allow initrc_t domain:dir { read getattr lock search ioctl };
	allow initrc_t domain:lnk_file { read getattr lock ioctl };
	allow initrc_t domain:file { read getattr lock ioctl };

	 	 	 	
##### end domain_read_all_domains_state(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_getattr_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process getattr;

	 	 	 	
##### end domain_getattr_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_dontaudit_ptrace_all_domains(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t domain:process ptrace;

	 	 	 	
##### end domain_dontaudit_ptrace_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_getsession_all_domains(initrc_t) depth: 1
 	
	
	


	allow initrc_t domain:process getsession;

	 	 	 	
##### end domain_getsession_all_domains(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_use_interactive_fds(initrc_t) depth: 1
 	
	
	


	allow initrc_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_exec_all_entry_files(initrc_t) depth: 1
 	
	
	


	
	
	


	allow initrc_t entry_type:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end domain_exec_all_entry_files(initrc_t) depth: 0
 	
# for lsof which is used by alsa shutdown:
 	 	 	 	
##### begin domain_dontaudit_getattr_all_udp_sockets(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t domain:udp_socket getattr;

	 	 	 	
##### end domain_dontaudit_getattr_all_udp_sockets(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_dontaudit_getattr_all_tcp_sockets(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t domain:tcp_socket getattr;

	 	 	 	
##### end domain_dontaudit_getattr_all_tcp_sockets(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_dontaudit_getattr_all_dgram_sockets(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t domain:unix_dgram_socket getattr;

	 	 	 	
##### end domain_dontaudit_getattr_all_dgram_sockets(initrc_t) depth: 0
 	
 	 	 	 	
##### begin domain_dontaudit_getattr_all_pipes(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t domain:fifo_file getattr;

	 	 	 	
##### end domain_dontaudit_getattr_all_pipes(initrc_t) depth: 0
 	

 	 	 	 	
##### begin files_getattr_all_dirs(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_type:dir { getattr search };

	 	 	 	
##### end files_getattr_all_dirs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_all_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_type:dir search;
	allow initrc_t file_type:file getattr;
	allow initrc_t file_type:lnk_file getattr;

	 	 	 	
##### end files_getattr_all_files(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_all_symlinks(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_type:dir search;
	allow initrc_t file_type:lnk_file getattr;

	 	 	 	
##### end files_getattr_all_symlinks(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_all_pipes(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_type:dir search;
	allow initrc_t file_type:fifo_file getattr;

	 	 	 	
##### end files_getattr_all_pipes(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_all_sockets(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_type:dir search;
	allow initrc_t file_type:sock_file getattr;

	 	 	 	
##### end files_getattr_all_sockets(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_purge_tmp(initrc_t) depth: 1
 	
	
	


	allow initrc_t tmpfile:dir { { read getattr lock search ioctl add_name remove_name write } rmdir };
	allow initrc_t tmpfile:{ file lnk_file sock_file fifo_file } { getattr unlink };

	 	 	 	
##### end files_purge_tmp(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_delete_all_locks(initrc_t) depth: 1
 	
	
	


	allow initrc_t lockfile:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t lockfile:file { getattr unlink };

	 	 	 	
##### end files_delete_all_locks(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_read_all_pids(initrc_t) depth: 1
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t pidfile:dir { read getattr lock search ioctl };
	allow initrc_t pidfile:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_all_pids(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_delete_all_pids(initrc_t) depth: 1
 	
	
	


	allow initrc_t var_t:dir search;
	allow initrc_t var_run_t:{ sock_file lnk_file } { getattr unlink };
	allow initrc_t var_run_t:dir rmdir;
	allow initrc_t pidfile:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t pidfile:file { getattr unlink };
	allow initrc_t pidfile:sock_file { getattr unlink };

	 	 	 	
##### end files_delete_all_pids(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_delete_all_pid_dirs(initrc_t) depth: 1
 	
	
	


	allow initrc_t var_t:dir search;
	allow initrc_t pidfile:dir { { read getattr lock search ioctl add_name remove_name write } rmdir };

	 	 	 	
##### end files_delete_all_pid_dirs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t etc_t:dir { read getattr lock search ioctl };
	allow initrc_t etc_t:file { read getattr lock ioctl };
	allow initrc_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_etc_runtime_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t etc_runtime_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	type_transition initrc_t etc_t:file etc_runtime_t;

	 	 	 	
##### end files_manage_etc_runtime_files(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_generic_locks(initrc_t) depth: 1
 	
	
	


	allow initrc_t var_lock_t:dir { getattr search create read write setattr add_name remove_name rmdir };
	allow initrc_t var_lock_t:file { getattr create read write setattr unlink };

	 	 	 	
##### end files_manage_generic_locks(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_exec_etc_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t etc_t:dir { read getattr lock search ioctl };
	allow initrc_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow initrc_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(initrc_t) depth: 1
 	
	
	


	allow initrc_t usr_t:dir { read getattr lock search ioctl };
	allow initrc_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_urandom_seed(initrc_t) depth: 1
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t var_lib_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t var_lib_t:file { create getattr setattr read write append rename link unlink ioctl lock };

	 	 	 	
##### end files_manage_urandom_seed(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_generic_spool(initrc_t) depth: 1
 	
	
	


	allow initrc_t var_t:dir search;
	allow initrc_t var_spool_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t var_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end files_manage_generic_spool(initrc_t) depth: 0
 	
# Mount and unmount file systems.
# cjp: not sure why these are here; should use mount policy
 	 	 	 	
##### begin files_list_isid_type_dirs(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_isid_type_dirs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_mounton_isid_type_dirs(initrc_t) depth: 1
 	
	
	


	allow initrc_t file_t:dir { getattr search mounton };

	 	 	 	
##### end files_mounton_isid_type_dirs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_list_default(initrc_t) depth: 1
 	
	
	


	allow initrc_t default_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_default(initrc_t) depth: 0
 	
 	 	 	 	
##### begin files_mounton_default(initrc_t) depth: 1
 	
	
	


	allow initrc_t default_t:dir { getattr search mounton };

	 	 	 	
##### end files_mounton_default(initrc_t) depth: 0
 	

 	 	 	 	
##### begin libs_rw_ld_so_cache(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(initrc_t) depth: 1
 	
	allow initrc_t ld_so_cache_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end libs_rw_ld_so_cache(initrc_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_ld_so(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(initrc_t) depth: 1
 	
	allow initrc_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_t lib_t:lnk_file { read getattr lock ioctl };
	allow initrc_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow initrc_t ld_so_t:file { read getattr lock execute ioctl };
	allow initrc_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(initrc_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(initrc_t) depth: 2
 	
	
	


	allow initrc_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(initrc_t) depth: 1
 	
	allow initrc_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_t lib_t:lnk_file { read getattr lock ioctl };
	allow initrc_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow initrc_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow initrc_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin libs_exec_lib_files(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(initrc_t) depth: 2
 	
	
	


	allow initrc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(initrc_t) depth: 1
 	
	allow initrc_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_t lib_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow initrc_t lib_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end libs_exec_lib_files(initrc_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(initrc_t) depth: 1
 	
	
	


	allow initrc_t devlog_t:lnk_file read;
	allow initrc_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow initrc_t syslogd_t:unix_dgram_socket sendto;
	allow initrc_t syslogd_t:unix_stream_socket connectto;
	allow initrc_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow initrc_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 3
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	allow initrc_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(initrc_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(initrc_t) depth: 0
 	
 	 	 	 	
##### begin logging_manage_generic_logs(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 1
 	
	allow initrc_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow initrc_t var_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end logging_manage_generic_logs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin logging_read_all_logs(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 1
 	
	allow initrc_t var_log_t:dir { read getattr lock search ioctl };
	allow initrc_t logfile:file { read getattr lock ioctl };

	 	 	 	
##### end logging_read_all_logs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin logging_append_all_logs(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(initrc_t) depth: 1
 	
	allow initrc_t var_log_t:dir { read getattr lock search ioctl };
	allow initrc_t logfile:file { getattr append };

	 	 	 	
##### end logging_append_all_logs(initrc_t) depth: 0
 	
 	 	 	 	
##### begin logging_read_audit_config(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 1
 	
	allow initrc_t auditd_etc_t:file { read getattr lock ioctl };

	 	 	 	
##### end logging_read_audit_config(initrc_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 1
 	
	# FIXME: initrc_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(initrc_t) depth: 2
 	
	
	


	allow initrc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(initrc_t) depth: 1
 	
	allow initrc_t locale_t:dir { read getattr lock search ioctl };
	allow initrc_t locale_t:lnk_file { read getattr lock ioctl };
	allow initrc_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(initrc_t) depth: 3
 	
	
	


	allow initrc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(initrc_t) depth: 2
 	
	allow initrc_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(initrc_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(initrc_t) depth: 0
 	
# slapd needs to read cert files from its initscript
 	 	 	 	
##### begin miscfiles_read_certs(initrc_t) depth: 1
 	
	
	


	allow initrc_t cert_t:dir { read getattr lock search ioctl };
	allow initrc_t cert_t:file { read getattr lock ioctl };
	allow initrc_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(initrc_t) depth: 0
 	

 	 	 	 	
##### begin mcs_killall(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t mcskillall;

	 	 	 	
##### end mcs_killall(initrc_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(initrc_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(initrc_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_read_up(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t mlsprocread;

	 	 	 	
##### end mls_process_read_up(initrc_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_write_down(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t mlsprocwrite;

	 	 	 	
##### end mls_process_write_down(initrc_t) depth: 0
 	
 	 	 	 	
##### begin mls_rangetrans_source(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t privrangetrans;

	 	 	 	
##### end mls_rangetrans_source(initrc_t) depth: 0
 	

 	 	 	 	
##### begin modutils_read_module_config(initrc_t) depth: 1
 	
	
	


	# This file type can be in /etc or
	# /lib(64)?/modules
	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_boot(initrc_t) depth: 2
 	
	
	


	allow initrc_t boot_t:dir { getattr search };

	 	 	 	
##### end files_search_boot(initrc_t) depth: 1
 	

	allow initrc_t modules_conf_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end modutils_read_module_config(initrc_t) depth: 0
 	
 	 	 	 	
##### begin modutils_domtrans_insmod(initrc_t) depth: 1
 	
	
	


#	if (!secure_mode_insmod) {
#		modutils_domtrans_insmod_uncond(initrc_t)
#	}

	 	 	 	
##### end modutils_domtrans_insmod(initrc_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 1
 	
	allow initrc_t selinux_config_t:dir { read getattr lock search ioctl };
	allow initrc_t selinux_config_t:file { read getattr lock ioctl };
	allow initrc_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(initrc_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 1
 	
	allow initrc_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(initrc_t) depth: 0
 	

 	 	 	 	
##### begin udev_rw_db(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 2
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 1
 	
	allow initrc_t udev_tdb_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end udev_rw_db(initrc_t) depth: 0
 	

 	 	 	 	
##### begin userdom_read_all_users_home_content_files(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_home(initrc_t) depth: 2
 	
	
	


	allow initrc_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(initrc_t) depth: 1
 	
	allow initrc_t home_type:dir { read getattr lock search ioctl };
	allow initrc_t home_type:file { read getattr lock ioctl };

	 	 	 	
##### end userdom_read_all_users_home_content_files(initrc_t) depth: 0
 	
# Allow access to the sysadm TTYs. Note that this will give access to the 
# TTYs to any process in the initrc_t domain. Therefore, daemons and such
# started from init should be placed in their own domain.
 	 	 	 	
##### begin userdom_use_sysadm_terms(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin userdom_use_sysadm_ttys(initrc_t) depth: 2
 	
	
		 	 	 	 	
##### begin term_use_unallocated_ttys(initrc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 4
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 3
 	
	allow initrc_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(initrc_t) depth: 2
 	
	

	 	 	 	
##### end userdom_use_sysadm_ttys(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin userdom_use_sysadm_ptys(initrc_t) depth: 2
 	
	
		 	 	 	 	
##### begin term_use_generic_ptys(initrc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_t) depth: 4
 	
	
	


	allow initrc_t device_t:dir { read getattr lock search ioctl };
	allow initrc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_t) depth: 3
 	
	allow initrc_t devpts_t:dir { getattr search read lock ioctl };
	allow initrc_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(initrc_t) depth: 2
 	
	

	 	 	 	
##### end userdom_use_sysadm_ptys(initrc_t) depth: 1
 	

	 	 	 	
##### end userdom_use_sysadm_terms(initrc_t) depth: 0
 	










	 	 	 	 	
##### begin domain_subj_id_change_exemption(initrc_t) depth: 1
 	
	
	


	typeattribute initrc_t can_change_process_identity;

	 	 	 	
##### end domain_subj_id_change_exemption(initrc_t) depth: 0
 	
	 	 	 	 	
##### begin unconfined_domain(initrc_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(initrc_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow initrc_t self:capability *;
	allow initrc_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow initrc_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow initrc_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow initrc_t self:nscd *;
	allow initrc_t self:dbus *;
	allow initrc_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(initrc_t) depth: 3
 	
	
	


	allow initrc_t proc_type:{ dir file } *;

	allow initrc_t sysctl_t:{ dir file } *;

	allow initrc_t kernel_t:system *;

	allow initrc_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow initrc_t unlabeled_t:filesystem *;
	allow initrc_t unlabeled_t:association *;

	typeattribute initrc_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute initrc_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(initrc_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow initrc_t { proc_t proc_net_t }:dir search;

	allow initrc_t sysctl_type:dir { read getattr lock search ioctl };
	allow initrc_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(initrc_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(initrc_t) depth: 3
 	
	
	


	allow initrc_t node_type:node *;
	allow initrc_t netif_type:netif *;
	allow initrc_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow initrc_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow initrc_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow initrc_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(initrc_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(initrc_t) depth: 5
 	
	
	


	allow initrc_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(initrc_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(initrc_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(initrc_t) depth: 3
 	
	
	


	allow initrc_t device_node:{ chr_file blk_file } *;
	allow initrc_t mtrr_device_t:{ dir file } *;

	allow initrc_t self:capability sys_rawio;
	typeattribute initrc_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(initrc_t) depth: 3
 	
	
	


	typeattribute initrc_t unconfined_domain_type;

	# pass all constraints
	typeattribute initrc_t can_change_process_identity;
	typeattribute initrc_t can_change_process_role;
	typeattribute initrc_t can_change_object_identity;
	typeattribute initrc_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow initrc_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow initrc_t domain:fd use;
	allow initrc_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow initrc_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow initrc_t domain:{ sem msgq shm } *;
	allow initrc_t domain:msg { send receive };

	# For /proc/pid
	allow initrc_t domain:dir { read getattr lock search ioctl };
	allow initrc_t domain:file { read getattr lock ioctl };
	allow initrc_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(initrc_t) depth: 3
 	
	
	


	dontaudit initrc_t domain:dir { read getattr lock search ioctl };
	dontaudit initrc_t domain:lnk_file { read getattr lock ioctl };
	dontaudit initrc_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit initrc_t domain:sock_file { read getattr lock ioctl };
	dontaudit initrc_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(initrc_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow initrc_t file_type:{ file chr_file } ~execmod;
	allow initrc_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow initrc_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow initrc_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow initrc_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(initrc_t) depth: 3
 	
	
	


	allow initrc_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow initrc_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(initrc_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(initrc_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow initrc_t security_t:dir { getattr search read };
	allow initrc_t security_t:file { getattr read write };

	typeattribute initrc_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow initrc_t security_t:security *;
		auditallow initrc_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(initrc_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow initrc_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow initrc_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow initrc_t self:process execstack;
		auditallow initrc_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit initrc_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(initrc_t) depth: 3
 	
	
	


	typeattribute initrc_t can_read_shadow_passwords;
	typeattribute initrc_t can_write_shadow_passwords;
	typeattribute initrc_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(initrc_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(initrc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(initrc_t) depth: 4
 	
	
	


	allow initrc_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(initrc_t) depth: 3
 	
	allow initrc_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_t lib_t:lnk_file { read getattr lock ioctl };
	allow initrc_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow initrc_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow initrc_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(initrc_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(initrc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 4
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 3
 	
	allow initrc_t selinux_config_t:dir search;
	allow initrc_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow initrc_t policy_config_t:file { getattr create write };
#	typeattribute initrc_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(initrc_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(initrc_t) depth: 3
 	
	
	


	allow initrc_t policy_config_t:file relabelto;
	typeattribute initrc_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(initrc_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(initrc_t) depth: 3
 	
	
	


	allow initrc_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow initrc_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute initrc_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute initrc_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(initrc_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(initrc_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow initrc_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow initrc_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(initrc_t) depth: 0
 	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin automount_exec_config(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(initrc_t) depth: 2
 	
	
	


	allow initrc_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(initrc_t) depth: 1
 	
	
	
	


	allow initrc_t automount_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end automount_exec_config(initrc_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin bind_read_config(initrc_t) depth: 1
 	
	
	


	allow initrc_t named_conf_t:dir search;
	allow initrc_t named_conf_t:file { getattr read };

	 	 	 	
##### end bind_read_config(initrc_t) depth: 0
 	

	# for chmod in start script
	 	 	 	 	
##### begin bind_setattr_pid_dirs(initrc_t) depth: 1
 	
	
	


	allow initrc_t named_var_run_t:dir setattr;

	 	 	 	
##### end bind_setattr_pid_dirs(initrc_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin daemontools_manage_svc(initrc_t) depth: 1
 	
	
	


	allow initrc_t svc_svc_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow initrc_t svc_svc_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow initrc_t svc_svc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow initrc_t svc_svc_t:lnk_file { read create };

	 	 	 	
##### end daemontools_manage_svc(initrc_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin mta_read_config(initrc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_t) depth: 2
 	
	
	


	allow initrc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_t) depth: 1
 	
	allow initrc_t etc_mail_t:dir { getattr search read lock ioctl };
	allow initrc_t etc_mail_t:file { read getattr lock ioctl };
	allow initrc_t etc_mail_t:lnk_file { getattr read };

	 	 	 	
##### end mta_read_config(initrc_t) depth: 0
 	
	 	 	 	 	
##### begin mta_dontaudit_read_spool_symlinks(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t mail_spool_t:lnk_file read;

	 	 	 	
##### end mta_dontaudit_read_spool_symlinks(initrc_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin postfix_list_spool(initrc_t) depth: 1
 	
	
	


	allow initrc_t postfix_spool_t:dir { getattr search read lock ioctl };
	 	 	 	 	
##### begin files_search_spool(initrc_t) depth: 2
 	
	
	


	allow initrc_t var_t:dir { getattr search };
	allow initrc_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(initrc_t) depth: 1
 	

	 	 	 	
##### end postfix_list_spool(initrc_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin ssh_dontaudit_read_server_keys(initrc_t) depth: 1
 	
	
	


	dontaudit initrc_t sshd_key_t:file { getattr read };

	 	 	 	
##### end ssh_dontaudit_read_server_keys(initrc_t) depth: 0
 	

	


# allow init scripts to su

	
		
	 	 	 	 	
##### begin su_restricted_domain_template(initrc,initrc_t,system_r) depth: 1
 	
	
	


	type initrc_su_t;
	 	 	 	 	
##### begin domain_entry_file(initrc_su_t,su_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(su_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(su_exec_t) depth: 4
 	
	
	


	allow su_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(su_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(su_exec_t) depth: 4
 	
	
	


	allow su_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(su_exec_t) depth: 3
 	
	typeattribute su_exec_t file_type;

	 	 	 	
##### end files_type(su_exec_t) depth: 2
 	

	allow initrc_su_t su_exec_t:file entrypoint;
	allow initrc_su_t su_exec_t:file { read getattr lock execute ioctl };

	typeattribute su_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(initrc_su_t,su_exec_t) depth: 1
 	
	 	 	 	 	
##### begin domain_type(initrc_su_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(initrc_su_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute initrc_su_t domain;

	# allow the domain to read its /proc/pid entries
	allow initrc_su_t self:dir { read getattr lock search ioctl };
	allow initrc_su_t self:lnk_file { read getattr lock ioctl };
	allow initrc_su_t self:file { getattr read write append ioctl lock };

	# allow initrc_su_t to create child processes in this domain
	allow initrc_su_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types initrc_su_t;
		role sysadm_r types initrc_su_t;
		role user_r types initrc_su_t;
		role staff_r types initrc_su_t;
	

	 	 	 	
##### end domain_base_type(initrc_su_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(initrc_su_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_su_t) depth: 3
 	
	allow initrc_su_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(initrc_su_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t root_t:dir { read getattr lock search ioctl };
	allow initrc_su_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(initrc_su_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t init_t:process signull;

	 	 	 	
##### end init_signull(initrc_su_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(initrc_su_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(initrc_su_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(initrc_su_t) depth: 3
 	
	
	


	dontaudit initrc_su_t security_t:dir search;
	dontaudit initrc_su_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(initrc_su_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(initrc_su_t) depth: 3
 	
	
	


	dontaudit initrc_su_t selinux_config_t:dir search;
	dontaudit initrc_su_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(initrc_su_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin domain_interactive_fd(initrc_su_t) depth: 2
 	
	
	


	typeattribute initrc_su_t privfd;

	 	 	 	
##### end domain_interactive_fd(initrc_su_t) depth: 1
 	
	role system_r types initrc_su_t;

	allow initrc_t initrc_su_t:process signal;

	allow initrc_su_t self:capability { audit_control audit_write setuid setgid net_bind_service chown dac_override fowner sys_nice sys_resource };
	dontaudit initrc_su_t self:capability sys_tty_config;
	allow initrc_su_t self:process { setexec setsched setrlimit };
	allow initrc_su_t self:fifo_file { getattr read write append ioctl lock };
	allow initrc_su_t self:netlink_audit_socket { nlmsg_relay { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } };
	allow initrc_su_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };

	# Transition from the user domain to this domain.
	 	 	 	 	
##### begin domain_auto_trans(initrc_t,su_exec_t,initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,su_exec_t,initrc_su_t) depth: 3
 	
	allow initrc_t su_exec_t:file { getattr read execute };
	allow initrc_t initrc_su_t:process transition;
	dontaudit initrc_t initrc_su_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,su_exec_t,initrc_su_t) depth: 2
 	
	type_transition initrc_t su_exec_t:process initrc_su_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,su_exec_t,initrc_su_t) depth: 1
 	
	allow initrc_su_t initrc_t:fd use;
	allow initrc_su_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow initrc_su_t initrc_t:process sigchld;

	# By default, revert to the calling domain when a shell is executed.
	 	 	 	 	
##### begin corecmd_shell_domtrans(initrc_su_t,initrc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(initrc_su_t,initrc_t) depth: 3
 	
	
	


	allow initrc_su_t bin_t:dir { read getattr lock search ioctl };
	allow initrc_su_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(initrc_su_t,shell_exec_t,initrc_t) depth: 4
 	
	allow initrc_su_t shell_exec_t:file { getattr read execute };
	allow initrc_su_t initrc_t:process transition;
	dontaudit initrc_su_t initrc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_su_t,shell_exec_t,initrc_t) depth: 3
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(initrc_su_t,initrc_t) depth: 2
 	
	type_transition initrc_su_t shell_exec_t:process initrc_t;

	 	 	 	
##### end corecmd_shell_domtrans(initrc_su_t,initrc_t) depth: 1
 	
	allow initrc_t initrc_su_t:fd use;
	allow initrc_t initrc_su_t:fifo_file { getattr read write append ioctl lock };
	allow initrc_t initrc_su_t:process sigchld;

	 	 	 	 	
##### begin kernel_read_system_state(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t proc_t:dir { read getattr lock search ioctl };
	allow initrc_su_t proc_t:lnk_file { getattr read };
	allow initrc_su_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_read_kernel_sysctls(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t proc_t:dir search;
	allow initrc_su_t sysctl_t:dir { read getattr lock search ioctl };
	allow initrc_su_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow initrc_su_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(initrc_su_t) depth: 1
 	

	# for SSP
	 	 	 	 	
##### begin dev_read_urand(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin files_read_etc_files(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t etc_t:dir { read getattr lock search ioctl };
	allow initrc_su_t etc_t:file { read getattr lock ioctl };
	allow initrc_su_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t etc_t:dir { read getattr lock search ioctl };
	allow initrc_su_t etc_runtime_t:file { read getattr lock ioctl };
	allow initrc_su_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_var_lib(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin files_dontaudit_getattr_tmp_dirs(initrc_su_t) depth: 2
 	
	
	


	dontaudit initrc_su_t tmp_t:dir getattr;

	 	 	 	
##### end files_dontaudit_getattr_tmp_dirs(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin auth_domtrans_chk_passwd(initrc_su_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin domain_auto_trans(initrc_su_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(initrc_su_t,chkpwd_exec_t,system_chkpwd_t) depth: 4
 	
	allow initrc_su_t chkpwd_exec_t:file { getattr read execute };
	allow initrc_su_t system_chkpwd_t:process transition;
	dontaudit initrc_su_t system_chkpwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_su_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	type_transition initrc_su_t chkpwd_exec_t:process system_chkpwd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_su_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	

	allow initrc_su_t self:capability { audit_write audit_control };
	allow initrc_su_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

	allow initrc_su_t system_chkpwd_t:fd use;
	allow system_chkpwd_t initrc_su_t:fd use;
	allow system_chkpwd_t initrc_su_t:fifo_file { getattr read write append ioctl lock };
	allow system_chkpwd_t initrc_su_t:process sigchld;

	dontaudit initrc_su_t shadow_t:file { getattr read };

	 	 	 	 	
##### begin dev_read_rand(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(initrc_su_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_certs(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t cert_t:dir { read getattr lock search ioctl };
	allow initrc_su_t cert_t:file { read getattr lock ioctl };
	allow initrc_su_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(initrc_su_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow initrc_su_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow initrc_su_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(initrc_su_t) depth: 3
 	

	 	 	 	 	
##### begin files_search_etc(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_su_t) depth: 3
 	
	allow initrc_su_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin sysnet_use_ldap(initrc_su_t) depth: 3
 	
	
	
		

	allow initrc_su_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow initrc_su_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(initrc_su_t) depth: 3
 	

	 	 	 	 	
##### begin files_search_etc(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_su_t) depth: 3
 	
	allow initrc_su_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(initrc_su_t) depth: 2
 	

	
	
		
	


	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_domtrans_chk_passwd(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin auth_dontaudit_read_shadow(initrc_su_t) depth: 2
 	
	
	


	dontaudit initrc_su_t shadow_t:file { getattr read };

	 	 	 	
##### end auth_dontaudit_read_shadow(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin auth_use_nsswitch(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t var_auth_t:dir { read getattr lock search ioctl };
	allow initrc_su_t var_auth_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_list_var_lib(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t var_t:dir { getattr search };
	allow initrc_su_t var_lib_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_var_lib(initrc_su_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow initrc_su_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow initrc_su_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(initrc_su_t) depth: 3
 	

	 	 	 	 	
##### begin files_search_etc(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_su_t) depth: 3
 	
	allow initrc_su_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(initrc_su_t) depth: 2
 	
	 	 	 	 	
##### begin sysnet_use_ldap(initrc_su_t) depth: 3
 	
	
	
		

	allow initrc_su_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow initrc_su_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(initrc_su_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 5
 	
	
	


	allow initrc_su_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(initrc_su_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(initrc_su_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(initrc_su_t) depth: 3
 	

	 	 	 	 	
##### begin files_search_etc(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_su_t) depth: 3
 	
	allow initrc_su_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(initrc_su_t) depth: 2
 	

	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_use_nsswitch(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin domain_use_interactive_fds(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin init_dontaudit_use_fds(initrc_su_t) depth: 2
 	
	
	


	dontaudit initrc_su_t init_t:fd use;

	 	 	 	
##### end init_dontaudit_use_fds(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin init_dontaudit_use_script_ptys(initrc_su_t) depth: 2
 	
	
	


	dontaudit initrc_su_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_dontaudit_use_script_ptys(initrc_su_t) depth: 1
 	
	# Write to utmp.
	 	 	 	 	
##### begin init_rw_utmp(initrc_su_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_pids(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t var_t:dir { getattr search };
	allow initrc_su_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(initrc_su_t) depth: 2
 	
	allow initrc_su_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin libs_use_ld_so(initrc_su_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_etc(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(initrc_su_t) depth: 2
 	
	allow initrc_su_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_su_t lib_t:lnk_file { read getattr lock ioctl };
	allow initrc_su_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow initrc_su_t ld_so_t:file { read getattr lock execute ioctl };
	allow initrc_su_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(initrc_su_t) depth: 1
 	
	 	 	 	 	
##### begin libs_use_shared_libs(initrc_su_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_usr(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(initrc_su_t) depth: 2
 	
	allow initrc_su_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_su_t lib_t:lnk_file { read getattr lock ioctl };
	allow initrc_su_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow initrc_su_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow initrc_su_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t devlog_t:lnk_file read;
	allow initrc_su_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow initrc_su_t syslogd_t:unix_dgram_socket sendto;
	allow initrc_su_t syslogd_t:unix_stream_socket connectto;
	allow initrc_su_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow initrc_su_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(initrc_su_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t device_t:dir { read getattr lock search ioctl };
	allow initrc_su_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(initrc_su_t) depth: 3
 	
	allow initrc_su_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(initrc_su_t) depth: 2
 	

	 	 	 	
##### end logging_send_syslog_msg(initrc_su_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_localization(initrc_su_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(initrc_su_t) depth: 2
 	
	# FIXME: initrc_su_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(initrc_su_t) depth: 3
 	
	
	


	allow initrc_su_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(initrc_su_t) depth: 2
 	
	allow initrc_su_t locale_t:dir { read getattr lock search ioctl };
	allow initrc_su_t locale_t:lnk_file { read getattr lock ioctl };
	allow initrc_su_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(initrc_su_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_usr(initrc_su_t) depth: 4
 	
	
	


	allow initrc_su_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(initrc_su_t) depth: 3
 	
	allow initrc_su_t lib_t:dir { read getattr lock search ioctl };
	allow initrc_su_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(initrc_su_t) depth: 2
 	

	 	 	 	
##### end miscfiles_read_localization(initrc_su_t) depth: 1
 	

	
	
		
		 	 	 	 	
##### begin cron_read_pipes(initrc_su_t) depth: 2
 	
	
	


	allow initrc_su_t crond_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end cron_read_pipes(initrc_su_t) depth: 1
 	
	
	


	
	
		
	


	
	
		
	


	  	 	 	 	
##### end su_restricted_domain_template(initrc,initrc_t,system_r) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin sysnet_read_dhcpc_state(initrc_t) depth: 1
 	
	
	


	allow initrc_t dhcpc_state_t:file { getattr read };

	 	 	 	
##### end sysnet_read_dhcpc_state(initrc_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	


 

	


########################################
#
# Declarations
#

#
# ld_so_cache_t is the type of /etc/ld.so.cache.
#
 	 	 	 	
##### begin files_type(ld_so_cache_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(ld_so_cache_t) depth: 2
 	
	
	


	allow ld_so_cache_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ld_so_cache_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ld_so_cache_t) depth: 2
 	
	
	


	allow ld_so_cache_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ld_so_cache_t) depth: 1
 	
	typeattribute ld_so_cache_t file_type;

	 	 	 	
##### end files_type(ld_so_cache_t) depth: 0
 	

#
# ld_so_t is the type of the system dynamic loaders.
#
 	 	 	 	
##### begin files_type(ld_so_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(ld_so_t) depth: 2
 	
	
	


	allow ld_so_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ld_so_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ld_so_t) depth: 2
 	
	
	


	allow ld_so_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ld_so_t) depth: 1
 	
	typeattribute ld_so_t file_type;

	 	 	 	
##### end files_type(ld_so_t) depth: 0
 	

#
# lib_t is the type of files in the system lib directories.
#
 	 	 	 	
##### begin files_type(lib_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(lib_t) depth: 2
 	
	
	


	allow lib_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(lib_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(lib_t) depth: 2
 	
	
	


	allow lib_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(lib_t) depth: 1
 	
	typeattribute lib_t file_type;

	 	 	 	
##### end files_type(lib_t) depth: 0
 	

#
# shlib_t is the type of shared objects in the system lib
# directories.
#

	typealias lib_t alias shlib_t;


#
# textrel_shlib_t is the type of shared objects in the system lib
# directories, which require text relocation.
#
 	 	 	 	
##### begin files_type(textrel_shlib_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(textrel_shlib_t) depth: 2
 	
	
	


	allow textrel_shlib_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(textrel_shlib_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(textrel_shlib_t) depth: 2
 	
	
	


	allow textrel_shlib_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(textrel_shlib_t) depth: 1
 	
	typeattribute textrel_shlib_t file_type;

	 	 	 	
##### end files_type(textrel_shlib_t) depth: 0
 	

########################################
#
# ldconfig local policy
#
 	 	 	 	
##### begin init_system_domain(ldconfig_t,ldconfig_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(ldconfig_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(ldconfig_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute ldconfig_t domain;

	# allow the domain to read its /proc/pid entries
	allow ldconfig_t self:dir { read getattr lock search ioctl };
	allow ldconfig_t self:lnk_file { read getattr lock ioctl };
	allow ldconfig_t self:file { getattr read write append ioctl lock };

	# allow ldconfig_t to create child processes in this domain
	allow ldconfig_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types ldconfig_t;
		role sysadm_r types ldconfig_t;
		role user_r types ldconfig_t;
		role staff_r types ldconfig_t;
	

	 	 	 	
##### end domain_base_type(ldconfig_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t device_t:dir { read getattr lock search ioctl };
	allow ldconfig_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t device_t:dir { read getattr lock search ioctl };
	allow ldconfig_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(ldconfig_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ldconfig_t) depth: 4
 	
	
	


	allow ldconfig_t device_t:dir { read getattr lock search ioctl };
	allow ldconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ldconfig_t) depth: 3
 	
	allow ldconfig_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(ldconfig_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t root_t:dir { read getattr lock search ioctl };
	allow ldconfig_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(ldconfig_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t init_t:process signull;

	 	 	 	
##### end init_signull(ldconfig_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(ldconfig_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(ldconfig_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(ldconfig_t) depth: 3
 	
	
	


	dontaudit ldconfig_t security_t:dir search;
	dontaudit ldconfig_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(ldconfig_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(ldconfig_t) depth: 3
 	
	
	


	dontaudit ldconfig_t selinux_config_t:dir search;
	dontaudit ldconfig_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(ldconfig_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(ldconfig_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(ldconfig_t,ldconfig_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(ldconfig_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(ldconfig_exec_t) depth: 4
 	
	
	


	allow ldconfig_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ldconfig_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ldconfig_exec_t) depth: 4
 	
	
	


	allow ldconfig_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ldconfig_exec_t) depth: 3
 	
	typeattribute ldconfig_exec_t file_type;

	 	 	 	
##### end files_type(ldconfig_exec_t) depth: 2
 	

	allow ldconfig_t ldconfig_exec_t:file entrypoint;
	allow ldconfig_t ldconfig_exec_t:file { read getattr lock execute ioctl };

	typeattribute ldconfig_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(ldconfig_t,ldconfig_exec_t) depth: 1
 	

	role system_r types ldconfig_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,ldconfig_exec_t,ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,ldconfig_exec_t,ldconfig_t) depth: 3
 	
	allow initrc_t ldconfig_exec_t:file { getattr read execute };
	allow initrc_t ldconfig_t:process transition;
	dontaudit initrc_t ldconfig_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,ldconfig_exec_t,ldconfig_t) depth: 2
 	
	type_transition initrc_t ldconfig_exec_t:process ldconfig_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,ldconfig_exec_t,ldconfig_t) depth: 1
 	

	allow initrc_t ldconfig_t:fd use;
	allow ldconfig_t initrc_t:fd use;
	allow ldconfig_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow ldconfig_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(ldconfig_t,ldconfig_exec_t) depth: 0
 	
role system_r types ldconfig_t;

allow ldconfig_t ld_so_cache_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_etc_filetrans(ldconfig_t,ld_so_cache_t,file) depth: 1
 	
	
	


	allow ldconfig_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition ldconfig_t etc_t:file ld_so_cache_t;

	 	 	 	
##### end files_etc_filetrans(ldconfig_t,ld_so_cache_t,file) depth: 0
 	

allow ldconfig_t lib_t:dir { read getattr lock search ioctl add_name remove_name write };
allow ldconfig_t lib_t:lnk_file { getattr create read unlink };
allow ldconfig_t ld_so_t:lnk_file { read getattr lock ioctl };
allow ldconfig_t ld_so_t:file { read getattr lock execute ioctl };
allow ldconfig_t ld_so_cache_t:file { read getattr lock ioctl };
allow ldconfig_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
allow ldconfig_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };

 	 	 	 	
##### begin kernel_read_system_state(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t proc_t:dir { read getattr lock search ioctl };
	allow ldconfig_t proc_t:lnk_file { getattr read };
	allow ldconfig_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(ldconfig_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(ldconfig_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(ldconfig_t) depth: 0
 	

 	 	 	 	
##### begin files_search_var_lib(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(ldconfig_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t etc_t:dir { read getattr lock search ioctl };
	allow ldconfig_t etc_t:file { read getattr lock ioctl };
	allow ldconfig_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(ldconfig_t) depth: 0
 	
 	 	 	 	
##### begin files_search_tmp(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t tmp_t:dir { getattr search };

	 	 	 	
##### end files_search_tmp(ldconfig_t) depth: 0
 	
 	 	 	 	
##### begin files_search_usr(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(ldconfig_t) depth: 0
 	
# for when /etc/ld.so.cache is mislabeled:
 	 	 	 	
##### begin files_delete_etc_files(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow ldconfig_t etc_t:file unlink;

	 	 	 	
##### end files_delete_etc_files(ldconfig_t) depth: 0
 	

 	 	 	 	
##### begin init_use_script_ptys(ldconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(ldconfig_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t device_t:dir { read getattr lock search ioctl };
	allow ldconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ldconfig_t) depth: 2
 	
	allow ldconfig_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(ldconfig_t) depth: 1
 	
	allow ldconfig_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(ldconfig_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t devlog_t:lnk_file read;
	allow ldconfig_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow ldconfig_t syslogd_t:unix_dgram_socket sendto;
	allow ldconfig_t syslogd_t:unix_stream_socket connectto;
	allow ldconfig_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow ldconfig_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(ldconfig_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t device_t:dir { read getattr lock search ioctl };
	allow ldconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ldconfig_t) depth: 2
 	
	allow ldconfig_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(ldconfig_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(ldconfig_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(ldconfig_t) depth: 1
 	
	
	


	allow ldconfig_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(ldconfig_t) depth: 0
 	


	
	
		
		 	 	 	 	
##### begin unconfined_dontaudit_rw_tcp_sockets(ldconfig_t) depth: 1
 	
	
	


	dontaudit ldconfig_t unconfined_t:tcp_socket { read write };

	 	 	 	
##### end unconfined_dontaudit_rw_tcp_sockets(ldconfig_t) depth: 0
 	
	
	




	allow ldconfig_t lib_t:file { read getattr lock ioctl };
	 	 	 	 	
##### begin unconfined_domain(ldconfig_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(ldconfig_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow ldconfig_t self:capability *;
	allow ldconfig_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow ldconfig_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow ldconfig_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow ldconfig_t self:nscd *;
	allow ldconfig_t self:dbus *;
	allow ldconfig_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t proc_type:{ dir file } *;

	allow ldconfig_t sysctl_t:{ dir file } *;

	allow ldconfig_t kernel_t:system *;

	allow ldconfig_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow ldconfig_t unlabeled_t:filesystem *;
	allow ldconfig_t unlabeled_t:association *;

	typeattribute ldconfig_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute ldconfig_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(ldconfig_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow ldconfig_t { proc_t proc_net_t }:dir search;

	allow ldconfig_t sysctl_type:dir { read getattr lock search ioctl };
	allow ldconfig_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(ldconfig_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t node_type:node *;
	allow ldconfig_t netif_type:netif *;
	allow ldconfig_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow ldconfig_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow ldconfig_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow ldconfig_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(ldconfig_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(ldconfig_t) depth: 5
 	
	
	


	allow ldconfig_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(ldconfig_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(ldconfig_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t device_node:{ chr_file blk_file } *;
	allow ldconfig_t mtrr_device_t:{ dir file } *;

	allow ldconfig_t self:capability sys_rawio;
	typeattribute ldconfig_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(ldconfig_t) depth: 3
 	
	
	


	typeattribute ldconfig_t unconfined_domain_type;

	# pass all constraints
	typeattribute ldconfig_t can_change_process_identity;
	typeattribute ldconfig_t can_change_process_role;
	typeattribute ldconfig_t can_change_object_identity;
	typeattribute ldconfig_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow ldconfig_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow ldconfig_t domain:fd use;
	allow ldconfig_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow ldconfig_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow ldconfig_t domain:{ sem msgq shm } *;
	allow ldconfig_t domain:msg { send receive };

	# For /proc/pid
	allow ldconfig_t domain:dir { read getattr lock search ioctl };
	allow ldconfig_t domain:file { read getattr lock ioctl };
	allow ldconfig_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(ldconfig_t) depth: 3
 	
	
	


	dontaudit ldconfig_t domain:dir { read getattr lock search ioctl };
	dontaudit ldconfig_t domain:lnk_file { read getattr lock ioctl };
	dontaudit ldconfig_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit ldconfig_t domain:sock_file { read getattr lock ioctl };
	dontaudit ldconfig_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(ldconfig_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow ldconfig_t file_type:{ file chr_file } ~execmod;
	allow ldconfig_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow ldconfig_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow ldconfig_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow ldconfig_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow ldconfig_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(ldconfig_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow ldconfig_t security_t:dir { getattr search read };
	allow ldconfig_t security_t:file { getattr read write };

	typeattribute ldconfig_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow ldconfig_t security_t:security *;
		auditallow ldconfig_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(ldconfig_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow ldconfig_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow ldconfig_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow ldconfig_t self:process execstack;
		auditallow ldconfig_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit ldconfig_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(ldconfig_t) depth: 3
 	
	
	


	typeattribute ldconfig_t can_read_shadow_passwords;
	typeattribute ldconfig_t can_write_shadow_passwords;
	typeattribute ldconfig_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(ldconfig_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(ldconfig_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(ldconfig_t) depth: 4
 	
	
	


	allow ldconfig_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(ldconfig_t) depth: 3
 	
	allow ldconfig_t lib_t:dir { read getattr lock search ioctl };
	allow ldconfig_t lib_t:lnk_file { read getattr lock ioctl };
	allow ldconfig_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow ldconfig_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow ldconfig_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(ldconfig_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(ldconfig_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(ldconfig_t) depth: 4
 	
	
	


	allow ldconfig_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(ldconfig_t) depth: 3
 	
	allow ldconfig_t selinux_config_t:dir search;
	allow ldconfig_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow ldconfig_t policy_config_t:file { getattr create write };
#	typeattribute ldconfig_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(ldconfig_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t policy_config_t:file relabelto;
	typeattribute ldconfig_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(ldconfig_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(ldconfig_t) depth: 3
 	
	
	


	allow ldconfig_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow ldconfig_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute ldconfig_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute ldconfig_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(ldconfig_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(ldconfig_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow ldconfig_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow ldconfig_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(ldconfig_t) depth: 0
 	 



	
		
	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin auth_login_entry_type(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_entry_file(local_login_t,login_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(login_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(login_exec_t) depth: 4
 	
	
	


	allow login_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(login_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(login_exec_t) depth: 4
 	
	
	


	allow login_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(login_exec_t) depth: 3
 	
	typeattribute login_exec_t file_type;

	 	 	 	
##### end files_type(login_exec_t) depth: 2
 	

	allow local_login_t login_exec_t:file entrypoint;
	allow local_login_t login_exec_t:file { read getattr lock execute ioctl };

	typeattribute login_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(local_login_t,login_exec_t) depth: 1
 	

	 	 	 	
##### end auth_login_entry_type(local_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(local_login_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(local_login_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute local_login_t domain;

	# allow the domain to read its /proc/pid entries
	allow local_login_t self:dir { read getattr lock search ioctl };
	allow local_login_t self:lnk_file { read getattr lock ioctl };
	allow local_login_t self:file { getattr read write append ioctl lock };

	# allow local_login_t to create child processes in this domain
	allow local_login_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types local_login_t;
		role sysadm_r types local_login_t;
		role user_r types local_login_t;
		role staff_r types local_login_t;
	

	 	 	 	
##### end domain_base_type(local_login_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	allow local_login_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(local_login_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(local_login_t) depth: 2
 	
	
	


	allow local_login_t root_t:dir { read getattr lock search ioctl };
	allow local_login_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(local_login_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(local_login_t) depth: 2
 	
	
	


	allow local_login_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(local_login_t) depth: 2
 	
	
	


	allow local_login_t init_t:process signull;

	 	 	 	
##### end init_signull(local_login_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(local_login_t) depth: 2
 	
	
	


	allow local_login_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(local_login_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(local_login_t) depth: 2
 	
	
	


	allow local_login_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(local_login_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(local_login_t) depth: 2
 	
	
	


	dontaudit local_login_t security_t:dir search;
	dontaudit local_login_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(local_login_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(local_login_t) depth: 2
 	
	
	


	dontaudit local_login_t selinux_config_t:dir search;
	dontaudit local_login_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(local_login_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(local_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_obj_id_change_exemption(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(local_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_subj_id_change_exemption(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t can_change_process_identity;

	 	 	 	
##### end domain_subj_id_change_exemption(local_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_role_change_exemption(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t can_change_process_role;

	 	 	 	
##### end domain_role_change_exemption(local_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t privfd;

	 	 	 	
##### end domain_interactive_fd(local_login_t) depth: 0
 	
role system_r types local_login_t;

 	 	 	 	
##### begin files_lock_file(local_login_lock_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(local_login_lock_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(local_login_lock_t) depth: 3
 	
	
	


	allow local_login_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(local_login_lock_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(local_login_lock_t) depth: 3
 	
	
	


	allow local_login_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(local_login_lock_t) depth: 2
 	
	typeattribute local_login_lock_t file_type;

	 	 	 	
##### end files_type(local_login_lock_t) depth: 1
 	
	typeattribute local_login_lock_t lockfile;

	 	 	 	
##### end files_lock_file(local_login_lock_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(local_login_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(local_login_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(local_login_tmp_t) depth: 3
 	
	
	


	allow local_login_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(local_login_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(local_login_tmp_t) depth: 3
 	
	
	


	allow local_login_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(local_login_tmp_t) depth: 2
 	
	typeattribute local_login_tmp_t file_type;

	 	 	 	
##### end files_type(local_login_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(local_login_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(local_login_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(local_login_tmp_t) depth: 4
 	
	
	


	allow local_login_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(local_login_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(local_login_tmp_t) depth: 4
 	
	
	


	allow local_login_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(local_login_tmp_t) depth: 3
 	
	typeattribute local_login_tmp_t file_type;

	 	 	 	
##### end files_type(local_login_tmp_t) depth: 2
 	
	typeattribute local_login_tmp_t polymember;

	 	 	 	
##### end files_poly_member(local_login_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(local_login_tmp_t) depth: 2
 	
	
	


	allow local_login_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(local_login_tmp_t) depth: 1
 	
	typeattribute local_login_tmp_t tmpfile;
	allow local_login_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(local_login_tmp_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(sulogin_t) depth: 1
 	
	
	


	typeattribute sulogin_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin domain_subj_id_change_exemption(sulogin_t) depth: 1
 	
	
	


	typeattribute sulogin_t can_change_process_identity;

	 	 	 	
##### end domain_subj_id_change_exemption(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin domain_role_change_exemption(sulogin_t) depth: 1
 	
	
	


	typeattribute sulogin_t can_change_process_role;

	 	 	 	
##### end domain_role_change_exemption(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(sulogin_t) depth: 1
 	
	
	


	typeattribute sulogin_t privfd;

	 	 	 	
##### end domain_interactive_fd(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin init_domain(sulogin_t,sulogin_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(sulogin_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(sulogin_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute sulogin_t domain;

	# allow the domain to read its /proc/pid entries
	allow sulogin_t self:dir { read getattr lock search ioctl };
	allow sulogin_t self:lnk_file { read getattr lock ioctl };
	allow sulogin_t self:file { getattr read write append ioctl lock };

	# allow sulogin_t to create child processes in this domain
	allow sulogin_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types sulogin_t;
		role sysadm_r types sulogin_t;
		role user_r types sulogin_t;
		role staff_r types sulogin_t;
	

	 	 	 	
##### end domain_base_type(sulogin_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(sulogin_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sulogin_t) depth: 4
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sulogin_t) depth: 3
 	
	allow sulogin_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(sulogin_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t root_t:dir { read getattr lock search ioctl };
	allow sulogin_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(sulogin_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t init_t:process signull;

	 	 	 	
##### end init_signull(sulogin_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(sulogin_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(sulogin_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(sulogin_t) depth: 3
 	
	
	


	dontaudit sulogin_t security_t:dir search;
	dontaudit sulogin_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(sulogin_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(sulogin_t) depth: 3
 	
	
	


	dontaudit sulogin_t selinux_config_t:dir search;
	dontaudit sulogin_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(sulogin_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(sulogin_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(sulogin_t,sulogin_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(sulogin_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(sulogin_exec_t) depth: 4
 	
	
	


	allow sulogin_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sulogin_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sulogin_exec_t) depth: 4
 	
	
	


	allow sulogin_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sulogin_exec_t) depth: 3
 	
	typeattribute sulogin_exec_t file_type;

	 	 	 	
##### end files_type(sulogin_exec_t) depth: 2
 	

	allow sulogin_t sulogin_exec_t:file entrypoint;
	allow sulogin_t sulogin_exec_t:file { read getattr lock execute ioctl };

	typeattribute sulogin_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(sulogin_t,sulogin_exec_t) depth: 1
 	

	role system_r types sulogin_t;

	 	 	 	 	
##### begin domain_auto_trans(init_t,sulogin_exec_t,sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(init_t,sulogin_exec_t,sulogin_t) depth: 3
 	
	allow init_t sulogin_exec_t:file { getattr read execute };
	allow init_t sulogin_t:process transition;
	dontaudit init_t sulogin_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(init_t,sulogin_exec_t,sulogin_t) depth: 2
 	
	type_transition init_t sulogin_exec_t:process sulogin_t;
 	 	 	 	
##### end domain_auto_trans(init_t,sulogin_exec_t,sulogin_t) depth: 1
 	

	allow sulogin_t init_t:fd use;
	allow init_t sulogin_t:fd use;
	allow sulogin_t init_t:fifo_file { getattr read write append ioctl lock };
	allow sulogin_t init_t:process sigchld;

	 	 	 	
##### end init_domain(sulogin_t,sulogin_exec_t) depth: 0
 	
 	 	 	 	
##### begin init_system_domain(sulogin_t,sulogin_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(sulogin_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(sulogin_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute sulogin_t domain;

	# allow the domain to read its /proc/pid entries
	allow sulogin_t self:dir { read getattr lock search ioctl };
	allow sulogin_t self:lnk_file { read getattr lock ioctl };
	allow sulogin_t self:file { getattr read write append ioctl lock };

	# allow sulogin_t to create child processes in this domain
	allow sulogin_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types sulogin_t;
		role sysadm_r types sulogin_t;
		role user_r types sulogin_t;
		role staff_r types sulogin_t;
	

	 	 	 	
##### end domain_base_type(sulogin_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(sulogin_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sulogin_t) depth: 4
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sulogin_t) depth: 3
 	
	allow sulogin_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(sulogin_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t root_t:dir { read getattr lock search ioctl };
	allow sulogin_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(sulogin_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t init_t:process signull;

	 	 	 	
##### end init_signull(sulogin_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(sulogin_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(sulogin_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(sulogin_t) depth: 3
 	
	
	


	dontaudit sulogin_t security_t:dir search;
	dontaudit sulogin_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(sulogin_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(sulogin_t) depth: 3
 	
	
	


	dontaudit sulogin_t selinux_config_t:dir search;
	dontaudit sulogin_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(sulogin_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(sulogin_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(sulogin_t,sulogin_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(sulogin_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(sulogin_exec_t) depth: 4
 	
	
	


	allow sulogin_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sulogin_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sulogin_exec_t) depth: 4
 	
	
	


	allow sulogin_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sulogin_exec_t) depth: 3
 	
	typeattribute sulogin_exec_t file_type;

	 	 	 	
##### end files_type(sulogin_exec_t) depth: 2
 	

	allow sulogin_t sulogin_exec_t:file entrypoint;
	allow sulogin_t sulogin_exec_t:file { read getattr lock execute ioctl };

	typeattribute sulogin_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(sulogin_t,sulogin_exec_t) depth: 1
 	

	role system_r types sulogin_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,sulogin_exec_t,sulogin_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,sulogin_exec_t,sulogin_t) depth: 3
 	
	allow initrc_t sulogin_exec_t:file { getattr read execute };
	allow initrc_t sulogin_t:process transition;
	dontaudit initrc_t sulogin_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,sulogin_exec_t,sulogin_t) depth: 2
 	
	type_transition initrc_t sulogin_exec_t:process sulogin_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,sulogin_exec_t,sulogin_t) depth: 1
 	

	allow initrc_t sulogin_t:fd use;
	allow sulogin_t initrc_t:fd use;
	allow sulogin_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow sulogin_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(sulogin_t,sulogin_exec_t) depth: 0
 	
role system_r types sulogin_t;

########################################
#
# Local login local policy
#

allow local_login_t self:capability { dac_override chown fowner fsetid kill setgid setuid sys_nice sys_resource sys_tty_config };
allow local_login_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow local_login_t self:process { setrlimit setexec };
allow local_login_t self:fd use;
allow local_login_t self:fifo_file { getattr read write append ioctl lock };
allow local_login_t self:sock_file { read getattr lock ioctl };
allow local_login_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow local_login_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow local_login_t self:unix_dgram_socket sendto;
allow local_login_t self:unix_stream_socket connectto;
allow local_login_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow local_login_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow local_login_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow local_login_t self:msg { send receive };

allow local_login_t local_login_lock_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_lock_filetrans(local_login_t,local_login_lock_t,file) depth: 1
 	
	
	


	allow local_login_t var_t:dir search;
	allow local_login_t var_lock_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition local_login_t var_lock_t:file local_login_lock_t;

	 	 	 	
##### end files_lock_filetrans(local_login_t,local_login_lock_t,file) depth: 0
 	

allow local_login_t local_login_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow local_login_t local_login_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(local_login_t,local_login_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow local_login_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition local_login_t tmp_t:{ file dir } local_login_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(local_login_t,local_login_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(local_login_t) depth: 1
 	
	
	


	allow local_login_t proc_t:dir { read getattr lock search ioctl };
	allow local_login_t proc_t:lnk_file { getattr read };
	allow local_login_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(local_login_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(local_login_t) depth: 1
 	
	
	


	allow local_login_t proc_t:dir search;
	allow local_login_t sysctl_t:dir { read getattr lock search ioctl };
	allow local_login_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow local_login_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(local_login_t) depth: 0
 	

 	 	 	 	
##### begin dev_setattr_mouse_dev(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t mouse_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_mouse_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_mouse_dev(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t mouse_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_mouse_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_power_mgmt_dev(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t power_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_power_mgmt_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_power_mgmt_dev(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t power_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_power_mgmt_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_sound_dev(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t sound_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_sound_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_sound_dev(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t sound_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_sound_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_apm_bios_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t apm_bios_t:chr_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_apm_bios_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_apm_bios_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t apm_bios_t:chr_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_apm_bios_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_read_framebuffer(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t framebuf_device_t:chr_file { getattr read };

	 	 	 	
##### end dev_dontaudit_read_framebuffer(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_framebuffer_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t framebuf_device_t:chr_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_framebuffer_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_generic_blk_files(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t device_t:blk_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_generic_blk_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_generic_blk_files(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t device_t:blk_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_generic_blk_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_generic_chr_files(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t device_t:chr_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_generic_chr_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_generic_chr_files(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t device_t:chr_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_generic_chr_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_generic_symlinks(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t device_t:lnk_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_generic_symlinks(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_misc_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t misc_device_t:chr_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_misc_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_misc_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t misc_device_t:chr_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_misc_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_scanner_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t scanner_device_t:chr_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_scanner_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_scanner_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t scanner_device_t:chr_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_scanner_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_search_sysfs(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t sysfs_t:dir search;

	 	 	 	
##### end dev_dontaudit_search_sysfs(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_video_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t v4l_device_t:chr_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_video_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_setattr_video_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t v4l_device_t:chr_file setattr;

	 	 	 	
##### end dev_dontaudit_setattr_video_dev(local_login_t) depth: 0
 	
# for SSP/ProPolice
 	 	 	 	
##### begin dev_read_urand(local_login_t) depth: 1
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(local_login_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(local_login_t) depth: 1
 	
	
	


	allow local_login_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(local_login_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(local_login_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(local_login_t) depth: 2
 	
	
	


	allow local_login_t proc_t:dir { read getattr lock search ioctl };
	allow local_login_t proc_t:lnk_file { getattr read };
	allow local_login_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(local_login_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(local_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(local_login_t) depth: 1
 	
	
	


	allow local_login_t security_t:dir { read search getattr };
	allow local_login_t security_t:file { getattr read write };
	allow local_login_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(local_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(local_login_t) depth: 1
 	
	
	


	allow local_login_t security_t:dir { read search getattr };
	allow local_login_t security_t:file { getattr read write };
	allow local_login_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(local_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(local_login_t) depth: 1
 	
	
	


	allow local_login_t security_t:dir { read search getattr };
	allow local_login_t security_t:file { getattr read write };
	allow local_login_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(local_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(local_login_t) depth: 1
 	
	
	


	allow local_login_t security_t:dir { read search getattr };
	allow local_login_t security_t:file { getattr read write };
	allow local_login_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(local_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(local_login_t) depth: 1
 	
	
	


	allow local_login_t security_t:dir { read search getattr };
	allow local_login_t security_t:file { getattr read write };
	allow local_login_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(local_login_t) depth: 0
 	

 	 	 	 	
##### begin storage_dontaudit_getattr_fixed_disk_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t fixed_disk_device_t:blk_file getattr;

	 	 	 	
##### end storage_dontaudit_getattr_fixed_disk_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin storage_dontaudit_setattr_fixed_disk_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t fixed_disk_device_t:blk_file setattr;

	 	 	 	
##### end storage_dontaudit_setattr_fixed_disk_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin storage_dontaudit_getattr_removable_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t removable_device_t:blk_file getattr;

	 	 	 	
##### end storage_dontaudit_getattr_removable_dev(local_login_t) depth: 0
 	
 	 	 	 	
##### begin storage_dontaudit_setattr_removable_dev(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t removable_device_t:blk_file setattr;

	 	 	 	
##### end storage_dontaudit_setattr_removable_dev(local_login_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 1
 	
	allow local_login_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(local_login_t) depth: 0
 	
 	 	 	 	
##### begin term_use_unallocated_ttys(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 1
 	
	allow local_login_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(local_login_t) depth: 0
 	
 	 	 	 	
##### begin term_relabel_unallocated_ttys(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 1
 	
	allow local_login_t tty_device_t:chr_file { relabelfrom relabelto };

	 	 	 	
##### end term_relabel_unallocated_ttys(local_login_t) depth: 0
 	
 	 	 	 	
##### begin term_relabel_all_user_ttys(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 1
 	
	allow local_login_t ttynode:chr_file { relabelfrom relabelto };

	 	 	 	
##### end term_relabel_all_user_ttys(local_login_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_all_user_ttys(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 1
 	
	allow local_login_t ttynode:chr_file setattr;

	 	 	 	
##### end term_setattr_all_user_ttys(local_login_t) depth: 0
 	
 	 	 	 	
##### begin term_setattr_unallocated_ttys(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 1
 	
	allow local_login_t tty_device_t:chr_file setattr;

	 	 	 	
##### end term_setattr_unallocated_ttys(local_login_t) depth: 0
 	

 	 	 	 	
##### begin auth_domtrans_chk_passwd(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(local_login_t) depth: 2
 	
	
	


	allow local_login_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(local_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(local_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	allow local_login_t chkpwd_exec_t:file { getattr read execute };
	allow local_login_t system_chkpwd_t:process transition;
	dontaudit local_login_t system_chkpwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(local_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	type_transition local_login_t chkpwd_exec_t:process system_chkpwd_t;
 	 	 	 	
##### end domain_auto_trans(local_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 1
 	

	allow local_login_t self:capability { audit_write audit_control };
	allow local_login_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

	allow local_login_t system_chkpwd_t:fd use;
	allow system_chkpwd_t local_login_t:fd use;
	allow system_chkpwd_t local_login_t:fifo_file { getattr read write append ioctl lock };
	allow system_chkpwd_t local_login_t:process sigchld;

	dontaudit local_login_t shadow_t:file { getattr read };

	 	 	 	 	
##### begin dev_read_rand(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(local_login_t) depth: 2
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(local_login_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_certs(local_login_t) depth: 2
 	
	
	


	allow local_login_t cert_t:dir { read getattr lock search ioctl };
	allow local_login_t cert_t:file { read getattr lock ioctl };
	allow local_login_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(local_login_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(local_login_t) depth: 2
 	
	
	


	allow local_login_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow local_login_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(local_login_t) depth: 3
 	
	
	


	allow local_login_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(local_login_t) depth: 4
 	
	
	


	allow local_login_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(local_login_t) depth: 4
 	
	
	


	allow local_login_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(local_login_t) depth: 4
 	
	
	


	allow local_login_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow local_login_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(local_login_t) depth: 4
 	
	
	


	allow local_login_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(local_login_t) depth: 4
 	
	
	


	allow local_login_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(local_login_t) depth: 4
 	
	
	


	allow local_login_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(local_login_t) depth: 4
 	
	
	


	allow local_login_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(local_login_t) depth: 4
 	
	
	


	allow local_login_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(local_login_t) depth: 3
 	
	
	


	allow local_login_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(local_login_t) depth: 4
 	
	
	


	allow local_login_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(local_login_t) depth: 4
 	
	
	


	allow local_login_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(local_login_t) depth: 4
 	
	
	


	allow local_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(local_login_t) depth: 3
 	
	
	


	allow local_login_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(local_login_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(local_login_t) depth: 3
 	
	
	


	allow local_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(local_login_t) depth: 2
 	
	allow local_login_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(local_login_t) depth: 2
 	
	
	
		

	allow local_login_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(local_login_t) depth: 3
 	
	
	


	allow local_login_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(local_login_t) depth: 4
 	
	
	


	allow local_login_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow local_login_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(local_login_t) depth: 4
 	
	
	


	allow local_login_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(local_login_t) depth: 4
 	
	
	


	allow local_login_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(local_login_t) depth: 4
 	
	
	


	allow local_login_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(local_login_t) depth: 3
 	
	
	


	allow local_login_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(local_login_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(local_login_t) depth: 4
 	
	
	


	allow local_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(local_login_t) depth: 3
 	
	
	


	allow local_login_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(local_login_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(local_login_t) depth: 3
 	
	
	


	allow local_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(local_login_t) depth: 2
 	
	allow local_login_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(local_login_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_domtrans_chk_passwd(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_dontaudit_read_shadow(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t shadow_t:file { getattr read };

	 	 	 	
##### end auth_dontaudit_read_shadow(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_login_records(local_login_t) depth: 1
 	
	
	


	allow local_login_t wtmp_t:file { getattr read write append ioctl lock };
	 	 	 	 	
##### begin logging_search_logs(local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(local_login_t) depth: 3
 	
	
	


	allow local_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(local_login_t) depth: 2
 	
	allow local_login_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(local_login_t) depth: 1
 	

	 	 	 	
##### end auth_rw_login_records(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_lastlog(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(local_login_t) depth: 3
 	
	
	


	allow local_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(local_login_t) depth: 2
 	
	allow local_login_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(local_login_t) depth: 1
 	
	allow local_login_t lastlog_t:file { getattr read write setattr };

	 	 	 	
##### end auth_rw_lastlog(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_faillog(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(local_login_t) depth: 3
 	
	
	


	allow local_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(local_login_t) depth: 2
 	
	allow local_login_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(local_login_t) depth: 1
 	
	allow local_login_t faillog_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end auth_rw_faillog(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_exec_pam(local_login_t) depth: 1
 	
	
	


	
	
	


	allow local_login_t pam_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end auth_exec_pam(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_manage_pam_console_data(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(local_login_t) depth: 2
 	
	
	


	allow local_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_pids(local_login_t) depth: 2
 	
	
	


	allow local_login_t var_t:dir { getattr search };
	allow local_login_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(local_login_t) depth: 1
 	
	allow local_login_t pam_var_console_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow local_login_t pam_var_console_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow local_login_t pam_var_console_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end auth_manage_pam_console_data(local_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_domtrans_pam_console(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(local_login_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(local_login_t,pam_console_exec_t,pam_console_t) depth: 3
 	
	allow local_login_t pam_console_exec_t:file { getattr read execute };
	allow local_login_t pam_console_t:process transition;
	dontaudit local_login_t pam_console_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(local_login_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	type_transition local_login_t pam_console_exec_t:process pam_console_t;
 	 	 	 	
##### end domain_auto_trans(local_login_t,pam_console_exec_t,pam_console_t) depth: 1
 	

	allow local_login_t pam_console_t:fd use;
	allow pam_console_t local_login_t:fd use;
	allow pam_console_t local_login_t:fifo_file { getattr read write append ioctl lock };
	allow pam_console_t local_login_t:process sigchld;

	 	 	 	
##### end auth_domtrans_pam_console(local_login_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_list_bin(local_login_t) depth: 1
 	
	
	


	allow local_login_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_list_sbin(local_login_t) depth: 1
 	
	
	


	allow local_login_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t bin_t:dir search;
	allow local_login_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t sbin_t:dir search;
	allow local_login_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(local_login_t) depth: 0
 	
# cjp: these are probably not needed:
 	 	 	 	
##### begin corecmd_read_bin_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t bin_t:dir search;
	allow local_login_t bin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_pipes(local_login_t) depth: 1
 	
	
	


	allow local_login_t bin_t:dir search;
	allow local_login_t bin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_pipes(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_sockets(local_login_t) depth: 1
 	
	
	


	allow local_login_t bin_t:dir search;
	allow local_login_t bin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_sockets(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t sbin_t:dir search;
	allow local_login_t sbin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_pipes(local_login_t) depth: 1
 	
	
	


	allow local_login_t sbin_t:dir search;
	allow local_login_t sbin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_pipes(local_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_sockets(local_login_t) depth: 1
 	
	
	


	allow local_login_t sbin_t:dir search;
	allow local_login_t sbin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_sockets(local_login_t) depth: 0
 	

 	 	 	 	
##### begin domain_read_all_entry_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t entry_type:lnk_file { read getattr lock ioctl };
	allow local_login_t entry_type:file { read getattr lock ioctl };

	 	 	 	
##### end domain_read_all_entry_files(local_login_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t etc_t:dir { read getattr lock search ioctl };
	allow local_login_t etc_t:file { read getattr lock ioctl };
	allow local_login_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t etc_t:dir { read getattr lock search ioctl };
	allow local_login_t etc_runtime_t:file { read getattr lock ioctl };
	allow local_login_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t usr_t:dir { read getattr lock search ioctl };
	allow local_login_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_list_mnt(local_login_t) depth: 1
 	
	
	


	allow local_login_t mnt_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_mnt(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_list_world_readable(local_login_t) depth: 1
 	
	
	


	allow local_login_t readable_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_world_readable(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t readable_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_files(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t readable_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_symlinks(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_pipes(local_login_t) depth: 1
 	
	
	


	allow local_login_t readable_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_pipes(local_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_sockets(local_login_t) depth: 1
 	
	
	


	allow local_login_t readable_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_sockets(local_login_t) depth: 0
 	
# for when /var/mail is a symlink
 	 	 	 	
##### begin files_read_var_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t var_t:dir { getattr search };
	allow local_login_t var_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_var_symlinks(local_login_t) depth: 0
 	
# Login can polyinstantiate
 	 	 	 	
##### begin files_polyinstantiate_all(local_login_t) depth: 1
 	
	
	


	# Need to give access to /selinux/member
	 	 	 	 	
##### begin selinux_compute_member(local_login_t) depth: 2
 	
	
	


	allow local_login_t security_t:dir { read search getattr };
	allow local_login_t security_t:file { getattr read write };
	allow local_login_t security_t:security compute_member;

	 	 	 	
##### end selinux_compute_member(local_login_t) depth: 1
 	

	# Need sys_admin capability for mounting
	allow local_login_t self:capability sys_admin;

	# Need to give access to the directories to be polyinstantiated
	allow local_login_t polydir:dir { create getattr search write add_name setattr mounton };

	# Need to give access to the polyinstantiated subdirectories
	allow local_login_t polymember:dir { getattr search };

	# Need to give access to parent directories where original
	# is remounted for polyinstantiation aware programs (like gdm)
	allow local_login_t polyparent:dir { getattr mounton };

	# Need to give permission to create directories where applicable
	allow local_login_t self:process setfscreate;
	allow local_login_t polymember: dir { create setattr };
	allow local_login_t polydir: dir { write add_name };
	allow local_login_t polyparent:dir { write add_name };

	# Default type for mountpoints
	allow local_login_t poly_t:dir { create mounton };

	 	 	 	
##### end files_polyinstantiate_all(local_login_t) depth: 0
 	

 	 	 	 	
##### begin init_rw_utmp(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(local_login_t) depth: 2
 	
	
	


	allow local_login_t var_t:dir { getattr search };
	allow local_login_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(local_login_t) depth: 1
 	
	allow local_login_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(local_login_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_use_fds(local_login_t) depth: 1
 	
	
	


	dontaudit local_login_t init_t:fd use;

	 	 	 	
##### end init_dontaudit_use_fds(local_login_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(local_login_t) depth: 2
 	
	
	


	allow local_login_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(local_login_t) depth: 1
 	
	allow local_login_t lib_t:dir { read getattr lock search ioctl };
	allow local_login_t lib_t:lnk_file { read getattr lock ioctl };
	allow local_login_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow local_login_t ld_so_t:file { read getattr lock execute ioctl };
	allow local_login_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(local_login_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(local_login_t) depth: 2
 	
	
	


	allow local_login_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(local_login_t) depth: 1
 	
	allow local_login_t lib_t:dir { read getattr lock search ioctl };
	allow local_login_t lib_t:lnk_file { read getattr lock ioctl };
	allow local_login_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow local_login_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow local_login_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(local_login_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(local_login_t) depth: 1
 	
	
	


	allow local_login_t devlog_t:lnk_file read;
	allow local_login_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow local_login_t syslogd_t:unix_dgram_socket sendto;
	allow local_login_t syslogd_t:unix_stream_socket connectto;
	allow local_login_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow local_login_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(local_login_t) depth: 3
 	
	
	


	allow local_login_t device_t:dir { read getattr lock search ioctl };
	allow local_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(local_login_t) depth: 2
 	
	allow local_login_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(local_login_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(local_login_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(local_login_t) depth: 2
 	
	
	


	allow local_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(local_login_t) depth: 1
 	
	# FIXME: local_login_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(local_login_t) depth: 2
 	
	
	


	allow local_login_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(local_login_t) depth: 1
 	
	allow local_login_t locale_t:dir { read getattr lock search ioctl };
	allow local_login_t locale_t:lnk_file { read getattr lock ioctl };
	allow local_login_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(local_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(local_login_t) depth: 3
 	
	
	


	allow local_login_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(local_login_t) depth: 2
 	
	allow local_login_t lib_t:dir { read getattr lock search ioctl };
	allow local_login_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(local_login_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(local_login_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(local_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(local_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_upgrade(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t mlsfileupgrade;

	 	 	 	
##### end mls_file_upgrade(local_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(local_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_set_level(local_login_t) depth: 1
 	
	
	


	typeattribute local_login_t mlsprocsetsl;

	 	 	 	
##### end mls_process_set_level(local_login_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(local_login_t) depth: 2
 	
	
	


	allow local_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(local_login_t) depth: 1
 	
	allow local_login_t selinux_config_t:dir { read getattr lock search ioctl };
	allow local_login_t selinux_config_t:file { read getattr lock ioctl };
	allow local_login_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(local_login_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_default_contexts(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(local_login_t) depth: 2
 	
	
	


	allow local_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(local_login_t) depth: 1
 	
	allow local_login_t selinux_config_t:dir search;
	allow local_login_t default_context_t:dir { read getattr lock search ioctl };
	allow local_login_t default_context_t:file { read getattr lock ioctl };
	allow local_login_t default_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_default_contexts(local_login_t) depth: 0
 	

 	 	 	 	
##### begin userdom_spec_domtrans_all_users(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(local_login_t,userdomain) depth: 2
 	
	
	


	allow local_login_t bin_t:dir { read getattr lock search ioctl };
	allow local_login_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(local_login_t,shell_exec_t,userdomain) depth: 3
 	
	allow local_login_t shell_exec_t:file { getattr read execute };
	allow local_login_t userdomain:process transition;
	dontaudit local_login_t userdomain:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(local_login_t,shell_exec_t,userdomain) depth: 2
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(local_login_t,userdomain) depth: 1
 	
	allow local_login_t userdomain:fd use;
	allow userdomain local_login_t:fd use;
	allow userdomain local_login_t:fifo_file { getattr read write append ioctl lock };
	allow userdomain local_login_t:process sigchld;

	 	 	 	
##### end userdom_spec_domtrans_all_users(local_login_t) depth: 0
 	
 	 	 	 	
##### begin userdom_signal_all_users(local_login_t) depth: 1
 	
	
	


	allow local_login_t userdomain:process signal;

	 	 	 	
##### end userdom_signal_all_users(local_login_t) depth: 0
 	
 	 	 	 	
##### begin userdom_search_all_users_home_content(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_home(local_login_t) depth: 2
 	
	
	


	allow local_login_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(local_login_t) depth: 1
 	
	allow local_login_t { home_dir_type home_type }:dir search;

	 	 	 	
##### end userdom_search_all_users_home_content(local_login_t) depth: 0
 	
 	 	 	 	
##### begin userdom_use_unpriv_users_fds(local_login_t) depth: 1
 	
	
	


	allow local_login_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(local_login_t) depth: 0
 	
 	 	 	 	
##### begin userdom_sigchld_all_users(local_login_t) depth: 1
 	
	
	


	allow local_login_t userdomain:process sigchld;

	 	 	 	
##### end userdom_sigchld_all_users(local_login_t) depth: 0
 	

# Search for mail spool file.
 	 	 	 	
##### begin mta_getattr_spool(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_spool(local_login_t) depth: 2
 	
	
	


	allow local_login_t var_t:dir { getattr search };
	allow local_login_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(local_login_t) depth: 1
 	
	allow local_login_t mail_spool_t:dir { read getattr lock search ioctl };
	allow local_login_t mail_spool_t:lnk_file read;
	allow local_login_t mail_spool_t:file getattr;

	 	 	 	
##### end mta_getattr_spool(local_login_t) depth: 0
 	


	 	 	 	 	
##### begin unconfined_domain(local_login_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(local_login_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow local_login_t self:capability *;
	allow local_login_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow local_login_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow local_login_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow local_login_t self:nscd *;
	allow local_login_t self:dbus *;
	allow local_login_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(local_login_t) depth: 3
 	
	
	


	allow local_login_t proc_type:{ dir file } *;

	allow local_login_t sysctl_t:{ dir file } *;

	allow local_login_t kernel_t:system *;

	allow local_login_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow local_login_t unlabeled_t:filesystem *;
	allow local_login_t unlabeled_t:association *;

	typeattribute local_login_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute local_login_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(local_login_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow local_login_t { proc_t proc_net_t }:dir search;

	allow local_login_t sysctl_type:dir { read getattr lock search ioctl };
	allow local_login_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(local_login_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(local_login_t) depth: 3
 	
	
	


	allow local_login_t node_type:node *;
	allow local_login_t netif_type:netif *;
	allow local_login_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow local_login_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow local_login_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow local_login_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(local_login_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(local_login_t) depth: 5
 	
	
	


	allow local_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(local_login_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(local_login_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(local_login_t) depth: 3
 	
	
	


	allow local_login_t device_node:{ chr_file blk_file } *;
	allow local_login_t mtrr_device_t:{ dir file } *;

	allow local_login_t self:capability sys_rawio;
	typeattribute local_login_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(local_login_t) depth: 3
 	
	
	


	typeattribute local_login_t unconfined_domain_type;

	# pass all constraints
	typeattribute local_login_t can_change_process_identity;
	typeattribute local_login_t can_change_process_role;
	typeattribute local_login_t can_change_object_identity;
	typeattribute local_login_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow local_login_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow local_login_t domain:fd use;
	allow local_login_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow local_login_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow local_login_t domain:{ sem msgq shm } *;
	allow local_login_t domain:msg { send receive };

	# For /proc/pid
	allow local_login_t domain:dir { read getattr lock search ioctl };
	allow local_login_t domain:file { read getattr lock ioctl };
	allow local_login_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(local_login_t) depth: 3
 	
	
	


	dontaudit local_login_t domain:dir { read getattr lock search ioctl };
	dontaudit local_login_t domain:lnk_file { read getattr lock ioctl };
	dontaudit local_login_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit local_login_t domain:sock_file { read getattr lock ioctl };
	dontaudit local_login_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(local_login_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow local_login_t file_type:{ file chr_file } ~execmod;
	allow local_login_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow local_login_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow local_login_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow local_login_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(local_login_t) depth: 3
 	
	
	


	allow local_login_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow local_login_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(local_login_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(local_login_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow local_login_t security_t:dir { getattr search read };
	allow local_login_t security_t:file { getattr read write };

	typeattribute local_login_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow local_login_t security_t:security *;
		auditallow local_login_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(local_login_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow local_login_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow local_login_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow local_login_t self:process execstack;
		auditallow local_login_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit local_login_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(local_login_t) depth: 3
 	
	
	


	typeattribute local_login_t can_read_shadow_passwords;
	typeattribute local_login_t can_write_shadow_passwords;
	typeattribute local_login_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(local_login_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(local_login_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(local_login_t) depth: 4
 	
	
	


	allow local_login_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(local_login_t) depth: 3
 	
	allow local_login_t lib_t:dir { read getattr lock search ioctl };
	allow local_login_t lib_t:lnk_file { read getattr lock ioctl };
	allow local_login_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow local_login_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow local_login_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(local_login_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(local_login_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(local_login_t) depth: 4
 	
	
	


	allow local_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(local_login_t) depth: 3
 	
	allow local_login_t selinux_config_t:dir search;
	allow local_login_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow local_login_t policy_config_t:file { getattr create write };
#	typeattribute local_login_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(local_login_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(local_login_t) depth: 3
 	
	
	


	allow local_login_t policy_config_t:file relabelto;
	typeattribute local_login_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(local_login_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(local_login_t) depth: 3
 	
	
	


	allow local_login_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow local_login_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute local_login_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute local_login_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(local_login_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(local_login_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow local_login_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow local_login_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin unconfined_shell_domtrans(local_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_domtrans(local_login_t,unconfined_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(local_login_t,unconfined_t) depth: 3
 	
	
	


	allow local_login_t bin_t:dir { read getattr lock search ioctl };
	allow local_login_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(local_login_t,shell_exec_t,unconfined_t) depth: 4
 	
	allow local_login_t shell_exec_t:file { getattr read execute };
	allow local_login_t unconfined_t:process transition;
	dontaudit local_login_t unconfined_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(local_login_t,shell_exec_t,unconfined_t) depth: 3
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(local_login_t,unconfined_t) depth: 2
 	
	type_transition local_login_t shell_exec_t:process unconfined_t;

	 	 	 	
##### end corecmd_shell_domtrans(local_login_t,unconfined_t) depth: 1
 	

	 	 	 	
##### end unconfined_shell_domtrans(local_login_t) depth: 0
 	



	
		if (read_default_t) {
			
	 	 	 	 	
##### begin files_list_default(local_login_t) depth: 1
 	
	
	


	allow local_login_t default_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_default(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t default_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_files(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t default_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_symlinks(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_sockets(local_login_t) depth: 1
 	
	
	


	allow local_login_t default_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_sockets(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_pipes(local_login_t) depth: 1
 	
	
	


	allow local_login_t default_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_pipes(local_login_t) depth: 0
 	

		
		}
	



	
		if (use_nfs_home_dirs) {
			
	 	 	 	 	
##### begin fs_read_nfs_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t nfs_t:dir { read getattr lock search ioctl };
	allow local_login_t nfs_t:file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_nfs_files(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin fs_read_nfs_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t nfs_t:dir { read getattr lock search ioctl };
	allow local_login_t nfs_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_nfs_symlinks(local_login_t) depth: 0
 	

		
		}
	



	
		if (use_samba_home_dirs) {
			
	 	 	 	 	
##### begin fs_read_cifs_files(local_login_t) depth: 1
 	
	
	


	allow local_login_t cifs_t:dir { read getattr lock search ioctl };
	allow local_login_t cifs_t:file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_cifs_files(local_login_t) depth: 0
 	
	 	 	 	 	
##### begin fs_read_cifs_symlinks(local_login_t) depth: 1
 	
	
	


	allow local_login_t cifs_t:dir { read getattr lock search ioctl };
	allow local_login_t cifs_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_cifs_symlinks(local_login_t) depth: 0
 	

		
		}
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin usermanage_read_crack_db(local_login_t) depth: 1
 	
	
	


	allow local_login_t crack_db_t:file { read getattr lock ioctl };

	 	 	 	
##### end usermanage_read_crack_db(local_login_t) depth: 0
 	

	



	
		
	


#################################
# 
# Sulogin local policy
#

allow sulogin_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow sulogin_t self:fd use;
allow sulogin_t self:fifo_file { getattr read write append ioctl lock };
allow sulogin_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow sulogin_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow sulogin_t self:unix_dgram_socket sendto;
allow sulogin_t self:unix_stream_socket connectto;
allow sulogin_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow sulogin_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow sulogin_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow sulogin_t self:msg { send receive };

 	 	 	 	
##### begin kernel_read_system_state(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t proc_t:dir { read getattr lock search ioctl };
	allow sulogin_t proc_t:lnk_file { getattr read };
	allow sulogin_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin fs_rw_tmpfs_chr_files(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t tmpfs_t:dir { read getattr lock search ioctl };
	allow sulogin_t tmpfs_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end fs_rw_tmpfs_chr_files(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t etc_t:dir { read getattr lock search ioctl };
	allow sulogin_t etc_t:file { read getattr lock ioctl };
	allow sulogin_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(sulogin_t) depth: 0
 	
# because file systems are not mounted:
 	 	 	 	
##### begin files_dontaudit_search_isid_type_dirs(sulogin_t) depth: 1
 	
	
	


	dontaudit sulogin_t file_t:dir { getattr search };

	 	 	 	
##### end files_dontaudit_search_isid_type_dirs(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin init_getpgid_script(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t initrc_t:process getpgid;

	 	 	 	
##### end init_getpgid_script(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(sulogin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(sulogin_t) depth: 2
 	
	
	


	allow sulogin_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(sulogin_t) depth: 1
 	
	allow sulogin_t lib_t:dir { read getattr lock search ioctl };
	allow sulogin_t lib_t:lnk_file { read getattr lock ioctl };
	allow sulogin_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow sulogin_t ld_so_t:file { read getattr lock execute ioctl };
	allow sulogin_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(sulogin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(sulogin_t) depth: 2
 	
	
	


	allow sulogin_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(sulogin_t) depth: 1
 	
	allow sulogin_t lib_t:dir { read getattr lock search ioctl };
	allow sulogin_t lib_t:lnk_file { read getattr lock ioctl };
	allow sulogin_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow sulogin_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow sulogin_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t devlog_t:lnk_file read;
	allow sulogin_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow sulogin_t syslogd_t:unix_dgram_socket sendto;
	allow sulogin_t syslogd_t:unix_stream_socket connectto;
	allow sulogin_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow sulogin_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(sulogin_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sulogin_t) depth: 2
 	
	allow sulogin_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(sulogin_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(sulogin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sulogin_t) depth: 2
 	
	
	


	allow sulogin_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sulogin_t) depth: 1
 	
	allow sulogin_t selinux_config_t:dir { read getattr lock search ioctl };
	allow sulogin_t selinux_config_t:file { read getattr lock ioctl };
	allow sulogin_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_default_contexts(sulogin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sulogin_t) depth: 2
 	
	
	


	allow sulogin_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sulogin_t) depth: 1
 	
	allow sulogin_t selinux_config_t:dir search;
	allow sulogin_t default_context_t:dir { read getattr lock search ioctl };
	allow sulogin_t default_context_t:file { read getattr lock ioctl };
	allow sulogin_t default_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_default_contexts(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin auth_read_shadow(sulogin_t) depth: 1
 	
	 	 	 	 	
##### begin auth_can_read_shadow_passwords(sulogin_t) depth: 2
 	
	
	


	typeattribute sulogin_t can_read_shadow_passwords;

	 	 	 	
##### end auth_can_read_shadow_passwords(sulogin_t) depth: 1
 	
	 	 	 	 	
##### begin auth_tunable_read_shadow(sulogin_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_etc(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(sulogin_t) depth: 2
 	
	allow sulogin_t shadow_t:file { read getattr lock ioctl };

	 	 	 	
##### end auth_tunable_read_shadow(sulogin_t) depth: 1
 	

	 	 	 	
##### end auth_read_shadow(sulogin_t) depth: 0
 	

 	 	 	 	
##### begin userdom_shell_domtrans_sysadm(sulogin_t) depth: 1
 	
	
		#cjp: need to doublecheck this one
		 	 	 	 	
##### begin unconfined_shell_domtrans(sulogin_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_domtrans(sulogin_t,unconfined_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(sulogin_t,unconfined_t) depth: 4
 	
	
	


	allow sulogin_t bin_t:dir { read getattr lock search ioctl };
	allow sulogin_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(sulogin_t,shell_exec_t,unconfined_t) depth: 5
 	
	allow sulogin_t shell_exec_t:file { getattr read execute };
	allow sulogin_t unconfined_t:process transition;
	dontaudit sulogin_t unconfined_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(sulogin_t,shell_exec_t,unconfined_t) depth: 4
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(sulogin_t,unconfined_t) depth: 3
 	
	type_transition sulogin_t shell_exec_t:process unconfined_t;

	 	 	 	
##### end corecmd_shell_domtrans(sulogin_t,unconfined_t) depth: 2
 	

	 	 	 	
##### end unconfined_shell_domtrans(sulogin_t) depth: 1
 	
	

	 	 	 	
##### end userdom_shell_domtrans_sysadm(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin userdom_use_unpriv_users_fds(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin userdom_use_sysadm_ptys(sulogin_t) depth: 1
 	
	
		 	 	 	 	
##### begin term_use_generic_ptys(sulogin_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sulogin_t) depth: 3
 	
	
	


	allow sulogin_t device_t:dir { read getattr lock search ioctl };
	allow sulogin_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sulogin_t) depth: 2
 	
	allow sulogin_t devpts_t:dir { getattr search read lock ioctl };
	allow sulogin_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(sulogin_t) depth: 1
 	
	

	 	 	 	
##### end userdom_use_sysadm_ptys(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin userdom_search_staff_home_dirs(sulogin_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(sulogin_t) depth: 2
 	
	
	


	allow sulogin_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(sulogin_t) depth: 1
 	
	allow sulogin_t staff_home_dir_t:dir search;

	 	 	 	
##### end userdom_search_staff_home_dirs(sulogin_t) depth: 0
 	
 	 	 	 	
##### begin userdom_search_sysadm_home_dirs(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t sysadm_home_dir_t:dir search;

	 	 	 	
##### end userdom_search_sysadm_home_dirs(sulogin_t) depth: 0
 	

# suse and debian do not use pam with sulogin...




	allow sulogin_t self:process setexec;
	 	 	 	 	
##### begin selinux_get_fs_mount(sulogin_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(sulogin_t) depth: 2
 	
	
	


	allow sulogin_t proc_t:dir { read getattr lock search ioctl };
	allow sulogin_t proc_t:lnk_file { getattr read };
	allow sulogin_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(sulogin_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(sulogin_t) depth: 0
 	
	 	 	 	 	
##### begin selinux_validate_context(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t security_t:dir { read search getattr };
	allow sulogin_t security_t:file { getattr read write };
	allow sulogin_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(sulogin_t) depth: 0
 	
	 	 	 	 	
##### begin selinux_compute_access_vector(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t security_t:dir { read search getattr };
	allow sulogin_t security_t:file { getattr read write };
	allow sulogin_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(sulogin_t) depth: 0
 	
	 	 	 	 	
##### begin selinux_compute_create_context(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t security_t:dir { read search getattr };
	allow sulogin_t security_t:file { getattr read write };
	allow sulogin_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(sulogin_t) depth: 0
 	
	 	 	 	 	
##### begin selinux_compute_relabel_context(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t security_t:dir { read search getattr };
	allow sulogin_t security_t:file { getattr read write };
	allow sulogin_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(sulogin_t) depth: 0
 	
	 	 	 	 	
##### begin selinux_compute_user_contexts(sulogin_t) depth: 1
 	
	
	


	allow sulogin_t security_t:dir { read search getattr };
	allow sulogin_t security_t:file { getattr read write };
	allow sulogin_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(sulogin_t) depth: 0
 	



	
		
	



	
		
	



	


########################################
#
# Declarations
#


 	 	 	 	
##### begin init_system_domain(auditctl_t,auditctl_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(auditctl_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(auditctl_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute auditctl_t domain;

	# allow the domain to read its /proc/pid entries
	allow auditctl_t self:dir { read getattr lock search ioctl };
	allow auditctl_t self:lnk_file { read getattr lock ioctl };
	allow auditctl_t self:file { getattr read write append ioctl lock };

	# allow auditctl_t to create child processes in this domain
	allow auditctl_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types auditctl_t;
		role sysadm_r types auditctl_t;
		role user_r types auditctl_t;
		role staff_r types auditctl_t;
	

	 	 	 	
##### end domain_base_type(auditctl_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(auditctl_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(auditctl_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(auditctl_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditctl_t) depth: 4
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditctl_t) depth: 3
 	
	allow auditctl_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(auditctl_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t root_t:dir { read getattr lock search ioctl };
	allow auditctl_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(auditctl_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(auditctl_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t init_t:process signull;

	 	 	 	
##### end init_signull(auditctl_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(auditctl_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(auditctl_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(auditctl_t) depth: 3
 	
	
	


	dontaudit auditctl_t security_t:dir search;
	dontaudit auditctl_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(auditctl_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(auditctl_t) depth: 3
 	
	
	


	dontaudit auditctl_t selinux_config_t:dir search;
	dontaudit auditctl_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(auditctl_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(auditctl_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(auditctl_t,auditctl_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(auditctl_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(auditctl_exec_t) depth: 4
 	
	
	


	allow auditctl_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(auditctl_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(auditctl_exec_t) depth: 4
 	
	
	


	allow auditctl_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(auditctl_exec_t) depth: 3
 	
	typeattribute auditctl_exec_t file_type;

	 	 	 	
##### end files_type(auditctl_exec_t) depth: 2
 	

	allow auditctl_t auditctl_exec_t:file entrypoint;
	allow auditctl_t auditctl_exec_t:file { read getattr lock execute ioctl };

	typeattribute auditctl_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(auditctl_t,auditctl_exec_t) depth: 1
 	

	role system_r types auditctl_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,auditctl_exec_t,auditctl_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,auditctl_exec_t,auditctl_t) depth: 3
 	
	allow initrc_t auditctl_exec_t:file { getattr read execute };
	allow initrc_t auditctl_t:process transition;
	dontaudit initrc_t auditctl_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,auditctl_exec_t,auditctl_t) depth: 2
 	
	type_transition initrc_t auditctl_exec_t:process auditctl_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,auditctl_exec_t,auditctl_t) depth: 1
 	

	allow initrc_t auditctl_t:fd use;
	allow auditctl_t initrc_t:fd use;
	allow auditctl_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow auditctl_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(auditctl_t,auditctl_exec_t) depth: 0
 	
role system_r types auditctl_t;

 	 	 	 	
##### begin files_security_file(auditd_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(auditd_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(auditd_etc_t) depth: 3
 	
	
	


	allow auditd_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(auditd_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(auditd_etc_t) depth: 3
 	
	
	


	allow auditd_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(auditd_etc_t) depth: 2
 	
	typeattribute auditd_etc_t file_type;

	 	 	 	
##### end files_type(auditd_etc_t) depth: 1
 	
	typeattribute auditd_etc_t security_file_type;

	 	 	 	
##### end files_security_file(auditd_etc_t) depth: 0
 	

 	 	 	 	
##### begin files_security_file(auditd_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(auditd_log_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(auditd_log_t) depth: 3
 	
	
	


	allow auditd_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(auditd_log_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(auditd_log_t) depth: 3
 	
	
	


	allow auditd_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(auditd_log_t) depth: 2
 	
	typeattribute auditd_log_t file_type;

	 	 	 	
##### end files_type(auditd_log_t) depth: 1
 	
	typeattribute auditd_log_t security_file_type;

	 	 	 	
##### end files_security_file(auditd_log_t) depth: 0
 	

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin init_daemon_domain(auditd_t,auditd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(auditd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(auditd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute auditd_t domain;

	# allow the domain to read its /proc/pid entries
	allow auditd_t self:dir { read getattr lock search ioctl };
	allow auditd_t self:lnk_file { read getattr lock ioctl };
	allow auditd_t self:file { getattr read write append ioctl lock };

	# allow auditd_t to create child processes in this domain
	allow auditd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types auditd_t;
		role sysadm_r types auditd_t;
		role user_r types auditd_t;
		role staff_r types auditd_t;
	

	 	 	 	
##### end domain_base_type(auditd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(auditd_t) depth: 3
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(auditd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(auditd_t) depth: 3
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(auditd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(auditd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditd_t) depth: 4
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditd_t) depth: 3
 	
	allow auditd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(auditd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(auditd_t) depth: 3
 	
	
	


	allow auditd_t root_t:dir { read getattr lock search ioctl };
	allow auditd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(auditd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(auditd_t) depth: 3
 	
	
	


	allow auditd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(auditd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(auditd_t) depth: 3
 	
	
	


	allow auditd_t init_t:process signull;

	 	 	 	
##### end init_signull(auditd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(auditd_t) depth: 3
 	
	
	


	allow auditd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(auditd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(auditd_t) depth: 3
 	
	
	


	allow auditd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(auditd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(auditd_t) depth: 3
 	
	
	


	dontaudit auditd_t security_t:dir search;
	dontaudit auditd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(auditd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(auditd_t) depth: 3
 	
	
	


	dontaudit auditd_t selinux_config_t:dir search;
	dontaudit auditd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(auditd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(auditd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(auditd_t,auditd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(auditd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(auditd_exec_t) depth: 4
 	
	
	


	allow auditd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(auditd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(auditd_exec_t) depth: 4
 	
	
	


	allow auditd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(auditd_exec_t) depth: 3
 	
	typeattribute auditd_exec_t file_type;

	 	 	 	
##### end files_type(auditd_exec_t) depth: 2
 	

	allow auditd_t auditd_exec_t:file entrypoint;
	allow auditd_t auditd_exec_t:file { read getattr lock execute ioctl };

	typeattribute auditd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(auditd_t,auditd_exec_t) depth: 1
 	

	role system_r types auditd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool auditd_disable_trans false;
			
		
		if(auditd_disable_trans ) {
			
	
	


	allow initrc_t auditd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init auditd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,auditd_exec_t,auditd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,auditd_exec_t,auditd_t) depth: 3
 	
	allow initrc_t auditd_exec_t:file { getattr read execute };
	allow initrc_t auditd_t:process transition;
	dontaudit initrc_t auditd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,auditd_exec_t,auditd_t) depth: 2
 	
	type_transition initrc_t auditd_exec_t:process auditd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,auditd_exec_t,auditd_t) depth: 1
 	
			allow initrc_t auditd_t:fd use;
			allow auditd_t initrc_t:fd use;
			allow auditd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow auditd_t initrc_t:process sigchld;
			allow initrc_t auditd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow auditd_t auditd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(auditd_t,auditd_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(auditd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(auditd_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(auditd_var_run_t) depth: 3
 	
	
	


	allow auditd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(auditd_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(auditd_var_run_t) depth: 3
 	
	
	


	allow auditd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(auditd_var_run_t) depth: 2
 	
	typeattribute auditd_var_run_t file_type;

	 	 	 	
##### end files_type(auditd_var_run_t) depth: 1
 	
	typeattribute auditd_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(auditd_var_run_t) depth: 0
 	

 	 	 	 	
##### begin files_type(devlog_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(devlog_t) depth: 2
 	
	
	


	allow devlog_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(devlog_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(devlog_t) depth: 2
 	
	
	


	allow devlog_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(devlog_t) depth: 1
 	
	typeattribute devlog_t file_type;

	 	 	 	
##### end files_type(devlog_t) depth: 0
 	
 	 	 	 	
##### begin mls_trusted_object(devlog_t) depth: 1
 	
	
	


	typeattribute devlog_t mlstrustedobject;

	 	 	 	
##### end mls_trusted_object(devlog_t) depth: 0
 	

 	 	 	 	
##### begin init_daemon_domain(klogd_t,klogd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(klogd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(klogd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute klogd_t domain;

	# allow the domain to read its /proc/pid entries
	allow klogd_t self:dir { read getattr lock search ioctl };
	allow klogd_t self:lnk_file { read getattr lock ioctl };
	allow klogd_t self:file { getattr read write append ioctl lock };

	# allow klogd_t to create child processes in this domain
	allow klogd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types klogd_t;
		role sysadm_r types klogd_t;
		role user_r types klogd_t;
		role staff_r types klogd_t;
	

	 	 	 	
##### end domain_base_type(klogd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(klogd_t) depth: 3
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(klogd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(klogd_t) depth: 3
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(klogd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(klogd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(klogd_t) depth: 4
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(klogd_t) depth: 3
 	
	allow klogd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(klogd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(klogd_t) depth: 3
 	
	
	


	allow klogd_t root_t:dir { read getattr lock search ioctl };
	allow klogd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(klogd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(klogd_t) depth: 3
 	
	
	


	allow klogd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(klogd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(klogd_t) depth: 3
 	
	
	


	allow klogd_t init_t:process signull;

	 	 	 	
##### end init_signull(klogd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(klogd_t) depth: 3
 	
	
	


	allow klogd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(klogd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(klogd_t) depth: 3
 	
	
	


	allow klogd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(klogd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(klogd_t) depth: 3
 	
	
	


	dontaudit klogd_t security_t:dir search;
	dontaudit klogd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(klogd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(klogd_t) depth: 3
 	
	
	


	dontaudit klogd_t selinux_config_t:dir search;
	dontaudit klogd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(klogd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(klogd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(klogd_t,klogd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(klogd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(klogd_exec_t) depth: 4
 	
	
	


	allow klogd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(klogd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(klogd_exec_t) depth: 4
 	
	
	


	allow klogd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(klogd_exec_t) depth: 3
 	
	typeattribute klogd_exec_t file_type;

	 	 	 	
##### end files_type(klogd_exec_t) depth: 2
 	

	allow klogd_t klogd_exec_t:file entrypoint;
	allow klogd_t klogd_exec_t:file { read getattr lock execute ioctl };

	typeattribute klogd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(klogd_t,klogd_exec_t) depth: 1
 	

	role system_r types klogd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool klogd_disable_trans false;
			
		
		if(klogd_disable_trans ) {
			
	
	


	allow initrc_t klogd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init klogd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,klogd_exec_t,klogd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,klogd_exec_t,klogd_t) depth: 3
 	
	allow initrc_t klogd_exec_t:file { getattr read execute };
	allow initrc_t klogd_t:process transition;
	dontaudit initrc_t klogd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,klogd_exec_t,klogd_t) depth: 2
 	
	type_transition initrc_t klogd_exec_t:process klogd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,klogd_exec_t,klogd_t) depth: 1
 	
			allow initrc_t klogd_t:fd use;
			allow klogd_t initrc_t:fd use;
			allow klogd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow klogd_t initrc_t:process sigchld;
			allow initrc_t klogd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow klogd_t klogd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(klogd_t,klogd_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(klogd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(klogd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(klogd_tmp_t) depth: 3
 	
	
	


	allow klogd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(klogd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(klogd_tmp_t) depth: 3
 	
	
	


	allow klogd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(klogd_tmp_t) depth: 2
 	
	typeattribute klogd_tmp_t file_type;

	 	 	 	
##### end files_type(klogd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(klogd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(klogd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(klogd_tmp_t) depth: 4
 	
	
	


	allow klogd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(klogd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(klogd_tmp_t) depth: 4
 	
	
	


	allow klogd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(klogd_tmp_t) depth: 3
 	
	typeattribute klogd_tmp_t file_type;

	 	 	 	
##### end files_type(klogd_tmp_t) depth: 2
 	
	typeattribute klogd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(klogd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(klogd_tmp_t) depth: 2
 	
	
	


	allow klogd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(klogd_tmp_t) depth: 1
 	
	typeattribute klogd_tmp_t tmpfile;
	allow klogd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(klogd_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(klogd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(klogd_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(klogd_var_run_t) depth: 3
 	
	
	


	allow klogd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(klogd_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(klogd_var_run_t) depth: 3
 	
	
	


	allow klogd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(klogd_var_run_t) depth: 2
 	
	typeattribute klogd_var_run_t file_type;

	 	 	 	
##### end files_type(klogd_var_run_t) depth: 1
 	
	typeattribute klogd_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(klogd_var_run_t) depth: 0
 	

 	 	 	 	
##### begin init_daemon_domain(syslogd_t,syslogd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(syslogd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(syslogd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute syslogd_t domain;

	# allow the domain to read its /proc/pid entries
	allow syslogd_t self:dir { read getattr lock search ioctl };
	allow syslogd_t self:lnk_file { read getattr lock ioctl };
	allow syslogd_t self:file { getattr read write append ioctl lock };

	# allow syslogd_t to create child processes in this domain
	allow syslogd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types syslogd_t;
		role sysadm_r types syslogd_t;
		role user_r types syslogd_t;
		role staff_r types syslogd_t;
	

	 	 	 	
##### end domain_base_type(syslogd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(syslogd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(syslogd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(syslogd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(syslogd_t) depth: 4
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(syslogd_t) depth: 3
 	
	allow syslogd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(syslogd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t root_t:dir { read getattr lock search ioctl };
	allow syslogd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(syslogd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(syslogd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t init_t:process signull;

	 	 	 	
##### end init_signull(syslogd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(syslogd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(syslogd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(syslogd_t) depth: 3
 	
	
	


	dontaudit syslogd_t security_t:dir search;
	dontaudit syslogd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(syslogd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(syslogd_t) depth: 3
 	
	
	


	dontaudit syslogd_t selinux_config_t:dir search;
	dontaudit syslogd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(syslogd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(syslogd_t,syslogd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(syslogd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(syslogd_exec_t) depth: 4
 	
	
	


	allow syslogd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(syslogd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(syslogd_exec_t) depth: 4
 	
	
	


	allow syslogd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(syslogd_exec_t) depth: 3
 	
	typeattribute syslogd_exec_t file_type;

	 	 	 	
##### end files_type(syslogd_exec_t) depth: 2
 	

	allow syslogd_t syslogd_exec_t:file entrypoint;
	allow syslogd_t syslogd_exec_t:file { read getattr lock execute ioctl };

	typeattribute syslogd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(syslogd_t,syslogd_exec_t) depth: 1
 	

	role system_r types syslogd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool syslogd_disable_trans false;
			
		
		if(syslogd_disable_trans ) {
			
	
	


	allow initrc_t syslogd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init syslogd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,syslogd_exec_t,syslogd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,syslogd_exec_t,syslogd_t) depth: 3
 	
	allow initrc_t syslogd_exec_t:file { getattr read execute };
	allow initrc_t syslogd_t:process transition;
	dontaudit initrc_t syslogd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,syslogd_exec_t,syslogd_t) depth: 2
 	
	type_transition initrc_t syslogd_exec_t:process syslogd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,syslogd_exec_t,syslogd_t) depth: 1
 	
			allow initrc_t syslogd_t:fd use;
			allow syslogd_t initrc_t:fd use;
			allow syslogd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow syslogd_t initrc_t:process sigchld;
			allow initrc_t syslogd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow syslogd_t syslogd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(syslogd_t,syslogd_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(syslogd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(syslogd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(syslogd_tmp_t) depth: 3
 	
	
	


	allow syslogd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(syslogd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(syslogd_tmp_t) depth: 3
 	
	
	


	allow syslogd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(syslogd_tmp_t) depth: 2
 	
	typeattribute syslogd_tmp_t file_type;

	 	 	 	
##### end files_type(syslogd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(syslogd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(syslogd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(syslogd_tmp_t) depth: 4
 	
	
	


	allow syslogd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(syslogd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(syslogd_tmp_t) depth: 4
 	
	
	


	allow syslogd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(syslogd_tmp_t) depth: 3
 	
	typeattribute syslogd_tmp_t file_type;

	 	 	 	
##### end files_type(syslogd_tmp_t) depth: 2
 	
	typeattribute syslogd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(syslogd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(syslogd_tmp_t) depth: 2
 	
	
	


	allow syslogd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(syslogd_tmp_t) depth: 1
 	
	typeattribute syslogd_tmp_t tmpfile;
	allow syslogd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(syslogd_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(syslogd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(syslogd_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(syslogd_var_run_t) depth: 3
 	
	
	


	allow syslogd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(syslogd_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(syslogd_var_run_t) depth: 3
 	
	
	


	allow syslogd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(syslogd_var_run_t) depth: 2
 	
	typeattribute syslogd_var_run_t file_type;

	 	 	 	
##### end files_type(syslogd_var_run_t) depth: 1
 	
	typeattribute syslogd_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(syslogd_var_run_t) depth: 0
 	

 	 	 	 	
##### begin logging_log_file(var_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(var_log_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(var_log_t) depth: 3
 	
	
	


	allow var_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(var_log_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(var_log_t) depth: 3
 	
	
	


	allow var_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(var_log_t) depth: 2
 	
	typeattribute var_log_t file_type;

	 	 	 	
##### end files_type(var_log_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(var_log_t) depth: 2
 	
	
	


	allow var_log_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(var_log_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(var_log_t) depth: 2
 	
	
	


	allow var_log_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(var_log_t) depth: 1
 	
	typeattribute var_log_t logfile;

	 	 	 	
##### end logging_log_file(var_log_t) depth: 0
 	

########################################
#
# Auditd local policy
#

allow auditctl_t self:capability { audit_write audit_control };
allow auditctl_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay nlmsg_readpriv };

 	 	 	 	
##### begin libs_use_ld_so(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(auditctl_t) depth: 2
 	
	
	


	allow auditctl_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(auditctl_t) depth: 1
 	
	allow auditctl_t lib_t:dir { read getattr lock search ioctl };
	allow auditctl_t lib_t:lnk_file { read getattr lock ioctl };
	allow auditctl_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow auditctl_t ld_so_t:file { read getattr lock execute ioctl };
	allow auditctl_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(auditctl_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(auditctl_t) depth: 2
 	
	
	


	allow auditctl_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(auditctl_t) depth: 1
 	
	allow auditctl_t lib_t:dir { read getattr lock search ioctl };
	allow auditctl_t lib_t:lnk_file { read getattr lock ioctl };
	allow auditctl_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow auditctl_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow auditctl_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(auditctl_t) depth: 0
 	

allow auditctl_t etc_t:file { getattr read };

allow auditctl_t auditd_etc_t:file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_read_kernel_sysctls(auditctl_t) depth: 1
 	
	
	


	allow auditctl_t proc_t:dir search;
	allow auditctl_t sysctl_t:dir { read getattr lock search ioctl };
	allow auditctl_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow auditctl_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(auditctl_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(auditctl_t) depth: 1
 	
	
	


	allow auditctl_t proc_t:dir search;
	allow auditctl_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(auditctl_t) depth: 0
 	

 	 	 	 	
##### begin domain_read_all_domains_state(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_search_proc(auditctl_t) depth: 2
 	
	
	


	allow auditctl_t proc_t:dir search;

	 	 	 	
##### end kernel_search_proc(auditctl_t) depth: 1
 	
	allow auditctl_t domain:dir { read getattr lock search ioctl };
	allow auditctl_t domain:lnk_file { read getattr lock ioctl };
	allow auditctl_t domain:file { read getattr lock ioctl };

	 	 	 	
##### end domain_read_all_domains_state(auditctl_t) depth: 0
 	
 	 	 	 	
##### begin domain_use_interactive_fds(auditctl_t) depth: 1
 	
	
	


	allow auditctl_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(auditctl_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(auditctl_t) depth: 1
 	
	
	


	typeattribute auditctl_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(auditctl_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_terms(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditctl_t) depth: 2
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditctl_t) depth: 1
 	
	allow auditctl_t devpts_t:dir { read getattr lock search ioctl };
	allow auditctl_t { console_device_t tty_device_t ttynode ptynode }:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_all_terms(auditctl_t) depth: 0
 	

 	 	 	 	
##### begin init_use_script_ptys(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(auditctl_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditctl_t) depth: 2
 	
	allow auditctl_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(auditctl_t) depth: 1
 	
	allow auditctl_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(auditctl_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_use_fds(auditctl_t) depth: 1
 	
	
	


	dontaudit auditctl_t init_t:fd use;

	 	 	 	
##### end init_dontaudit_use_fds(auditctl_t) depth: 0
 	

 	 	 	 	
##### begin locallogin_dontaudit_use_fds(auditctl_t) depth: 1
 	
	
	


	dontaudit auditctl_t local_login_t:fd use;

	 	 	 	
##### end locallogin_dontaudit_use_fds(auditctl_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(auditctl_t) depth: 1
 	
	
	


	allow auditctl_t devlog_t:lnk_file read;
	allow auditctl_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow auditctl_t syslogd_t:unix_dgram_socket sendto;
	allow auditctl_t syslogd_t:unix_stream_socket connectto;
	allow auditctl_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow auditctl_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(auditctl_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditctl_t) depth: 3
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditctl_t) depth: 2
 	
	allow auditctl_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(auditctl_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(auditctl_t) depth: 0
 	


	 	 	 	 	
##### begin term_use_generic_ptys(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditctl_t) depth: 2
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditctl_t) depth: 1
 	
	allow auditctl_t devpts_t:dir { getattr search read lock ioctl };
	allow auditctl_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(auditctl_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_unallocated_ttys(auditctl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditctl_t) depth: 2
 	
	
	


	allow auditctl_t device_t:dir { read getattr lock search ioctl };
	allow auditctl_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditctl_t) depth: 1
 	
	allow auditctl_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(auditctl_t) depth: 0
 	


 
########################################
#
# Auditd local policy
#

allow auditd_t self:capability { audit_write audit_control sys_nice sys_resource };
dontaudit auditd_t self:capability sys_tty_config;
allow auditd_t self:process { { sigchld sigkill sigstop signull signal } setpgid setsched };
allow auditd_t self:file { getattr read write };
allow auditd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow auditd_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay nlmsg_readpriv };
allow auditd_t self:fifo_file { getattr read write append ioctl lock };

allow auditd_t auditd_etc_t:file { read getattr lock ioctl };

allow auditd_t auditd_log_t:dir { read getattr lock search ioctl add_name remove_name write };
allow auditd_t auditd_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow auditd_t auditd_log_t:lnk_file { create read getattr setattr link unlink rename };
allow auditd_t var_log_t:dir search;

allow auditd_t auditd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow auditd_t auditd_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(auditd_t,auditd_var_run_t,file) depth: 1
 	
	
	


	allow auditd_t var_t:dir { getattr search };
	allow auditd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition auditd_t var_run_t:file auditd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(auditd_t,auditd_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(auditd_t) depth: 1
 	
	
	


	allow auditd_t proc_t:dir search;
	allow auditd_t sysctl_t:dir { read getattr lock search ioctl };
	allow auditd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow auditd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(auditd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_list_proc(auditd_t) depth: 1
 	
	
	


	allow auditd_t proc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_proc(auditd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(auditd_t) depth: 1
 	
	
	


	allow auditd_t proc_t:dir search;
	allow auditd_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(auditd_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(auditd_t) depth: 1
 	
	
	


	allow auditd_t sysfs_t:dir { read getattr lock search ioctl };
	allow auditd_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(auditd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(auditd_t) depth: 1
 	
	
	


	allow auditd_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(auditd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(auditd_t) depth: 1
 	
	
	


	allow auditd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(auditd_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(auditd_t) depth: 1
 	
	
	


	dontaudit auditd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(auditd_t) depth: 0
 	

# cjp: why?
 	 	 	 	
##### begin corecmd_exec_sbin(auditd_t) depth: 1
 	
	
	


	allow auditd_t sbin_t:dir { read getattr lock search ioctl };
	allow auditd_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow auditd_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(auditd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(auditd_t) depth: 1
 	
	
	


	allow auditd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(auditd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(auditd_t) depth: 1
 	
	
	


	allow auditd_t etc_t:dir { read getattr lock search ioctl };
	allow auditd_t etc_t:file { read getattr lock ioctl };
	allow auditd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(auditd_t) depth: 0
 	
 	 	 	 	
##### begin files_list_usr(auditd_t) depth: 1
 	
	
	


	allow auditd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(auditd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(auditd_t) depth: 1
 	
	
	


	allow auditd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(auditd_t) depth: 0
 	
 	 	 	 	
##### begin init_exec(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(auditd_t) depth: 2
 	
	
	


	allow auditd_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(auditd_t) depth: 1
 	
	
	
	


	allow auditd_t init_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end init_exec(auditd_t) depth: 0
 	
 	 	 	 	
##### begin init_write_initctl(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditd_t) depth: 2
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditd_t) depth: 1
 	
	allow auditd_t initctl_t:fifo_file write;

	 	 	 	
##### end init_write_initctl(auditd_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(auditd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditd_t) depth: 3
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditd_t) depth: 2
 	
	allow auditd_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(auditd_t) depth: 1
 	
	allow auditd_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(auditd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(auditd_t) depth: 1
 	
	
	


	allow auditd_t devlog_t:lnk_file read;
	allow auditd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow auditd_t syslogd_t:unix_dgram_socket sendto;
	allow auditd_t syslogd_t:unix_stream_socket connectto;
	allow auditd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow auditd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(auditd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditd_t) depth: 3
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditd_t) depth: 2
 	
	allow auditd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(auditd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(auditd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(auditd_t) depth: 2
 	
	
	


	allow auditd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(auditd_t) depth: 1
 	
	allow auditd_t lib_t:dir { read getattr lock search ioctl };
	allow auditd_t lib_t:lnk_file { read getattr lock ioctl };
	allow auditd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow auditd_t ld_so_t:file { read getattr lock execute ioctl };
	allow auditd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(auditd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(auditd_t) depth: 2
 	
	
	


	allow auditd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(auditd_t) depth: 1
 	
	allow auditd_t lib_t:dir { read getattr lock search ioctl };
	allow auditd_t lib_t:lnk_file { read getattr lock ioctl };
	allow auditd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow auditd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow auditd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(auditd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(auditd_t) depth: 2
 	
	
	


	allow auditd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(auditd_t) depth: 1
 	
	# FIXME: auditd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(auditd_t) depth: 2
 	
	
	


	allow auditd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(auditd_t) depth: 1
 	
	allow auditd_t locale_t:dir { read getattr lock search ioctl };
	allow auditd_t locale_t:lnk_file { read getattr lock ioctl };
	allow auditd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(auditd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(auditd_t) depth: 3
 	
	
	


	allow auditd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(auditd_t) depth: 2
 	
	allow auditd_t lib_t:dir { read getattr lock search ioctl };
	allow auditd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(auditd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(auditd_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(auditd_t) depth: 1
 	
	
	


	typeattribute auditd_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(auditd_t) depth: 0
 	
 	 	 	 	
##### begin mls_rangetrans_target(auditd_t) depth: 1
 	
	
	


	typeattribute auditd_t mlsrangetrans;

	 	 	 	
##### end mls_rangetrans_target(auditd_t) depth: 0
 	

 	 	 	 	
##### begin seutil_dontaudit_read_config(auditd_t) depth: 1
 	
	
	


	dontaudit auditd_t selinux_config_t:dir search;
	dontaudit auditd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(auditd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(auditd_t) depth: 1
 	
	
	


	dontaudit auditd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(auditd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(auditd_t) depth: 1
 	
	
		
	


		dontaudit auditd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(auditd_t) depth: 0
 	
# cjp: this is questionable
 	 	 	 	
##### begin userdom_use_sysadm_ttys(auditd_t) depth: 1
 	
	
		 	 	 	 	
##### begin term_use_unallocated_ttys(auditd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditd_t) depth: 3
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditd_t) depth: 2
 	
	allow auditd_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(auditd_t) depth: 1
 	
	

	 	 	 	
##### end userdom_use_sysadm_ttys(auditd_t) depth: 0
 	


	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(auditd_t) depth: 1
 	
	
	


	dontaudit auditd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(auditd_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(auditd_t) depth: 1
 	
	
	


	dontaudit auditd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(auditd_t) depth: 0
 	
	 	 	 	 	
##### begin unconfined_dontaudit_read_pipes(auditd_t) depth: 1
 	
	
	


	dontaudit auditd_t unconfined_t:fifo_file read;

	 	 	 	
##### end unconfined_dontaudit_read_pipes(auditd_t) depth: 0
 	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(auditd_t) depth: 1
 	
	
	


	allow auditd_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(auditd_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(auditd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(auditd_t) depth: 2
 	
	
	


	allow auditd_t device_t:dir { read getattr lock search ioctl };
	allow auditd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(auditd_t) depth: 1
 	
	allow auditd_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(auditd_t) depth: 0
 	

	


########################################
#
# klogd local policy
#

allow klogd_t self:capability sys_admin;
dontaudit klogd_t self:capability { sys_resource sys_tty_config };
allow klogd_t self:process { sigchld sigkill sigstop signull signal };

allow klogd_t klogd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow klogd_t klogd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
 	 	 	 	
##### begin files_tmp_filetrans(klogd_t,klogd_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow klogd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition klogd_t tmp_t:{ file dir } klogd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(klogd_t,klogd_tmp_t,{ file dir }) depth: 0
 	

allow klogd_t klogd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow klogd_t klogd_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(klogd_t,klogd_var_run_t,file) depth: 1
 	
	
	


	allow klogd_t var_t:dir { getattr search };
	allow klogd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition klogd_t var_run_t:file klogd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(klogd_t,klogd_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(klogd_t) depth: 1
 	
	
	


	allow klogd_t proc_t:dir { read getattr lock search ioctl };
	allow klogd_t proc_t:lnk_file { getattr read };
	allow klogd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(klogd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_messages(klogd_t) depth: 1
 	
	
	


	allow klogd_t proc_t:dir search;
	allow klogd_t proc_kmsg_t:file { read getattr lock ioctl };
	typeattribute klogd_t can_receive_kernel_messages;

	 	 	 	
##### end kernel_read_messages(klogd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(klogd_t) depth: 1
 	
	
	


	allow klogd_t proc_t:dir search;
	allow klogd_t sysctl_t:dir { read getattr lock search ioctl };
	allow klogd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow klogd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(klogd_t) depth: 0
 	
# Control syslog and console logging
 	 	 	 	
##### begin kernel_clear_ring_buffer(klogd_t) depth: 1
 	
	
	


	allow klogd_t kernel_t:system syslog_mod;

	 	 	 	
##### end kernel_clear_ring_buffer(klogd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_change_ring_buffer_level(klogd_t) depth: 1
 	
	
	


	allow klogd_t kernel_t:system syslog_console;

	 	 	 	
##### end kernel_change_ring_buffer_level(klogd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_kernel_symbol_table(klogd_t) depth: 1
 	
	
	


	allow klogd_t boot_t:dir { read getattr lock search ioctl };
	allow klogd_t system_map_t:file { read getattr lock ioctl };

	# cjp: this should be dropped:
	allow klogd_t boot_t:file { getattr read };

	 	 	 	
##### end files_read_kernel_symbol_table(klogd_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_raw_memory(klogd_t) depth: 1
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t memory_device_t:chr_file { read getattr lock ioctl };

	allow klogd_t self:capability sys_rawio;
	typeattribute klogd_t memory_raw_read;

	 	 	 	
##### end dev_read_raw_memory(klogd_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_sysfs(klogd_t) depth: 1
 	
	
	


	allow klogd_t sysfs_t:dir { read getattr lock search ioctl };
	allow klogd_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(klogd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(klogd_t) depth: 1
 	
	
	


	allow klogd_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(klogd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(klogd_t) depth: 1
 	
	
	


	allow klogd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(klogd_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(klogd_t) depth: 1
 	
	
	


	dontaudit klogd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(klogd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(klogd_t) depth: 1
 	
	
	


	allow klogd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(klogd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(klogd_t) depth: 1
 	
	
	


	allow klogd_t etc_t:dir { read getattr lock search ioctl };
	allow klogd_t etc_runtime_t:file { read getattr lock ioctl };
	allow klogd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(klogd_t) depth: 0
 	
# read /etc/nsswitch.conf
 	 	 	 	
##### begin files_read_etc_files(klogd_t) depth: 1
 	
	
	


	allow klogd_t etc_t:dir { read getattr lock search ioctl };
	allow klogd_t etc_t:file { read getattr lock ioctl };
	allow klogd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(klogd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(klogd_t) depth: 1
 	
	
	


	allow klogd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(klogd_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(klogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(klogd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(klogd_t) depth: 3
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(klogd_t) depth: 2
 	
	allow klogd_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(klogd_t) depth: 1
 	
	allow klogd_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(klogd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(klogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(klogd_t) depth: 2
 	
	
	


	allow klogd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(klogd_t) depth: 1
 	
	allow klogd_t lib_t:dir { read getattr lock search ioctl };
	allow klogd_t lib_t:lnk_file { read getattr lock ioctl };
	allow klogd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow klogd_t ld_so_t:file { read getattr lock execute ioctl };
	allow klogd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(klogd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(klogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(klogd_t) depth: 2
 	
	
	


	allow klogd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(klogd_t) depth: 1
 	
	allow klogd_t lib_t:dir { read getattr lock search ioctl };
	allow klogd_t lib_t:lnk_file { read getattr lock ioctl };
	allow klogd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow klogd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow klogd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(klogd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(klogd_t) depth: 1
 	
	
	


	allow klogd_t devlog_t:lnk_file read;
	allow klogd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow klogd_t syslogd_t:unix_dgram_socket sendto;
	allow klogd_t syslogd_t:unix_stream_socket connectto;
	allow klogd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow klogd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(klogd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(klogd_t) depth: 3
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(klogd_t) depth: 2
 	
	allow klogd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(klogd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(klogd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(klogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(klogd_t) depth: 2
 	
	
	


	allow klogd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(klogd_t) depth: 1
 	
	# FIXME: klogd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(klogd_t) depth: 2
 	
	
	


	allow klogd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(klogd_t) depth: 1
 	
	allow klogd_t locale_t:dir { read getattr lock search ioctl };
	allow klogd_t locale_t:lnk_file { read getattr lock ioctl };
	allow klogd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(klogd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(klogd_t) depth: 3
 	
	
	


	allow klogd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(klogd_t) depth: 2
 	
	allow klogd_t lib_t:dir { read getattr lock search ioctl };
	allow klogd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(klogd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(klogd_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(klogd_t) depth: 1
 	
	
	


	typeattribute klogd_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(klogd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(klogd_t) depth: 1
 	
	
		
	


		dontaudit klogd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(klogd_t) depth: 0
 	


	
		
	 	 	 	 	
##### begin udev_read_db(klogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(klogd_t) depth: 2
 	
	
	


	allow klogd_t device_t:dir { read getattr lock search ioctl };
	allow klogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(klogd_t) depth: 1
 	
	allow klogd_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(klogd_t) depth: 0
 	

	



	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(klogd_t) depth: 1
 	
	
	


	dontaudit klogd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(klogd_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(klogd_t) depth: 1
 	
	
	


	dontaudit klogd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(klogd_t) depth: 0
 	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(klogd_t) depth: 1
 	
	
	


	allow klogd_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(klogd_t) depth: 0
 	

	


########################################
#
# syslogd local policy
#

# sys_admin chown fsetid for syslog-ng
# cjp: why net_admin!
allow syslogd_t self:capability { dac_override sys_resource sys_tty_config net_admin sys_admin chown fsetid };
dontaudit syslogd_t self:capability sys_tty_config;
allow syslogd_t self:process { sigchld sigkill sigstop signull signal };
allow syslogd_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };
# receive messages to be logged
allow syslogd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow syslogd_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow syslogd_t self:unix_dgram_socket sendto;
allow syslogd_t self:fifo_file { getattr read write append ioctl lock };
allow syslogd_t self:udp_socket { { create ioctl read getattr write setattr append bind getopt setopt shutdown } connect };

# Create and bind to /dev/log or /var/run/log.
allow syslogd_t devlog_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_pid_filetrans(syslogd_t,devlog_t,sock_file) depth: 1
 	
	
	


	allow syslogd_t var_t:dir { getattr search };
	allow syslogd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition syslogd_t var_run_t:sock_file devlog_t;

	 	 	 	
##### end files_pid_filetrans(syslogd_t,devlog_t,sock_file) depth: 0
 	

# create/append log files.
allow syslogd_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
allow syslogd_t var_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };
# Allow access for syslog-ng
allow syslogd_t var_log_t:dir { create setattr };

# manage temporary files
allow syslogd_t syslogd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow syslogd_t syslogd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
 	 	 	 	
##### begin files_tmp_filetrans(syslogd_t,syslogd_tmp_t,{ dir file }) depth: 1
 	
	
	


	allow syslogd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition syslogd_t tmp_t:{ dir file } syslogd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(syslogd_t,syslogd_tmp_t,{ dir file }) depth: 0
 	

allow syslogd_t syslogd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_pid_filetrans(syslogd_t,syslogd_var_run_t,file) depth: 1
 	
	
	


	allow syslogd_t var_t:dir { getattr search };
	allow syslogd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition syslogd_t var_run_t:file syslogd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(syslogd_t,syslogd_var_run_t,file) depth: 0
 	

# manage pid file
allow syslogd_t syslogd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow syslogd_t syslogd_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(syslogd_t,syslogd_var_run_t,file) depth: 1
 	
	
	


	allow syslogd_t var_t:dir { getattr search };
	allow syslogd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition syslogd_t var_run_t:file syslogd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(syslogd_t,syslogd_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t proc_t:dir search;
	allow syslogd_t sysctl_t:dir { read getattr lock search ioctl };
	allow syslogd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow syslogd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_proc_symlinks(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t proc_t:dir search;
	allow syslogd_t proc_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_proc_symlinks(syslogd_t) depth: 0
 	
# Allow access to /proc/kmsg for syslog-ng
 	 	 	 	
##### begin kernel_read_messages(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t proc_t:dir search;
	allow syslogd_t proc_kmsg_t:file { read getattr lock ioctl };
	typeattribute syslogd_t can_receive_kernel_messages;

	 	 	 	
##### end kernel_read_messages(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_clear_ring_buffer(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t kernel_t:system syslog_mod;

	 	 	 	
##### end kernel_clear_ring_buffer(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_change_ring_buffer_level(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t kernel_t:system syslog_console;

	 	 	 	
##### end kernel_change_ring_buffer_level(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin dev_filetrans(syslogd_t,devlog_t,sock_file) depth: 1
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition syslogd_t device_t:sock_file devlog_t;

	 	 	 	 	
##### begin fs_associate_tmpfs(devlog_t) depth: 2
 	
	
	


	allow devlog_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(devlog_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(devlog_t) depth: 2
 	
	
	


	allow devlog_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(devlog_t) depth: 1
 	

	 	 	 	
##### end dev_filetrans(syslogd_t,devlog_t,sock_file) depth: 0
 	
 	 	 	 	
##### begin dev_read_sysfs(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t sysfs_t:dir { read getattr lock search ioctl };
	allow syslogd_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(syslogd_t) depth: 0
 	
# Allow syslog to a terminal
 	 	 	 	
##### begin term_write_unallocated_ttys(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(syslogd_t) depth: 1
 	
	allow syslogd_t tty_device_t:chr_file { getattr write };

	 	 	 	
##### end term_write_unallocated_ttys(syslogd_t) depth: 0
 	

# for sending messages to logged in users
 	 	 	 	
##### begin init_read_utmp(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t var_t:dir { getattr search };
	allow syslogd_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(syslogd_t) depth: 1
 	
	allow syslogd_t initrc_var_run_t:file { read getattr lock ioctl };

	 	 	 	
##### end init_read_utmp(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_write_utmp(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t initrc_var_run_t:file { write lock };

	 	 	 	
##### end init_dontaudit_write_utmp(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin term_write_all_user_ttys(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(syslogd_t) depth: 1
 	
	allow syslogd_t ttynode:chr_file { getattr write };

	 	 	 	
##### end term_write_all_user_ttys(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow syslogd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(syslogd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(syslogd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(syslogd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(syslogd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(syslogd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(syslogd_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(syslogd_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_syslogd_port(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t syslogd_port_t:tcp_socket name_bind;
	allow syslogd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_syslogd_port(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_syslogd_port(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t syslogd_port_t:udp_socket name_bind;
	allow syslogd_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_syslogd_port(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(syslogd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(syslogd_t) depth: 2
 	
	allow syslogd_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(syslogd_t) depth: 1
 	
	allow syslogd_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t etc_t:dir { read getattr lock search ioctl };
	allow syslogd_t etc_t:file { read getattr lock ioctl };
	allow syslogd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t etc_t:dir { read getattr lock search ioctl };
	allow syslogd_t etc_runtime_t:file { read getattr lock ioctl };
	allow syslogd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(syslogd_t) depth: 0
 	
# /initrd is not umounted before minilog starts
 	 	 	 	
##### begin files_dontaudit_search_isid_type_dirs(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t file_t:dir { getattr search };

	 	 	 	
##### end files_dontaudit_search_isid_type_dirs(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(syslogd_t) depth: 1
 	
	allow syslogd_t lib_t:dir { read getattr lock search ioctl };
	allow syslogd_t lib_t:lnk_file { read getattr lock ioctl };
	allow syslogd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow syslogd_t ld_so_t:file { read getattr lock execute ioctl };
	allow syslogd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(syslogd_t) depth: 1
 	
	allow syslogd_t lib_t:dir { read getattr lock search ioctl };
	allow syslogd_t lib_t:lnk_file { read getattr lock ioctl };
	allow syslogd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow syslogd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow syslogd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(syslogd_t) depth: 0
 	

# cjp: this doesnt make sense
 	 	 	 	
##### begin logging_send_syslog_msg(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t devlog_t:lnk_file read;
	allow syslogd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow syslogd_t syslogd_t:unix_dgram_socket sendto;
	allow syslogd_t syslogd_t:unix_stream_socket connectto;
	allow syslogd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow syslogd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(syslogd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(syslogd_t) depth: 2
 	
	allow syslogd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(syslogd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(syslogd_t) depth: 1
 	
	allow syslogd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(syslogd_t) depth: 1
 	
	# FIXME: syslogd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(syslogd_t) depth: 1
 	
	allow syslogd_t locale_t:dir { read getattr lock search ioctl };
	allow syslogd_t locale_t:lnk_file { read getattr lock ioctl };
	allow syslogd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(syslogd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(syslogd_t) depth: 3
 	
	
	


	allow syslogd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(syslogd_t) depth: 2
 	
	allow syslogd_t lib_t:dir { read getattr lock search ioctl };
	allow syslogd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(syslogd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(syslogd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(syslogd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(syslogd_t) depth: 1
 	
	
		
	


		dontaudit syslogd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(syslogd_t) depth: 0
 	




	allow syslogd_t var_run_t:fifo_file { ioctl read write };
	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(syslogd_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(syslogd_t) depth: 0
 	
	 	 	 	 	
##### begin files_dontaudit_read_root_files(syslogd_t) depth: 1
 	
	
	


	dontaudit syslogd_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(syslogd_t) depth: 0
 	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(syslogd_t) depth: 1
 	
	
	


	allow syslogd_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(syslogd_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(syslogd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(syslogd_t) depth: 2
 	
	
	


	allow syslogd_t device_t:dir { read getattr lock search ioctl };
	allow syslogd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(syslogd_t) depth: 1
 	
	allow syslogd_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(syslogd_t) depth: 0
 	

	


 

	


########################################
#
# Declarations
#

#
# cert_t is the type of files in the system certs directories.
#
 	 	 	 	
##### begin files_type(cert_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(cert_t) depth: 2
 	
	
	


	allow cert_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(cert_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(cert_t) depth: 2
 	
	
	


	allow cert_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(cert_t) depth: 1
 	
	typeattribute cert_t file_type;

	 	 	 	
##### end files_type(cert_t) depth: 0
 	

#
# fonts_t is the type of various font
# files in /usr
#
 	 	 	 	
##### begin files_config_file(fonts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(fonts_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(fonts_t) depth: 3
 	
	
	


	allow fonts_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(fonts_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(fonts_t) depth: 3
 	
	
	


	allow fonts_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(fonts_t) depth: 2
 	
	typeattribute fonts_t file_type;

	 	 	 	
##### end files_type(fonts_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute fonts_t usercanread;

	 	 	 	
##### end files_config_file(fonts_t) depth: 0
 	

#
# type for /usr/share/hwdata
#
 	 	 	 	
##### begin files_type(hwdata_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(hwdata_t) depth: 2
 	
	
	


	allow hwdata_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(hwdata_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(hwdata_t) depth: 2
 	
	
	


	allow hwdata_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(hwdata_t) depth: 1
 	
	typeattribute hwdata_t file_type;

	 	 	 	
##### end files_type(hwdata_t) depth: 0
 	

#
# locale_t is the type for system localization
#
 	 	 	 	
##### begin files_type(locale_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(locale_t) depth: 2
 	
	
	


	allow locale_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(locale_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(locale_t) depth: 2
 	
	
	


	allow locale_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(locale_t) depth: 1
 	
	typeattribute locale_t file_type;

	 	 	 	
##### end files_type(locale_t) depth: 0
 	

#
# man_t is the type for the man directories.
#
 	 	 	 	
##### begin files_type(man_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(man_t) depth: 2
 	
	
	


	allow man_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(man_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(man_t) depth: 2
 	
	
	


	allow man_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(man_t) depth: 1
 	
	typeattribute man_t file_type;

	 	 	 	
##### end files_type(man_t) depth: 0
 	

#
# Types for public content
#
 	 	 	 	
##### begin files_type(public_content_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(public_content_t) depth: 2
 	
	
	


	allow public_content_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(public_content_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(public_content_t) depth: 2
 	
	
	


	allow public_content_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(public_content_t) depth: 1
 	
	typeattribute public_content_t file_type;

	 	 	 	
##### end files_type(public_content_t) depth: 0
 	

 	 	 	 	
##### begin files_type(public_content_rw_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(public_content_rw_t) depth: 2
 	
	
	


	allow public_content_rw_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(public_content_rw_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(public_content_rw_t) depth: 2
 	
	
	


	allow public_content_rw_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(public_content_rw_t) depth: 1
 	
	typeattribute public_content_rw_t file_type;

	 	 	 	
##### end files_type(public_content_rw_t) depth: 0
 	

#
# Base type for the tests directory.
#
 	 	 	 	
##### begin files_type(test_file_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(test_file_t) depth: 2
 	
	
	


	allow test_file_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(test_file_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(test_file_t) depth: 2
 	
	
	


	allow test_file_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(test_file_t) depth: 1
 	
	typeattribute test_file_t file_type;

	 	 	 	
##### end files_type(test_file_t) depth: 0
 	

#
# for /var/{spool,lib}/texmf index files
#
 	 	 	 	
##### begin files_tmp_file(tetex_data_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(tetex_data_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(tetex_data_t) depth: 3
 	
	
	


	allow tetex_data_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tetex_data_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tetex_data_t) depth: 3
 	
	
	


	allow tetex_data_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tetex_data_t) depth: 2
 	
	typeattribute tetex_data_t file_type;

	 	 	 	
##### end files_type(tetex_data_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(tetex_data_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(tetex_data_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(tetex_data_t) depth: 4
 	
	
	


	allow tetex_data_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tetex_data_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tetex_data_t) depth: 4
 	
	
	


	allow tetex_data_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tetex_data_t) depth: 3
 	
	typeattribute tetex_data_t file_type;

	 	 	 	
##### end files_type(tetex_data_t) depth: 2
 	
	typeattribute tetex_data_t polymember;

	 	 	 	
##### end files_poly_member(tetex_data_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(tetex_data_t) depth: 2
 	
	
	


	allow tetex_data_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(tetex_data_t) depth: 1
 	
	typeattribute tetex_data_t tmpfile;
	allow tetex_data_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(tetex_data_t) depth: 0
 	

 

	



	


########################################
#
# Declarations
#

# module loading config
 	 	 	 	
##### begin files_type(modules_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(modules_conf_t) depth: 2
 	
	
	


	allow modules_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(modules_conf_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(modules_conf_t) depth: 2
 	
	
	


	allow modules_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(modules_conf_t) depth: 1
 	
	typeattribute modules_conf_t file_type;

	 	 	 	
##### end files_type(modules_conf_t) depth: 0
 	

# module dependencies
 	 	 	 	
##### begin files_type(modules_dep_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(modules_dep_t) depth: 2
 	
	
	


	allow modules_dep_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(modules_dep_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(modules_dep_t) depth: 2
 	
	
	


	allow modules_dep_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(modules_dep_t) depth: 1
 	
	typeattribute modules_dep_t file_type;

	 	 	 	
##### end files_type(modules_dep_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_write_down(insmod_t) depth: 1
 	
	
	


	typeattribute insmod_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(insmod_t) depth: 0
 	
role system_r types insmod_t;

 	 	 	 	
##### begin init_system_domain(depmod_t,depmod_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(depmod_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(depmod_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute depmod_t domain;

	# allow the domain to read its /proc/pid entries
	allow depmod_t self:dir { read getattr lock search ioctl };
	allow depmod_t self:lnk_file { read getattr lock ioctl };
	allow depmod_t self:file { getattr read write append ioctl lock };

	# allow depmod_t to create child processes in this domain
	allow depmod_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types depmod_t;
		role sysadm_r types depmod_t;
		role user_r types depmod_t;
		role staff_r types depmod_t;
	

	 	 	 	
##### end domain_base_type(depmod_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(depmod_t) depth: 3
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(depmod_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(depmod_t) depth: 3
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(depmod_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(depmod_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(depmod_t) depth: 4
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(depmod_t) depth: 3
 	
	allow depmod_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(depmod_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(depmod_t) depth: 3
 	
	
	


	allow depmod_t root_t:dir { read getattr lock search ioctl };
	allow depmod_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(depmod_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(depmod_t) depth: 3
 	
	
	


	allow depmod_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(depmod_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(depmod_t) depth: 3
 	
	
	


	allow depmod_t init_t:process signull;

	 	 	 	
##### end init_signull(depmod_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(depmod_t) depth: 3
 	
	
	


	allow depmod_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(depmod_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(depmod_t) depth: 3
 	
	
	


	allow depmod_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(depmod_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(depmod_t) depth: 3
 	
	
	


	dontaudit depmod_t security_t:dir search;
	dontaudit depmod_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(depmod_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(depmod_t) depth: 3
 	
	
	


	dontaudit depmod_t selinux_config_t:dir search;
	dontaudit depmod_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(depmod_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(depmod_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(depmod_t,depmod_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(depmod_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(depmod_exec_t) depth: 4
 	
	
	


	allow depmod_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(depmod_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(depmod_exec_t) depth: 4
 	
	
	


	allow depmod_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(depmod_exec_t) depth: 3
 	
	typeattribute depmod_exec_t file_type;

	 	 	 	
##### end files_type(depmod_exec_t) depth: 2
 	

	allow depmod_t depmod_exec_t:file entrypoint;
	allow depmod_t depmod_exec_t:file { read getattr lock execute ioctl };

	typeattribute depmod_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(depmod_t,depmod_exec_t) depth: 1
 	

	role system_r types depmod_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,depmod_exec_t,depmod_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,depmod_exec_t,depmod_t) depth: 3
 	
	allow initrc_t depmod_exec_t:file { getattr read execute };
	allow initrc_t depmod_t:process transition;
	dontaudit initrc_t depmod_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,depmod_exec_t,depmod_t) depth: 2
 	
	type_transition initrc_t depmod_exec_t:process depmod_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,depmod_exec_t,depmod_t) depth: 1
 	

	allow initrc_t depmod_t:fd use;
	allow depmod_t initrc_t:fd use;
	allow depmod_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow depmod_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(depmod_t,depmod_exec_t) depth: 0
 	
role system_r types depmod_t;

 	 	 	 	
##### begin init_system_domain(update_modules_t,update_modules_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(update_modules_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(update_modules_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute update_modules_t domain;

	# allow the domain to read its /proc/pid entries
	allow update_modules_t self:dir { read getattr lock search ioctl };
	allow update_modules_t self:lnk_file { read getattr lock ioctl };
	allow update_modules_t self:file { getattr read write append ioctl lock };

	# allow update_modules_t to create child processes in this domain
	allow update_modules_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types update_modules_t;
		role sysadm_r types update_modules_t;
		role user_r types update_modules_t;
		role staff_r types update_modules_t;
	

	 	 	 	
##### end domain_base_type(update_modules_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(update_modules_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(update_modules_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(update_modules_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(update_modules_t) depth: 4
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(update_modules_t) depth: 3
 	
	allow update_modules_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(update_modules_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t root_t:dir { read getattr lock search ioctl };
	allow update_modules_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(update_modules_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(update_modules_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t init_t:process signull;

	 	 	 	
##### end init_signull(update_modules_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(update_modules_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(update_modules_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(update_modules_t) depth: 3
 	
	
	


	dontaudit update_modules_t security_t:dir search;
	dontaudit update_modules_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(update_modules_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(update_modules_t) depth: 3
 	
	
	


	dontaudit update_modules_t selinux_config_t:dir search;
	dontaudit update_modules_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(update_modules_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(update_modules_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(update_modules_t,update_modules_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(update_modules_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(update_modules_exec_t) depth: 4
 	
	
	


	allow update_modules_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(update_modules_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(update_modules_exec_t) depth: 4
 	
	
	


	allow update_modules_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(update_modules_exec_t) depth: 3
 	
	typeattribute update_modules_exec_t file_type;

	 	 	 	
##### end files_type(update_modules_exec_t) depth: 2
 	

	allow update_modules_t update_modules_exec_t:file entrypoint;
	allow update_modules_t update_modules_exec_t:file { read getattr lock execute ioctl };

	typeattribute update_modules_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(update_modules_t,update_modules_exec_t) depth: 1
 	

	role system_r types update_modules_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,update_modules_exec_t,update_modules_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,update_modules_exec_t,update_modules_t) depth: 3
 	
	allow initrc_t update_modules_exec_t:file { getattr read execute };
	allow initrc_t update_modules_t:process transition;
	dontaudit initrc_t update_modules_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,update_modules_exec_t,update_modules_t) depth: 2
 	
	type_transition initrc_t update_modules_exec_t:process update_modules_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,update_modules_exec_t,update_modules_t) depth: 1
 	

	allow initrc_t update_modules_t:fd use;
	allow update_modules_t initrc_t:fd use;
	allow update_modules_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow update_modules_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(update_modules_t,update_modules_exec_t) depth: 0
 	
role system_r types update_modules_t;

 	 	 	 	
##### begin files_tmp_file(update_modules_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(update_modules_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(update_modules_tmp_t) depth: 3
 	
	
	


	allow update_modules_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(update_modules_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(update_modules_tmp_t) depth: 3
 	
	
	


	allow update_modules_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(update_modules_tmp_t) depth: 2
 	
	typeattribute update_modules_tmp_t file_type;

	 	 	 	
##### end files_type(update_modules_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(update_modules_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(update_modules_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(update_modules_tmp_t) depth: 4
 	
	
	


	allow update_modules_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(update_modules_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(update_modules_tmp_t) depth: 4
 	
	
	


	allow update_modules_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(update_modules_tmp_t) depth: 3
 	
	typeattribute update_modules_tmp_t file_type;

	 	 	 	
##### end files_type(update_modules_tmp_t) depth: 2
 	
	typeattribute update_modules_tmp_t polymember;

	 	 	 	
##### end files_poly_member(update_modules_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(update_modules_tmp_t) depth: 2
 	
	
	


	allow update_modules_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(update_modules_tmp_t) depth: 1
 	
	typeattribute update_modules_tmp_t tmpfile;
	allow update_modules_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(update_modules_tmp_t) depth: 0
 	

########################################
#
# insmod local policy
#

allow insmod_t self:capability { dac_override net_raw sys_tty_config };
#allow insmod_t self:process { execmem sigchld sigkill sigstop signull signal };

allow insmod_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } }; 
allow insmod_t self:rawip_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } }; 

# Read module config and dependency information
allow insmod_t { modules_conf_t modules_dep_t }:file { read getattr lock ioctl };


	
	


	allow insmod_t insmod_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


# make sediff happy (no effect)
dontaudit insmod_t self:process { noatsecure rlimitinh siginh };
type_transition insmod_t insmod_exec_t:process insmod_t;

 	 	 	 	
##### begin kernel_load_module(insmod_t) depth: 1
 	
	
	


	allow insmod_t self:capability sys_module;
	typeattribute insmod_t can_load_kernmodule;

	 	 	 	
##### end kernel_load_module(insmod_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(insmod_t) depth: 1
 	
	
	


	allow insmod_t proc_t:dir { read getattr lock search ioctl };
	allow insmod_t proc_t:lnk_file { getattr read };
	allow insmod_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(insmod_t) depth: 0
 	
 	 	 	 	
##### begin kernel_mount_debugfs(insmod_t) depth: 1
 	
	
	


	allow insmod_t debugfs_t:filesystem mount;

	 	 	 	
##### end kernel_mount_debugfs(insmod_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_debugfs(insmod_t) depth: 1
 	
	
	


	allow insmod_t debugfs_t:dir { read getattr lock search ioctl };
	allow insmod_t debugfs_t:file { read getattr lock ioctl };
	allow insmod_t debugfs_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_debugfs(insmod_t) depth: 0
 	
# Rules for /proc/sys/kernel/tainted
 	 	 	 	
##### begin kernel_read_kernel_sysctls(insmod_t) depth: 1
 	
	
	


	allow insmod_t proc_t:dir search;
	allow insmod_t sysctl_t:dir { read getattr lock search ioctl };
	allow insmod_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow insmod_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(insmod_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rw_kernel_sysctl(insmod_t) depth: 1
 	
	
	


	allow insmod_t proc_t:dir search;
	allow insmod_t sysctl_t:dir { read getattr lock search ioctl };
	allow insmod_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow insmod_t sysctl_kernel_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end kernel_rw_kernel_sysctl(insmod_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_hotplug_sysctls(insmod_t) depth: 1
 	
	
	


	allow insmod_t proc_t:dir search;
	allow insmod_t sysctl_t:dir { read getattr lock search ioctl };
	allow insmod_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow insmod_t sysctl_hotplug_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_hotplug_sysctls(insmod_t) depth: 0
 	

 	 	 	 	
##### begin files_read_kernel_modules(insmod_t) depth: 1
 	
	
	


	allow insmod_t modules_object_t:dir { read getattr lock search ioctl };
	allow insmod_t modules_object_t:lnk_file { read getattr lock ioctl };
	allow insmod_t modules_object_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_kernel_modules(insmod_t) depth: 0
 	
# for locking: (cjp: ????)
 	 	 	 	
##### begin files_write_kernel_modules(insmod_t) depth: 1
 	
	
	


	allow insmod_t modules_object_t:dir { read getattr lock search ioctl };
	allow insmod_t modules_object_t:file { write append };

	 	 	 	
##### end files_write_kernel_modules(insmod_t) depth: 0
 	

 	 	 	 	
##### begin dev_search_sysfs(insmod_t) depth: 1
 	
	
	


	allow insmod_t sysfs_t:dir search;

	 	 	 	
##### end dev_search_sysfs(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_search_usbfs(insmod_t) depth: 1
 	
	
	


	allow insmod_t usbfs_t:dir search;

	 	 	 	
##### end dev_search_usbfs(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_write_mtrr(insmod_t) depth: 1
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t mtrr_device_t:chr_file { getattr write ioctl };

	 	 	 	
##### end dev_write_mtrr(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_urand(insmod_t) depth: 1
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_rw_agp(insmod_t) depth: 1
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t agp_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_agp(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_sound(insmod_t) depth: 1
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t sound_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sound(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_write_sound(insmod_t) depth: 1
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t sound_device_t:chr_file { getattr write ioctl };

	 	 	 	
##### end dev_write_sound(insmod_t) depth: 0
 	
 	 	 	 	
##### begin dev_rw_apm_bios(insmod_t) depth: 1
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t apm_bios_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_apm_bios(insmod_t) depth: 0
 	
# cjp: why is this needed?  insmod cannot mounton any dir
# and it also transitions to mount
 	 	 	 	
##### begin dev_mount_usbfs(insmod_t) depth: 1
 	
	
	


	allow insmod_t usbfs_t:filesystem mount;

	 	 	 	
##### end dev_mount_usbfs(insmod_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(insmod_t) depth: 1
 	
	
	


	allow insmod_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(insmod_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(insmod_t) depth: 1
 	
	
	


	allow insmod_t bin_t:dir { read getattr lock search ioctl };
	allow insmod_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow insmod_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(insmod_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(insmod_t) depth: 1
 	
	
	


	allow insmod_t sbin_t:dir { read getattr lock search ioctl };
	allow insmod_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow insmod_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(insmod_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(insmod_t) depth: 1
 	
	
	


	allow insmod_t bin_t:dir { read getattr lock search ioctl };
	allow insmod_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow insmod_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(insmod_t) depth: 0
 	

#domain_signal_all_domains(insmod_t)
 	 	 	 	
##### begin domain_use_interactive_fds(insmod_t) depth: 1
 	
	
	


	allow insmod_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(insmod_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(insmod_t) depth: 1
 	
	
	


	allow insmod_t etc_t:dir { read getattr lock search ioctl };
	allow insmod_t etc_runtime_t:file { read getattr lock ioctl };
	allow insmod_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(insmod_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(insmod_t) depth: 1
 	
	
	


	allow insmod_t etc_t:dir { read getattr lock search ioctl };
	allow insmod_t etc_t:file { read getattr lock ioctl };
	allow insmod_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(insmod_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(insmod_t) depth: 1
 	
	
	


	allow insmod_t usr_t:dir { read getattr lock search ioctl };
	allow insmod_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(insmod_t) depth: 0
 	
 	 	 	 	
##### begin files_exec_etc_files(insmod_t) depth: 1
 	
	
	


	allow insmod_t etc_t:dir { read getattr lock search ioctl };
	allow insmod_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow insmod_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(insmod_t) depth: 0
 	
# for nscd:
 	 	 	 	
##### begin files_dontaudit_search_pids(insmod_t) depth: 1
 	
	
	


	dontaudit insmod_t var_run_t:dir search;

	 	 	 	
##### end files_dontaudit_search_pids(insmod_t) depth: 0
 	
# for when /var is not mounted early in the boot:
 	 	 	 	
##### begin files_dontaudit_search_isid_type_dirs(insmod_t) depth: 1
 	
	
	


	dontaudit insmod_t file_t:dir { getattr search };

	 	 	 	
##### end files_dontaudit_search_isid_type_dirs(insmod_t) depth: 0
 	

 	 	 	 	
##### begin init_rw_initctl(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(insmod_t) depth: 2
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(insmod_t) depth: 1
 	
	allow insmod_t initctl_t:fifo_file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_initctl(insmod_t) depth: 0
 	
 	 	 	 	
##### begin init_use_fds(insmod_t) depth: 1
 	
	
	


	allow insmod_t init_t:fd use;

	 	 	 	
##### end init_use_fds(insmod_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_fds(insmod_t) depth: 1
 	
	
	


	allow insmod_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(insmod_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(insmod_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(insmod_t) depth: 3
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(insmod_t) depth: 2
 	
	allow insmod_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(insmod_t) depth: 1
 	
	allow insmod_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(insmod_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(insmod_t) depth: 2
 	
	
	


	allow insmod_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(insmod_t) depth: 1
 	
	allow insmod_t lib_t:dir { read getattr lock search ioctl };
	allow insmod_t lib_t:lnk_file { read getattr lock ioctl };
	allow insmod_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow insmod_t ld_so_t:file { read getattr lock execute ioctl };
	allow insmod_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(insmod_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(insmod_t) depth: 2
 	
	
	


	allow insmod_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(insmod_t) depth: 1
 	
	allow insmod_t lib_t:dir { read getattr lock search ioctl };
	allow insmod_t lib_t:lnk_file { read getattr lock ioctl };
	allow insmod_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow insmod_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow insmod_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(insmod_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(insmod_t) depth: 1
 	
	
	


	allow insmod_t devlog_t:lnk_file read;
	allow insmod_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow insmod_t syslogd_t:unix_dgram_socket sendto;
	allow insmod_t syslogd_t:unix_stream_socket connectto;
	allow insmod_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow insmod_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(insmod_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(insmod_t) depth: 3
 	
	
	


	allow insmod_t device_t:dir { read getattr lock search ioctl };
	allow insmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(insmod_t) depth: 2
 	
	allow insmod_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(insmod_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(insmod_t) depth: 0
 	
 	 	 	 	
##### begin logging_search_logs(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(insmod_t) depth: 2
 	
	
	


	allow insmod_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(insmod_t) depth: 1
 	
	allow insmod_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(insmod_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(insmod_t) depth: 2
 	
	
	


	allow insmod_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(insmod_t) depth: 1
 	
	# FIXME: insmod_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(insmod_t) depth: 2
 	
	
	


	allow insmod_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(insmod_t) depth: 1
 	
	allow insmod_t locale_t:dir { read getattr lock search ioctl };
	allow insmod_t locale_t:lnk_file { read getattr lock ioctl };
	allow insmod_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(insmod_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(insmod_t) depth: 3
 	
	
	


	allow insmod_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(insmod_t) depth: 2
 	
	allow insmod_t lib_t:dir { read getattr lock search ioctl };
	allow insmod_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(insmod_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(insmod_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_file_contexts(insmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(insmod_t) depth: 2
 	
	
	


	allow insmod_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(insmod_t) depth: 1
 	
	allow insmod_t selinux_config_t:dir search;
	allow insmod_t file_context_t:dir { read getattr lock search ioctl };
	allow insmod_t file_context_t:file { read getattr lock ioctl };
	allow insmod_t file_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_file_contexts(insmod_t) depth: 0
 	

#if( ! secure_mode_insmod ) {
#	kernel_domtrans_to(insmod_t,insmod_exec_t)
#}


	 	 	 	 	
##### begin dev_dontaudit_rw_cardmgr(insmod_t) depth: 1
 	
	
	


	dontaudit insmod_t cardmgr_dev_t:chr_file { read write };

	 	 	 	
##### end dev_dontaudit_rw_cardmgr(insmod_t) depth: 0
 	


#ifdef(`targeted_policy',`
#	unconfined_domain(insmod_t)
#')


	
		
	


#optional_policy(`mount',`
#	mount_domtrans(insmod_t)
#')


	
		
	



	
		
	



	
		
	




########################################
#
# depmod local policy
#


	
	


	allow depmod_t depmod_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


# Read conf.modules.
allow depmod_t modules_conf_t:file { read getattr lock ioctl };

allow depmod_t modules_dep_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_kernel_modules_filetrans(depmod_t,modules_dep_t,file) depth: 1
 	
	
	


	allow depmod_t modules_object_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition depmod_t modules_object_t:file modules_dep_t;

	 	 	 	
##### end files_kernel_modules_filetrans(depmod_t,modules_dep_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(depmod_t) depth: 1
 	
	
	


	allow depmod_t proc_t:dir { read getattr lock search ioctl };
	allow depmod_t proc_t:lnk_file { getattr read };
	allow depmod_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(depmod_t) depth: 0
 	

 	 	 	 	
##### begin files_read_kernel_symbol_table(depmod_t) depth: 1
 	
	
	


	allow depmod_t boot_t:dir { read getattr lock search ioctl };
	allow depmod_t system_map_t:file { read getattr lock ioctl };

	# cjp: this should be dropped:
	allow depmod_t boot_t:file { getattr read };

	 	 	 	
##### end files_read_kernel_symbol_table(depmod_t) depth: 0
 	
 	 	 	 	
##### begin files_read_kernel_modules(depmod_t) depth: 1
 	
	
	


	allow depmod_t modules_object_t:dir { read getattr lock search ioctl };
	allow depmod_t modules_object_t:lnk_file { read getattr lock ioctl };
	allow depmod_t modules_object_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_kernel_modules(depmod_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(depmod_t) depth: 1
 	
	
	


	allow depmod_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(depmod_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(depmod_t) depth: 2
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(depmod_t) depth: 1
 	
	allow depmod_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(depmod_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_search_bin(depmod_t) depth: 1
 	
	
	


	allow depmod_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(depmod_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_search_sbin(depmod_t) depth: 1
 	
	
	


	allow depmod_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(depmod_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(depmod_t) depth: 1
 	
	
	


	allow depmod_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(depmod_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(depmod_t) depth: 1
 	
	
	


	allow depmod_t init_t:fd use;

	 	 	 	
##### end init_use_fds(depmod_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_fds(depmod_t) depth: 1
 	
	
	


	allow depmod_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(depmod_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(depmod_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(depmod_t) depth: 3
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(depmod_t) depth: 2
 	
	allow depmod_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(depmod_t) depth: 1
 	
	allow depmod_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(depmod_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(depmod_t) depth: 1
 	
	
	


	allow depmod_t etc_t:dir { read getattr lock search ioctl };
	allow depmod_t etc_runtime_t:file { read getattr lock ioctl };
	allow depmod_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(depmod_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(depmod_t) depth: 1
 	
	
	


	allow depmod_t etc_t:dir { read getattr lock search ioctl };
	allow depmod_t etc_t:file { read getattr lock ioctl };
	allow depmod_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(depmod_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_src_files(depmod_t) depth: 1
 	
	
	


	allow depmod_t usr_t:dir search;
	allow depmod_t src_t:dir { read getattr lock search ioctl };
	allow depmod_t src_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_src_files(depmod_t) depth: 0
 	
 	 	 	 	
##### begin files_list_usr(depmod_t) depth: 1
 	
	
	


	allow depmod_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(depmod_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(depmod_t) depth: 2
 	
	
	


	allow depmod_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(depmod_t) depth: 1
 	
	allow depmod_t lib_t:dir { read getattr lock search ioctl };
	allow depmod_t lib_t:lnk_file { read getattr lock ioctl };
	allow depmod_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow depmod_t ld_so_t:file { read getattr lock execute ioctl };
	allow depmod_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(depmod_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(depmod_t) depth: 2
 	
	
	


	allow depmod_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(depmod_t) depth: 1
 	
	allow depmod_t lib_t:dir { read getattr lock search ioctl };
	allow depmod_t lib_t:lnk_file { read getattr lock ioctl };
	allow depmod_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow depmod_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow depmod_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(depmod_t) depth: 0
 	

# Read System.map from home directories.
 	 	 	 	
##### begin files_list_home(depmod_t) depth: 1
 	
	
	


	allow depmod_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(depmod_t) depth: 0
 	
 	 	 	 	
##### begin userdom_read_staff_home_content_files(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(depmod_t) depth: 2
 	
	
	


	allow depmod_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(depmod_t) depth: 1
 	
	allow depmod_t { staff_home_dir_t staff_home_t }:dir { read getattr lock search ioctl };
	allow depmod_t staff_home_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end userdom_read_staff_home_content_files(depmod_t) depth: 0
 	
 	 	 	 	
##### begin userdom_read_sysadm_home_content_files(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(depmod_t) depth: 2
 	
	
	


	allow depmod_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(depmod_t) depth: 1
 	
	allow depmod_t { sysadm_home_dir_t sysadm_home_t }:dir { read getattr lock search ioctl };
	allow depmod_t sysadm_home_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end userdom_read_sysadm_home_content_files(depmod_t) depth: 0
 	


	 	 	 	 	
##### begin term_use_unallocated_ttys(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(depmod_t) depth: 2
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(depmod_t) depth: 1
 	
	allow depmod_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(depmod_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_generic_ptys(depmod_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(depmod_t) depth: 2
 	
	
	


	allow depmod_t device_t:dir { read getattr lock search ioctl };
	allow depmod_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(depmod_t) depth: 1
 	
	allow depmod_t devpts_t:dir { getattr search read lock ioctl };
	allow depmod_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(depmod_t) depth: 0
 	



	
		
	


 
allow depmod_t modules_object_t:file unlink;

#################################
#
# update-modules local policy
#

allow update_modules_t self:fifo_file { getattr read write append ioctl lock };

allow update_modules_t modules_dep_t:file { getattr read write append ioctl lock };


	
	


	allow update_modules_t insmod_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	
	


	allow update_modules_t update_modules_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


# manage module loading configuration
allow update_modules_t modules_conf_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_kernel_modules_filetrans(update_modules_t,modules_conf_t,file) depth: 1
 	
	
	


	allow update_modules_t modules_object_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition update_modules_t modules_object_t:file modules_conf_t;

	 	 	 	
##### end files_kernel_modules_filetrans(update_modules_t,modules_conf_t,file) depth: 0
 	
 	 	 	 	
##### begin files_etc_filetrans(update_modules_t,modules_conf_t,file) depth: 1
 	
	
	


	allow update_modules_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition update_modules_t etc_t:file modules_conf_t;

	 	 	 	
##### end files_etc_filetrans(update_modules_t,modules_conf_t,file) depth: 0
 	

# transition to depmod
 	 	 	 	
##### begin domain_auto_trans(update_modules_t,depmod_exec_t,depmod_t) depth: 1
 	
	 	 	 	 	
##### begin domain_trans(update_modules_t,depmod_exec_t,depmod_t) depth: 2
 	
	allow update_modules_t depmod_exec_t:file { getattr read execute };
	allow update_modules_t depmod_t:process transition;
	dontaudit update_modules_t depmod_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(update_modules_t,depmod_exec_t,depmod_t) depth: 1
 	
	type_transition update_modules_t depmod_exec_t:process depmod_t;
 	 	 	 	
##### end domain_auto_trans(update_modules_t,depmod_exec_t,depmod_t) depth: 0
 	
allow update_modules_t depmod_t:fd use;
allow depmod_t update_modules_t:fd use;
allow depmod_t update_modules_t:fifo_file { getattr read write append ioctl lock };
#allow depmod_t update_modules_t:process sigchld;

allow update_modules_t update_modules_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow update_modules_t update_modules_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(update_modules_t,update_modules_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow update_modules_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition update_modules_t tmp_t:{ file dir } update_modules_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(update_modules_t,update_modules_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t proc_t:dir search;
	allow update_modules_t sysctl_t:dir { read getattr lock search ioctl };
	allow update_modules_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow update_modules_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t proc_t:dir { read getattr lock search ioctl };
	allow update_modules_t proc_t:lnk_file { getattr read };
	allow update_modules_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_urand(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(update_modules_t) depth: 1
 	
	allow update_modules_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t init_t:fd use;

	 	 	 	
##### end init_use_fds(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_fds(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(update_modules_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(update_modules_t) depth: 2
 	
	allow update_modules_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(update_modules_t) depth: 1
 	
	allow update_modules_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t etc_t:dir { read getattr lock search ioctl };
	allow update_modules_t etc_runtime_t:file { read getattr lock ioctl };
	allow update_modules_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t etc_t:dir { read getattr lock search ioctl };
	allow update_modules_t etc_t:file { read getattr lock ioctl };
	allow update_modules_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin files_exec_etc_files(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t etc_t:dir { read getattr lock search ioctl };
	allow update_modules_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow update_modules_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t bin_t:dir { read getattr lock search ioctl };
	allow update_modules_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow update_modules_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t sbin_t:dir { read getattr lock search ioctl };
	allow update_modules_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow update_modules_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t bin_t:dir { read getattr lock search ioctl };
	allow update_modules_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow update_modules_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(update_modules_t) depth: 1
 	
	allow update_modules_t lib_t:dir { read getattr lock search ioctl };
	allow update_modules_t lib_t:lnk_file { read getattr lock ioctl };
	allow update_modules_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow update_modules_t ld_so_t:file { read getattr lock execute ioctl };
	allow update_modules_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(update_modules_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(update_modules_t) depth: 1
 	
	allow update_modules_t lib_t:dir { read getattr lock search ioctl };
	allow update_modules_t lib_t:lnk_file { read getattr lock ioctl };
	allow update_modules_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow update_modules_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow update_modules_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(update_modules_t) depth: 1
 	
	
	


	allow update_modules_t devlog_t:lnk_file read;
	allow update_modules_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow update_modules_t syslogd_t:unix_dgram_socket sendto;
	allow update_modules_t syslogd_t:unix_stream_socket connectto;
	allow update_modules_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow update_modules_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(update_modules_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(update_modules_t) depth: 2
 	
	allow update_modules_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(update_modules_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(update_modules_t) depth: 1
 	
	# FIXME: update_modules_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(update_modules_t) depth: 1
 	
	allow update_modules_t locale_t:dir { read getattr lock search ioctl };
	allow update_modules_t locale_t:lnk_file { read getattr lock ioctl };
	allow update_modules_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(update_modules_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(update_modules_t) depth: 3
 	
	
	


	allow update_modules_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(update_modules_t) depth: 2
 	
	allow update_modules_t lib_t:dir { read getattr lock search ioctl };
	allow update_modules_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(update_modules_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(update_modules_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(update_modules_t) depth: 1
 	
	
		
	


		dontaudit update_modules_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(update_modules_t) depth: 0
 	


	 	 	 	 	
##### begin term_use_generic_ptys(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(update_modules_t) depth: 1
 	
	allow update_modules_t devpts_t:dir { getattr search read lock ioctl };
	allow update_modules_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(update_modules_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_unallocated_ttys(update_modules_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(update_modules_t) depth: 2
 	
	
	


	allow update_modules_t device_t:dir { read getattr lock search ioctl };
	allow update_modules_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(update_modules_t) depth: 1
 	
	allow update_modules_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(update_modules_t) depth: 0
 	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin init_system_domain(mount_t,mount_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(mount_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(mount_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute mount_t domain;

	# allow the domain to read its /proc/pid entries
	allow mount_t self:dir { read getattr lock search ioctl };
	allow mount_t self:lnk_file { read getattr lock ioctl };
	allow mount_t self:file { getattr read write append ioctl lock };

	# allow mount_t to create child processes in this domain
	allow mount_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types mount_t;
		role sysadm_r types mount_t;
		role user_r types mount_t;
		role staff_r types mount_t;
	

	 	 	 	
##### end domain_base_type(mount_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(mount_t) depth: 3
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(mount_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(mount_t) depth: 3
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(mount_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(mount_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 4
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 3
 	
	allow mount_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(mount_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(mount_t) depth: 3
 	
	
	


	allow mount_t root_t:dir { read getattr lock search ioctl };
	allow mount_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(mount_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(mount_t) depth: 3
 	
	
	


	allow mount_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(mount_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(mount_t) depth: 3
 	
	
	


	allow mount_t init_t:process signull;

	 	 	 	
##### end init_signull(mount_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(mount_t) depth: 3
 	
	
	


	allow mount_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(mount_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(mount_t) depth: 3
 	
	
	


	allow mount_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(mount_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(mount_t) depth: 3
 	
	
	


	dontaudit mount_t security_t:dir search;
	dontaudit mount_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(mount_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(mount_t) depth: 3
 	
	
	


	dontaudit mount_t selinux_config_t:dir search;
	dontaudit mount_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(mount_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(mount_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(mount_t,mount_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(mount_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(mount_exec_t) depth: 4
 	
	
	


	allow mount_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mount_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(mount_exec_t) depth: 4
 	
	
	


	allow mount_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(mount_exec_t) depth: 3
 	
	typeattribute mount_exec_t file_type;

	 	 	 	
##### end files_type(mount_exec_t) depth: 2
 	

	allow mount_t mount_exec_t:file entrypoint;
	allow mount_t mount_exec_t:file { read getattr lock execute ioctl };

	typeattribute mount_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(mount_t,mount_exec_t) depth: 1
 	

	role system_r types mount_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,mount_exec_t,mount_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,mount_exec_t,mount_t) depth: 3
 	
	allow initrc_t mount_exec_t:file { getattr read execute };
	allow initrc_t mount_t:process transition;
	dontaudit initrc_t mount_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,mount_exec_t,mount_t) depth: 2
 	
	type_transition initrc_t mount_exec_t:process mount_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,mount_exec_t,mount_t) depth: 1
 	

	allow initrc_t mount_t:fd use;
	allow mount_t initrc_t:fd use;
	allow mount_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow mount_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(mount_t,mount_exec_t) depth: 0
 	
role system_r types mount_t;

 	 	 	 	
##### begin files_tmp_file(mount_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(mount_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(mount_tmp_t) depth: 3
 	
	
	


	allow mount_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mount_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(mount_tmp_t) depth: 3
 	
	
	


	allow mount_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(mount_tmp_t) depth: 2
 	
	typeattribute mount_tmp_t file_type;

	 	 	 	
##### end files_type(mount_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(mount_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(mount_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(mount_tmp_t) depth: 4
 	
	
	


	allow mount_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mount_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(mount_tmp_t) depth: 4
 	
	
	


	allow mount_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(mount_tmp_t) depth: 3
 	
	typeattribute mount_tmp_t file_type;

	 	 	 	
##### end files_type(mount_tmp_t) depth: 2
 	
	typeattribute mount_tmp_t polymember;

	 	 	 	
##### end files_poly_member(mount_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(mount_tmp_t) depth: 2
 	
	
	


	allow mount_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(mount_tmp_t) depth: 1
 	
	typeattribute mount_tmp_t tmpfile;
	allow mount_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(mount_tmp_t) depth: 0
 	

########################################
#
# mount local policy
#

allow mount_t self:capability { ipc_lock sys_rawio sys_admin dac_override chown sys_tty_config };

allow mount_t mount_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow mount_t mount_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
 	 	 	 	
##### begin files_tmp_filetrans(mount_t,mount_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow mount_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition mount_t tmp_t:{ file dir } mount_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(mount_t,mount_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(mount_t) depth: 1
 	
	
	


	allow mount_t proc_t:dir { read getattr lock search ioctl };
	allow mount_t proc_t:lnk_file { getattr read };
	allow mount_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(mount_t) depth: 0
 	

 	 	 	 	
##### begin corenet_dontaudit_tcp_bind_all_reserved_ports(mount_t) depth: 1
 	
	
	


	dontaudit mount_t reserved_port_type:tcp_socket name_bind;

	 	 	 	
##### end corenet_dontaudit_tcp_bind_all_reserved_ports(mount_t) depth: 0
 	
 	 	 	 	
##### begin corenet_dontaudit_udp_bind_all_reserved_ports(mount_t) depth: 1
 	
	
	


	dontaudit mount_t reserved_port_type:udp_socket name_bind;

	 	 	 	
##### end corenet_dontaudit_udp_bind_all_reserved_ports(mount_t) depth: 0
 	

 	 	 	 	
##### begin dev_getattr_all_blk_files(mount_t) depth: 1
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_node:blk_file getattr;

	 	 	 	
##### end dev_getattr_all_blk_files(mount_t) depth: 0
 	
 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 1
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 0
 	
 	 	 	 	
##### begin dev_rw_lvm_control(mount_t) depth: 1
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t lvm_control_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_lvm_control(mount_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_getattr_memory_dev(mount_t) depth: 1
 	
	
	


	dontaudit mount_t memory_device_t:chr_file getattr;

	 	 	 	
##### end dev_dontaudit_getattr_memory_dev(mount_t) depth: 0
 	
 	 	 	 	
##### begin dev_getattr_sound_dev(mount_t) depth: 1
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t sound_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_sound_dev(mount_t) depth: 0
 	

 	 	 	 	
##### begin storage_raw_read_fixed_disk(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 1
 	
	allow mount_t fixed_disk_device_t:chr_file { read getattr lock ioctl };
	#ifdef(`distro_sebsd', `
	#	allow mount_t fixed_disk_device_t:chr_file r_file_perms;
	#')
	typeattribute mount_t fixed_disk_raw_read;

	 	 	 	
##### end storage_raw_read_fixed_disk(mount_t) depth: 0
 	
 	 	 	 	
##### begin storage_raw_write_fixed_disk(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 1
 	
	allow mount_t fixed_disk_device_t:blk_file { getattr write append ioctl };
	typeattribute mount_t fixed_disk_raw_write;

	 	 	 	
##### end storage_raw_write_fixed_disk(mount_t) depth: 0
 	
 	 	 	 	
##### begin storage_raw_read_removable_device(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 1
 	
	allow mount_t removable_device_t:blk_file { read getattr lock ioctl };

	 	 	 	
##### end storage_raw_read_removable_device(mount_t) depth: 0
 	
 	 	 	 	
##### begin storage_raw_write_removable_device(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 1
 	
	allow mount_t removable_device_t:blk_file { getattr write ioctl };

	 	 	 	
##### end storage_raw_write_removable_device(mount_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(mount_t) depth: 1
 	
	
	


	allow mount_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_mount_all_fs(mount_t) depth: 1
 	
	
	


	allow mount_t filesystem_type:filesystem mount;

	 	 	 	
##### end fs_mount_all_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_unmount_all_fs(mount_t) depth: 1
 	
	
	


	allow mount_t filesystem_type:filesystem unmount;

	 	 	 	
##### end fs_unmount_all_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_remount_all_fs(mount_t) depth: 1
 	
	
	


	allow mount_t filesystem_type:filesystem remount;

	 	 	 	
##### end fs_remount_all_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_relabelfrom_all_fs(mount_t) depth: 1
 	
	
	


	allow mount_t filesystem_type:filesystem relabelfrom;

	 	 	 	
##### end fs_relabelfrom_all_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_list_auto_mountpoints(mount_t) depth: 1
 	
	
	


	allow mount_t autofs_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end fs_list_auto_mountpoints(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_rw_tmpfs_chr_files(mount_t) depth: 1
 	
	
	


	allow mount_t tmpfs_t:dir { read getattr lock search ioctl };
	allow mount_t tmpfs_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end fs_rw_tmpfs_chr_files(mount_t) depth: 0
 	
 	 	 	 	
##### begin fs_read_tmpfs_symlinks(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_search_tmpfs(mount_t) depth: 2
 	
	
	


	allow mount_t tmpfs_t:dir search;

	 	 	 	
##### end fs_search_tmpfs(mount_t) depth: 1
 	
	allow mount_t tmpfs_t:lnk_file read;

	 	 	 	
##### end fs_read_tmpfs_symlinks(mount_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_terms(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 1
 	
	allow mount_t devpts_t:dir { read getattr lock search ioctl };
	allow mount_t { console_device_t tty_device_t ttynode ptynode }:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_all_terms(mount_t) depth: 0
 	

# required for mount.smbfs
 	 	 	 	
##### begin corecmd_exec_sbin(mount_t) depth: 1
 	
	
	


	allow mount_t sbin_t:dir { read getattr lock search ioctl };
	allow mount_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow mount_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(mount_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(mount_t) depth: 1
 	
	
	


	allow mount_t bin_t:dir { read getattr lock search ioctl };
	allow mount_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow mount_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(mount_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(mount_t) depth: 1
 	
	
	


	allow mount_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(mount_t) depth: 0
 	

 	 	 	 	
##### begin files_search_all(mount_t) depth: 1
 	
	
	


	allow mount_t file_type:dir search;

	 	 	 	
##### end files_search_all(mount_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(mount_t) depth: 1
 	
	
	


	allow mount_t etc_t:dir { read getattr lock search ioctl };
	allow mount_t etc_t:file { read getattr lock ioctl };
	allow mount_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(mount_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_etc_runtime_files(mount_t) depth: 1
 	
	
	


	allow mount_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow mount_t etc_runtime_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	type_transition mount_t etc_t:file etc_runtime_t;

	 	 	 	
##### end files_manage_etc_runtime_files(mount_t) depth: 0
 	
 	 	 	 	
##### begin files_mounton_all_mountpoints(mount_t) depth: 1
 	
	
	


	allow mount_t mountpoint:dir { getattr search mounton };
	allow mount_t mountpoint:file { getattr mounton };

	 	 	 	
##### end files_mounton_all_mountpoints(mount_t) depth: 0
 	
 	 	 	 	
##### begin files_unmount_rootfs(mount_t) depth: 1
 	
	
	


	allow mount_t root_t:filesystem unmount;

	 	 	 	
##### end files_unmount_rootfs(mount_t) depth: 0
 	
# These rules need to be generalized.  Only admin, initrc should have it:
 	 	 	 	
##### begin files_relabelto_all_file_type_fs(mount_t) depth: 1
 	
	
	


	allow mount_t file_type:filesystem relabelto;

	 	 	 	
##### end files_relabelto_all_file_type_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin files_mount_all_file_type_fs(mount_t) depth: 1
 	
	
	


	allow mount_t file_type:filesystem mount;

	 	 	 	
##### end files_mount_all_file_type_fs(mount_t) depth: 0
 	
 	 	 	 	
##### begin files_unmount_all_file_type_fs(mount_t) depth: 1
 	
	
	


	allow mount_t file_type:filesystem unmount;

	 	 	 	
##### end files_unmount_all_file_type_fs(mount_t) depth: 0
 	
# for when /etc/mtab loses its type
# cjp: this seems wrong, the type should probably be etc
 	 	 	 	
##### begin files_read_isid_type_files(mount_t) depth: 1
 	
	
	


	allow mount_t file_t:dir search;
	allow mount_t file_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_isid_type_files(mount_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(mount_t) depth: 1
 	
	
	


	allow mount_t init_t:fd use;

	 	 	 	
##### end init_use_fds(mount_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(mount_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 3
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 2
 	
	allow mount_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(mount_t) depth: 1
 	
	allow mount_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(mount_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(mount_t) depth: 2
 	
	
	


	allow mount_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(mount_t) depth: 1
 	
	allow mount_t lib_t:dir { read getattr lock search ioctl };
	allow mount_t lib_t:lnk_file { read getattr lock ioctl };
	allow mount_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow mount_t ld_so_t:file { read getattr lock execute ioctl };
	allow mount_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(mount_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(mount_t) depth: 2
 	
	
	


	allow mount_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(mount_t) depth: 1
 	
	allow mount_t lib_t:dir { read getattr lock search ioctl };
	allow mount_t lib_t:lnk_file { read getattr lock ioctl };
	allow mount_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow mount_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow mount_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(mount_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(mount_t) depth: 1
 	
	
	


	allow mount_t devlog_t:lnk_file read;
	allow mount_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow mount_t syslogd_t:unix_dgram_socket sendto;
	allow mount_t syslogd_t:unix_stream_socket connectto;
	allow mount_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow mount_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(mount_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(mount_t) depth: 3
 	
	
	


	allow mount_t device_t:dir { read getattr lock search ioctl };
	allow mount_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(mount_t) depth: 2
 	
	allow mount_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(mount_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(mount_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(mount_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(mount_t) depth: 2
 	
	
	


	allow mount_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(mount_t) depth: 1
 	
	# FIXME: mount_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(mount_t) depth: 2
 	
	
	


	allow mount_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(mount_t) depth: 1
 	
	allow mount_t locale_t:dir { read getattr lock search ioctl };
	allow mount_t locale_t:lnk_file { read getattr lock ioctl };
	allow mount_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(mount_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(mount_t) depth: 3
 	
	
	


	allow mount_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(mount_t) depth: 2
 	
	allow mount_t lib_t:dir { read getattr lock search ioctl };
	allow mount_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(mount_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(mount_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(mount_t) depth: 1
 	
	
	


	typeattribute mount_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(mount_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(mount_t) depth: 1
 	
	
	


	typeattribute mount_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(mount_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_use_portmap(mount_t) depth: 1
 	
	
	
		

	allow mount_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow mount_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(mount_t) depth: 2
 	
	
	


	allow mount_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(mount_t) depth: 3
 	
	
	


	allow mount_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(mount_t) depth: 3
 	
	
	


	allow mount_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(mount_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(mount_t) depth: 3
 	
	
	


	allow mount_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow mount_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(mount_t) depth: 3
 	
	
	


	allow mount_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(mount_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(mount_t) depth: 3
 	
	
	


	allow mount_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(mount_t) depth: 3
 	
	
	


	allow mount_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(mount_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(mount_t) depth: 3
 	
	
	


	allow mount_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(mount_t) depth: 3
 	
	
	


	allow mount_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(mount_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_portmap_port(mount_t) depth: 2
 	
	
	


	allow mount_t portmap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_portmap_port(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_portmap_port(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_portmap_port(mount_t) depth: 3
 	
	
	


	allow mount_t portmap_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_portmap_port(mount_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_portmap_port(mount_t) depth: 3
 	
	
	


	allow mount_t portmap_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_portmap_port(mount_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_portmap_port(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(mount_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(mount_t) depth: 3
 	
	
	


	allow mount_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(mount_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(mount_t) depth: 2
 	
	
	


	allow mount_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(mount_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_portmap_port(mount_t) depth: 2
 	
	
	


	allow mount_t portmap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_portmap_port(mount_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(mount_t) depth: 2
 	
	
	


	allow mount_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(mount_t) depth: 1
 	
	allow mount_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_portmap(mount_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(mount_t) depth: 1
 	
	
	


	allow mount_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(mount_t) depth: 0
 	




	
		
	



	
		
	


# for kernel package installation

	
		
	



	
		
	


 

	


########################################
#
# Declarations
#



 	 	 	 	
##### begin files_type(etc_aliases_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(etc_aliases_t) depth: 2
 	
	
	


	allow etc_aliases_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(etc_aliases_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(etc_aliases_t) depth: 2
 	
	
	


	allow etc_aliases_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(etc_aliases_t) depth: 1
 	
	typeattribute etc_aliases_t file_type;

	 	 	 	
##### end files_type(etc_aliases_t) depth: 0
 	

 	 	 	 	
##### begin files_config_file(etc_mail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(etc_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(etc_mail_t) depth: 3
 	
	
	


	allow etc_mail_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(etc_mail_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(etc_mail_t) depth: 3
 	
	
	


	allow etc_mail_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(etc_mail_t) depth: 2
 	
	typeattribute etc_mail_t file_type;

	 	 	 	
##### end files_type(etc_mail_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute etc_mail_t usercanread;

	 	 	 	
##### end files_config_file(etc_mail_t) depth: 0
 	

 	 	 	 	
##### begin files_type(mqueue_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(mqueue_spool_t) depth: 2
 	
	
	


	allow mqueue_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mqueue_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(mqueue_spool_t) depth: 2
 	
	
	


	allow mqueue_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(mqueue_spool_t) depth: 1
 	
	typeattribute mqueue_spool_t file_type;

	 	 	 	
##### end files_type(mqueue_spool_t) depth: 0
 	

 	 	 	 	
##### begin files_type(mail_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(mail_spool_t) depth: 2
 	
	
	


	allow mail_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(mail_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(mail_spool_t) depth: 2
 	
	
	


	allow mail_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(mail_spool_t) depth: 1
 	
	typeattribute mail_spool_t file_type;

	 	 	 	
##### end files_type(mail_spool_t) depth: 0
 	

 	 	 	 	
##### begin files_type(sendmail_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_exec_t) depth: 2
 	
	
	


	allow sendmail_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_exec_t) depth: 2
 	
	
	


	allow sendmail_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_exec_t) depth: 1
 	
	typeattribute sendmail_exec_t file_type;

	 	 	 	
##### end files_type(sendmail_exec_t) depth: 0
 	

 	 	 	 	
##### begin mta_base_mail_template(system) depth: 1
 	

	##############################
	#
	# system_mail_t declarations
	#

	type system_mail_t, user_mail_domain;
	 	 	 	 	
##### begin domain_type(system_mail_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(system_mail_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute system_mail_t domain;

	# allow the domain to read its /proc/pid entries
	allow system_mail_t self:dir { read getattr lock search ioctl };
	allow system_mail_t self:lnk_file { read getattr lock ioctl };
	allow system_mail_t self:file { getattr read write append ioctl lock };

	# allow system_mail_t to create child processes in this domain
	allow system_mail_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types system_mail_t;
		role sysadm_r types system_mail_t;
		role user_r types system_mail_t;
		role staff_r types system_mail_t;
	

	 	 	 	
##### end domain_base_type(system_mail_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(system_mail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_mail_t) depth: 3
 	
	allow system_mail_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(system_mail_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t root_t:dir { read getattr lock search ioctl };
	allow system_mail_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(system_mail_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t init_t:process signull;

	 	 	 	
##### end init_signull(system_mail_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(system_mail_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(system_mail_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(system_mail_t) depth: 3
 	
	
	


	dontaudit system_mail_t security_t:dir search;
	dontaudit system_mail_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(system_mail_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(system_mail_t) depth: 3
 	
	
	


	dontaudit system_mail_t selinux_config_t:dir search;
	dontaudit system_mail_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(system_mail_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(system_mail_t,sendmail_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(sendmail_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_exec_t) depth: 4
 	
	
	


	allow sendmail_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_exec_t) depth: 4
 	
	
	


	allow sendmail_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_exec_t) depth: 3
 	
	typeattribute sendmail_exec_t file_type;

	 	 	 	
##### end files_type(sendmail_exec_t) depth: 2
 	

	allow system_mail_t sendmail_exec_t:file entrypoint;
	allow system_mail_t sendmail_exec_t:file { read getattr lock execute ioctl };

	typeattribute sendmail_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(system_mail_t,sendmail_exec_t) depth: 1
 	

	type system_mail_tmp_t;
	 	 	 	 	
##### begin files_tmp_file(system_mail_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(system_mail_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_mail_tmp_t) depth: 4
 	
	
	


	allow system_mail_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_mail_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_mail_tmp_t) depth: 4
 	
	
	


	allow system_mail_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_mail_tmp_t) depth: 3
 	
	typeattribute system_mail_tmp_t file_type;

	 	 	 	
##### end files_type(system_mail_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin files_poly_member(system_mail_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(system_mail_tmp_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(system_mail_tmp_t) depth: 5
 	
	
	


	allow system_mail_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(system_mail_tmp_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(system_mail_tmp_t) depth: 5
 	
	
	


	allow system_mail_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(system_mail_tmp_t) depth: 4
 	
	typeattribute system_mail_tmp_t file_type;

	 	 	 	
##### end files_type(system_mail_tmp_t) depth: 3
 	
	typeattribute system_mail_tmp_t polymember;

	 	 	 	
##### end files_poly_member(system_mail_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(system_mail_tmp_t) depth: 3
 	
	
	


	allow system_mail_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(system_mail_tmp_t) depth: 2
 	
	typeattribute system_mail_tmp_t tmpfile;
	allow system_mail_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(system_mail_tmp_t) depth: 1
 	

	##############################
	#
	# system_mail_t local policy
	#

	allow system_mail_t self:capability { setuid setgid chown };
	allow system_mail_t self:process { { sigchld sigkill sigstop signull signal } setrlimit };
	allow system_mail_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# re-exec itself
	
	
	


	allow system_mail_t sendmail_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

	allow system_mail_t sendmail_exec_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin kernel_read_kernel_sysctls(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t proc_t:dir search;
	allow system_mail_t sysctl_t:dir { read getattr lock search ioctl };
	allow system_mail_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow system_mail_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow system_mail_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(system_mail_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(system_mail_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(system_mail_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_smtp_port(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t smtp_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_smtp_port(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin corecmd_exec_bin(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t bin_t:dir { read getattr lock search ioctl };
	allow system_mail_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow system_mail_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_search_sbin(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin files_read_etc_files(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t etc_t:dir { read getattr lock search ioctl };
	allow system_mail_t etc_t:file { read getattr lock ioctl };
	allow system_mail_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_spool(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t var_t:dir { getattr search };
	allow system_mail_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(system_mail_t) depth: 1
 	
	# It wants to check for nscd
	 	 	 	 	
##### begin files_dontaudit_search_pids(system_mail_t) depth: 2
 	
	
	


	dontaudit system_mail_t var_run_t:dir search;

	 	 	 	
##### end files_dontaudit_search_pids(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin libs_use_ld_so(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_etc(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(system_mail_t) depth: 2
 	
	allow system_mail_t lib_t:dir { read getattr lock search ioctl };
	allow system_mail_t lib_t:lnk_file { read getattr lock ioctl };
	allow system_mail_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow system_mail_t ld_so_t:file { read getattr lock execute ioctl };
	allow system_mail_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin libs_use_shared_libs(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_usr(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(system_mail_t) depth: 2
 	
	allow system_mail_t lib_t:dir { read getattr lock search ioctl };
	allow system_mail_t lib_t:lnk_file { read getattr lock ioctl };
	allow system_mail_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow system_mail_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow system_mail_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t devlog_t:lnk_file read;
	allow system_mail_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow system_mail_t syslogd_t:unix_dgram_socket sendto;
	allow system_mail_t syslogd_t:unix_stream_socket connectto;
	allow system_mail_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow system_mail_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(system_mail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_mail_t) depth: 3
 	
	allow system_mail_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(system_mail_t) depth: 2
 	

	 	 	 	
##### end logging_send_syslog_msg(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_localization(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_mail_t) depth: 2
 	
	# FIXME: system_mail_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(system_mail_t) depth: 2
 	
	allow system_mail_t locale_t:dir { read getattr lock search ioctl };
	allow system_mail_t locale_t:lnk_file { read getattr lock ioctl };
	allow system_mail_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(system_mail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_usr(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(system_mail_t) depth: 3
 	
	allow system_mail_t lib_t:dir { read getattr lock search ioctl };
	allow system_mail_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(system_mail_t) depth: 2
 	

	 	 	 	
##### end miscfiles_read_localization(system_mail_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_read_config(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_mail_t) depth: 2
 	
	allow system_mail_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_dns_name_resolve(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow system_mail_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(system_mail_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow system_mail_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(system_mail_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(system_mail_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(system_mail_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(system_mail_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(system_mail_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(system_mail_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(system_mail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(system_mail_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_mail_t) depth: 2
 	
	allow system_mail_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(system_mail_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin postfix_domtrans_user_mail_handler(system_mail_t) depth: 2
 	
	
	


	typeattribute system_mail_t postfix_user_domtrans;

	 	 	 	
##### end postfix_domtrans_user_mail_handler(system_mail_t) depth: 1
 	
	
	


	
	
		
	


	
	
		
		
	


		allow system_mail_t system_mail_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
		allow system_mail_t system_mail_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
		 	 	 	 	
##### begin files_tmp_filetrans(system_mail_t,system_mail_tmp_t,{ file dir }) depth: 2
 	
	
	


	allow system_mail_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition system_mail_t tmp_t:{ file dir } system_mail_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(system_mail_t,system_mail_tmp_t,{ file dir }) depth: 1
 	

		allow system_mail_t etc_mail_t:dir { getattr search };

		# Write to /var/spool/mail and /var/spool/mqueue.
		allow system_mail_t mail_spool_t:dir { read getattr lock search ioctl add_name remove_name write };
		allow system_mail_t mail_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };
		allow system_mail_t mqueue_spool_t:dir { read getattr lock search ioctl add_name remove_name write };
		allow system_mail_t mqueue_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };

		# Check available space.
		 	 	 	 	
##### begin fs_getattr_xattr_fs(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(system_mail_t) depth: 1
 	

		 	 	 	 	
##### begin files_read_etc_runtime_files(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t etc_t:dir { read getattr lock search ioctl };
	allow system_mail_t etc_runtime_t:file { read getattr lock ioctl };
	allow system_mail_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(system_mail_t) depth: 1
 	

		# Write to /var/log/sendmail.st
		 	 	 	 	
##### begin sendmail_manage_log(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(system_mail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_var(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(system_mail_t) depth: 3
 	
	allow system_mail_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(system_mail_t) depth: 2
 	
	allow system_mail_t sendmail_log_t:file { create getattr setattr read write append rename link unlink ioctl lock };

	 	 	 	
##### end sendmail_manage_log(system_mail_t) depth: 1
 	
		 	 	 	 	
##### begin sendmail_create_log(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin logging_log_filetrans(system_mail_t,sendmail_log_t,file) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_var(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(system_mail_t) depth: 3
 	
	allow system_mail_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition system_mail_t var_log_t:file sendmail_log_t;

	 	 	 	
##### end logging_log_filetrans(system_mail_t,sendmail_log_t,file) depth: 2
 	

	 	 	 	
##### end sendmail_create_log(system_mail_t) depth: 1
 	
	
	


	  	 	 	 	
##### end mta_base_mail_template(system) depth: 0
 	
role system_r types system_mail_t;

# cjp: need to resolve this, but require{}
# does not work in the else part of the optional
#ifdef(`strict_policy',`
#	optional_policy(`sendmail',`',`
#		init_system_domain(system_mail_t,sendmail_exec_t)
#	')
#')

########################################
#
# System mail local policy
#

# newalias required this, not sure if it is needed in 'if' file
allow system_mail_t self:capability { dac_override };

allow system_mail_t etc_mail_t:dir { getattr search };
allow system_mail_t etc_mail_t:file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_read_system_state(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t proc_t:dir { read getattr lock search ioctl };
	allow system_mail_t proc_t:lnk_file { getattr read };
	allow system_mail_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(system_mail_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t proc_t:dir search;
	allow system_mail_t proc_net_t:dir { read getattr lock search ioctl };
	allow system_mail_t proc_net_t:file { read getattr lock ioctl };
	allow system_mail_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(system_mail_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_rand(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(system_mail_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_urand(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(system_mail_t) depth: 0
 	

 	 	 	 	
##### begin fs_read_eventpollfs(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t eventpollfs_t:dir { getattr search };
	allow system_mail_t eventpollfs_t:file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_eventpollfs(system_mail_t) depth: 0
 	

 	 	 	 	
##### begin init_use_script_ptys(system_mail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(system_mail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_mail_t) depth: 3
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_mail_t) depth: 2
 	
	allow system_mail_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(system_mail_t) depth: 1
 	
	allow system_mail_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(system_mail_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_sysadm_terms(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin userdom_use_sysadm_ttys(system_mail_t) depth: 2
 	
	
		 	 	 	 	
##### begin term_use_unallocated_ttys(system_mail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_mail_t) depth: 3
 	
	allow system_mail_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(system_mail_t) depth: 2
 	
	

	 	 	 	
##### end userdom_use_sysadm_ttys(system_mail_t) depth: 1
 	
	 	 	 	 	
##### begin userdom_use_sysadm_ptys(system_mail_t) depth: 2
 	
	
		 	 	 	 	
##### begin term_use_generic_ptys(system_mail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(system_mail_t) depth: 4
 	
	
	


	allow system_mail_t device_t:dir { read getattr lock search ioctl };
	allow system_mail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(system_mail_t) depth: 3
 	
	allow system_mail_t devpts_t:dir { getattr search read lock ioctl };
	allow system_mail_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(system_mail_t) depth: 2
 	
	

	 	 	 	
##### end userdom_use_sysadm_ptys(system_mail_t) depth: 1
 	

	 	 	 	
##### end userdom_use_sysadm_terms(system_mail_t) depth: 0
 	


	typealias system_mail_t alias sysadm_mail_t;

	allow system_mail_t mail_spool_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow system_mail_t mail_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow system_mail_t mail_spool_t:lnk_file { create read getattr setattr link unlink rename };
	allow system_mail_t mail_spool_t:fifo_file { getattr read write append ioctl lock };

	allow system_mail_t mqueue_spool_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow system_mail_t mqueue_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow system_mail_t mqueue_spool_t:lnk_file { create read getattr setattr link unlink rename };

	# for reading .forward - maybe we need a new type for it?
	# also for delivering mail to maildir
	# cjp: fix this to generic_user interfaces
	 	 	 	 	
##### begin userdom_manage_user_home_content_dirs(user,mailserver_delivery) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(mailserver_delivery) depth: 2
 	
	
	


	allow mailserver_delivery home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(mailserver_delivery) depth: 1
 	
	allow mailserver_delivery user_home_dir_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow mailserver_delivery user_home_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };
 	 	 	 	
##### end userdom_manage_user_home_content_dirs(user,mailserver_delivery) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_files(mailserver_delivery) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(mailserver_delivery) depth: 2
 	
	
	


	allow mailserver_delivery home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(mailserver_delivery) depth: 1
 	
	allow mailserver_delivery user_home_dir_t:dir { getattr search };
	allow mailserver_delivery user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow mailserver_delivery user_home_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_files(mailserver_delivery) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_symlinks(mailserver_delivery) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(mailserver_delivery) depth: 2
 	
	
	


	allow mailserver_delivery home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(mailserver_delivery) depth: 1
 	
	allow mailserver_delivery user_home_dir_t:dir { getattr search };
	allow mailserver_delivery user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow mailserver_delivery user_home_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_symlinks(mailserver_delivery) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_sockets(mailserver_delivery) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(mailserver_delivery) depth: 2
 	
	
	


	allow mailserver_delivery home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(mailserver_delivery) depth: 1
 	
	allow mailserver_delivery user_home_dir_t:dir { getattr search };
	allow mailserver_delivery user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow mailserver_delivery user_home_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_sockets(mailserver_delivery) depth: 0
 	
	 	 	 	 	
##### begin userdom_manage_generic_user_home_content_pipes(mailserver_delivery) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(mailserver_delivery) depth: 2
 	
	
	


	allow mailserver_delivery home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(mailserver_delivery) depth: 1
 	
	allow mailserver_delivery user_home_dir_t:dir { getattr search };
	allow mailserver_delivery user_home_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow mailserver_delivery user_home_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end userdom_manage_generic_user_home_content_pipes(mailserver_delivery) depth: 0
 	
	 	 	 	 	
##### begin userdom_generic_user_home_dir_filetrans_generic_user_home_content(mailserver_delivery,{ dir file lnk_file sock_file fifo_file }) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(mailserver_delivery) depth: 2
 	
	
	


	allow mailserver_delivery home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(mailserver_delivery) depth: 1
 	
	allow mailserver_delivery user_home_dir_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition mailserver_delivery user_home_dir_t:{ dir file lnk_file sock_file fifo_file } user_home_t;

	 	 	 	
##### end userdom_generic_user_home_dir_filetrans_generic_user_home_content(mailserver_delivery,{ dir file lnk_file sock_file fifo_file }) depth: 0
 	

# cjp: another require-in-else to resolve
#	optional_policy(`postfix',`',`
		 	 	 	 	
##### begin corecmd_exec_bin(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t bin_t:dir { read getattr lock search ioctl };
	allow system_mail_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow system_mail_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(system_mail_t) depth: 0
 	
		 	 	 	 	
##### begin corecmd_exec_sbin(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t sbin_t:dir { read getattr lock search ioctl };
	allow system_mail_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow system_mail_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(system_mail_t) depth: 0
 	

		 	 	 	 	
##### begin domain_exec_all_entry_files(system_mail_t) depth: 1
 	
	
	


	
	
	


	allow system_mail_t entry_type:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end domain_exec_all_entry_files(system_mail_t) depth: 0
 	

		 	 	 	 	
##### begin files_exec_etc_files(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t etc_t:dir { read getattr lock search ioctl };
	allow system_mail_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow system_mail_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(system_mail_t) depth: 0
 	

		 	 	 	 	
##### begin libs_exec_ld_so(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t lib_t:dir { read getattr lock search ioctl };
	allow system_mail_t lib_t:lnk_file { read getattr lock ioctl };
	allow system_mail_t ld_so_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow system_mail_t ld_so_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end libs_exec_ld_so(system_mail_t) depth: 0
 	
		 	 	 	 	
##### begin libs_exec_lib_files(system_mail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(system_mail_t) depth: 1
 	
	allow system_mail_t lib_t:dir { read getattr lock search ioctl };
	allow system_mail_t lib_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow system_mail_t lib_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end libs_exec_lib_files(system_mail_t) depth: 0
 	
#	')



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin cron_read_system_job_tmp_files(system_mail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_tmp(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t tmp_t:dir { getattr search };

	 	 	 	
##### end files_search_tmp(system_mail_t) depth: 1
 	
	allow system_mail_t system_crond_tmp_t:file { read getattr lock ioctl };

	 	 	 	
##### end cron_read_system_job_tmp_files(system_mail_t) depth: 0
 	
	 	 	 	 	
##### begin cron_dontaudit_write_pipes(system_mail_t) depth: 1
 	
	
	


	dontaudit system_mail_t crond_t:fifo_file write;

	 	 	 	
##### end cron_dontaudit_write_pipes(system_mail_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	allow system_mail_t etc_aliases_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow system_mail_t etc_aliases_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow system_mail_t etc_aliases_t:lnk_file { create read getattr setattr link unlink rename };
	allow system_mail_t etc_aliases_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow system_mail_t etc_aliases_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_etc_filetrans(system_mail_t,etc_aliases_t,{ file lnk_file sock_file fifo_file }) depth: 1
 	
	
	


	allow system_mail_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition system_mail_t etc_t:{ file lnk_file sock_file fifo_file } etc_aliases_t;

	 	 	 	
##### end files_etc_filetrans(system_mail_t,etc_aliases_t,{ file lnk_file sock_file fifo_file }) depth: 0
 	

	 	 	 	 	
##### begin domain_use_interactive_fds(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(system_mail_t) depth: 0
 	

	# postfix needs this for newaliases
	 	 	 	 	
##### begin files_getattr_tmp_dirs(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(system_mail_t) depth: 0
 	

	 	 	 	 	
##### begin postfix_exec_master(system_mail_t) depth: 1
 	
	
	


	
	
	


	allow system_mail_t postfix_master_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end postfix_exec_master(system_mail_t) depth: 0
 	
	 	 	 	 	
##### begin postfix_read_config(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t postfix_etc_t:dir { getattr read search };
	allow system_mail_t postfix_etc_t:file { read getattr };
	allow system_mail_t postfix_etc_t:lnk_file { getattr read };
	 	 	 	 	
##### begin files_search_etc(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(system_mail_t) depth: 1
 	

	 	 	 	
##### end postfix_read_config(system_mail_t) depth: 0
 	
	 	 	 	 	
##### begin postfix_search_spool(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t postfix_spool_t:dir { getattr search };
	 	 	 	 	
##### begin files_search_spool(system_mail_t) depth: 2
 	
	
	


	allow system_mail_t var_t:dir { getattr search };
	allow system_mail_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(system_mail_t) depth: 1
 	

	 	 	 	
##### end postfix_search_spool(system_mail_t) depth: 0
 	

	

	
	
		
		 	 	 	 	
##### begin cron_rw_tcp_sockets(system_mail_t) depth: 1
 	
	
	


	allow system_mail_t crond_t:tcp_socket { read write };

	 	 	 	
##### end cron_rw_tcp_sockets(system_mail_t) depth: 0
 	
	
	


	



	
		
	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_users_ptys(system_mail_t) depth: 1
 	
	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(system_mail_t) depth: 2
 	
	
	


	dontaudit system_mail_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(system_mail_t) depth: 1
 	
	

	 	 	 	
##### end userdom_dontaudit_use_unpriv_users_ptys(system_mail_t) depth: 0
 	

	
	
		
		 	 	 	 	
##### begin cron_dontaudit_append_system_job_tmp_files(system_mail_t) depth: 1
 	
	
	


	dontaudit system_mail_t system_crond_tmp_t:file append;

	 	 	 	
##### end cron_dontaudit_append_system_job_tmp_files(system_mail_t) depth: 0
 	
	
	


	



	
		
	


# should break this up among sections:


	
		
	





	


########################################
#
# Declarations
#

# domains that transition to the
# postfix user domains

 	 	 	 	
##### begin postfix_public_domain_template(bounce) depth: 1
 	
	 	 	 	 	
##### begin postfix_server_domain_template(bounce) depth: 2
 	
	 	 	 	 	
##### begin postfix_domain_template(bounce) depth: 3
 	
	type postfix_bounce_t;
	type postfix_bounce_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_bounce_t) depth: 4
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_bounce_t) depth: 5
 	
	
	


	# mark as a domain
	typeattribute postfix_bounce_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_bounce_t self:dir { read getattr lock search ioctl };
	allow postfix_bounce_t self:lnk_file { read getattr lock ioctl };
	allow postfix_bounce_t self:file { getattr read write append ioctl lock };

	# allow postfix_bounce_t to create child processes in this domain
	allow postfix_bounce_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_bounce_t;
		role sysadm_r types postfix_bounce_t;
		role user_r types postfix_bounce_t;
		role staff_r types postfix_bounce_t;
	

	 	 	 	
##### end domain_base_type(postfix_bounce_t) depth: 4
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_bounce_t) depth: 4
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_bounce_t) depth: 4
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_bounce_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_bounce_t) depth: 6
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_bounce_t) depth: 5
 	
	allow postfix_bounce_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_bounce_t) depth: 4
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t root_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_bounce_t) depth: 4
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_bounce_t) depth: 4
 	
	 	 	 	 	
##### begin init_signull(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_bounce_t) depth: 4
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_bounce_t) depth: 4
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_bounce_t) depth: 4
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_bounce_t) depth: 5
 	
	
	


	dontaudit postfix_bounce_t security_t:dir search;
	dontaudit postfix_bounce_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_bounce_t) depth: 4
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_bounce_t) depth: 5
 	
	
	


	dontaudit postfix_bounce_t selinux_config_t:dir search;
	dontaudit postfix_bounce_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_bounce_t) depth: 4
 	
	
	


	 	 	 	
##### end domain_type(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_bounce_t,postfix_bounce_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_bounce_exec_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_bounce_exec_t) depth: 6
 	
	
	


	allow postfix_bounce_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_bounce_exec_t) depth: 5
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_bounce_exec_t) depth: 6
 	
	
	


	allow postfix_bounce_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_bounce_exec_t) depth: 5
 	
	typeattribute postfix_bounce_exec_t file_type;

	 	 	 	
##### end files_type(postfix_bounce_exec_t) depth: 4
 	

	allow postfix_bounce_t postfix_bounce_exec_t:file entrypoint;
	allow postfix_bounce_t postfix_bounce_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_bounce_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_bounce_t,postfix_bounce_exec_t) depth: 3
 	
	role system_r types postfix_bounce_t;

	dontaudit postfix_bounce_t self:capability sys_tty_config;
	allow postfix_bounce_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_bounce_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_bounce_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_bounce_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_bounce_t:process signal;

	allow postfix_bounce_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_bounce_t postfix_bounce_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_bounce_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_bounce_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_bounce_t postfix_master_t:process sigchld;

	allow postfix_bounce_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_bounce_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_bounce_t,postfix_var_run_t,file) depth: 4
 	
	
	


	allow postfix_bounce_t var_t:dir { getattr search };
	allow postfix_bounce_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_bounce_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_bounce_t,postfix_var_run_t,file) depth: 3
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t proc_t:lnk_file { getattr read };
	allow postfix_bounce_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t proc_t:dir search;
	allow postfix_bounce_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_bounce_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_bounce_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_bounce_t { proc_t proc_net_t }:dir search;

	allow postfix_bounce_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_bounce_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_bounce_t) depth: 4
 	
	
	


	dontaudit postfix_bounce_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t bin_t:dir search;
	allow postfix_bounce_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t sbin_t:dir search;
	allow postfix_bounce_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_bounce_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t etc_t:file { read getattr lock ioctl };
	allow postfix_bounce_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_bounce_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t usr_t:dir search;
	allow postfix_bounce_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin files_search_spool(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t var_t:dir { getattr search };
	allow postfix_bounce_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin init_use_fds(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin init_sigchld(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_bounce_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_bounce_t) depth: 4
 	
	allow postfix_bounce_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_bounce_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_bounce_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_bounce_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_bounce_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_bounce_t) depth: 4
 	
	allow postfix_bounce_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_bounce_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_bounce_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_bounce_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t devlog_t:lnk_file read;
	allow postfix_bounce_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_bounce_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_bounce_t syslogd_t:unix_stream_socket connectto;
	allow postfix_bounce_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_bounce_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_bounce_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_bounce_t) depth: 6
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_bounce_t) depth: 5
 	
	allow postfix_bounce_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_bounce_t) depth: 4
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_bounce_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_bounce_t) depth: 4
 	
	# FIXME: postfix_bounce_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_bounce_t) depth: 4
 	
	allow postfix_bounce_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_bounce_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_bounce_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_bounce_t) depth: 6
 	
	
	


	allow postfix_bounce_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_bounce_t) depth: 5
 	
	allow postfix_bounce_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_bounce_t) depth: 4
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t cert_t:file { read getattr lock ioctl };
	allow postfix_bounce_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_bounce_t) depth: 3
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_bounce_t) depth: 4
 	
	
	


	dontaudit postfix_bounce_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_bounce_t) depth: 3
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_bounce_t) depth: 4
 	
	
	


	dontaudit postfix_bounce_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_bounce_t) depth: 3
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_bounce_t) depth: 4
 	
	
	


	dontaudit postfix_bounce_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_bounce_t) depth: 3
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_bounce_t) depth: 4
 	
	
	


	dontaudit postfix_bounce_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_bounce_t) depth: 3
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_bounce_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_bounce_t) depth: 5
 	
	
	


	allow postfix_bounce_t device_t:dir { read getattr lock search ioctl };
	allow postfix_bounce_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_bounce_t) depth: 4
 	
	allow postfix_bounce_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_bounce_t) depth: 3
 	
	
	

 	 	 	 	
##### end postfix_domain_template(bounce) depth: 2
 	

	allow postfix_bounce_t self:capability { setuid setgid dac_override };
	allow postfix_bounce_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_bounce_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_bounce_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_bounce_exec_t,postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_bounce_exec_t,postfix_bounce_t) depth: 4
 	
	allow postfix_master_t postfix_bounce_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_bounce_t:process transition;
	dontaudit postfix_master_t postfix_bounce_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_bounce_exec_t,postfix_bounce_t) depth: 3
 	
	type_transition postfix_master_t postfix_bounce_exec_t:process postfix_bounce_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_bounce_exec_t,postfix_bounce_t) depth: 2
 	
	allow postfix_master_t postfix_bounce_t:fd use;
	allow postfix_bounce_t postfix_master_t:fd use;
	allow postfix_bounce_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_bounce_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_bounce_t) depth: 3
 	
	
	


	allow postfix_bounce_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_bounce_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_bounce_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_bounce_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_bounce_t) depth: 3
 	
	
	


	allow postfix_bounce_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_bounce_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_bounce_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_bounce_t) depth: 3
 	
	
	


	allow postfix_bounce_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_bounce_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_bounce_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_bounce_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_bounce_t) depth: 3
 	
	
	


	allow postfix_bounce_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_bounce_t) depth: 3
 	
	
	


	allow postfix_bounce_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_bounce_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_bounce_t) depth: 3
 	
	
	


	allow postfix_bounce_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_bounce_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_bounce_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_bounce_t) depth: 4
 	
	
	


	allow postfix_bounce_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_bounce_t) depth: 3
 	
	allow postfix_bounce_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_bounce_t) depth: 2
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(bounce) depth: 1
 	

	allow postfix_bounce_t postfix_public_t:dir search;
 	 	 	 	
##### end postfix_public_domain_template(bounce) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_spool_bounce_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_spool_bounce_t) depth: 2
 	
	
	


	allow postfix_spool_bounce_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_spool_bounce_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_spool_bounce_t) depth: 2
 	
	
	


	allow postfix_spool_bounce_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_spool_bounce_t) depth: 1
 	
	typeattribute postfix_spool_bounce_t file_type;

	 	 	 	
##### end files_type(postfix_spool_bounce_t) depth: 0
 	

 	 	 	 	
##### begin postfix_public_domain_template(cleanup) depth: 1
 	
	 	 	 	 	
##### begin postfix_server_domain_template(cleanup) depth: 2
 	
	 	 	 	 	
##### begin postfix_domain_template(cleanup) depth: 3
 	
	type postfix_cleanup_t;
	type postfix_cleanup_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_cleanup_t) depth: 4
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_cleanup_t) depth: 5
 	
	
	


	# mark as a domain
	typeattribute postfix_cleanup_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_cleanup_t self:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t self:lnk_file { read getattr lock ioctl };
	allow postfix_cleanup_t self:file { getattr read write append ioctl lock };

	# allow postfix_cleanup_t to create child processes in this domain
	allow postfix_cleanup_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_cleanup_t;
		role sysadm_r types postfix_cleanup_t;
		role user_r types postfix_cleanup_t;
		role staff_r types postfix_cleanup_t;
	

	 	 	 	
##### end domain_base_type(postfix_cleanup_t) depth: 4
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_cleanup_t) depth: 4
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_cleanup_t) depth: 4
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_cleanup_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_cleanup_t) depth: 6
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_cleanup_t) depth: 5
 	
	allow postfix_cleanup_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_cleanup_t) depth: 4
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t root_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_cleanup_t) depth: 4
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_cleanup_t) depth: 4
 	
	 	 	 	 	
##### begin init_signull(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_cleanup_t) depth: 4
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_cleanup_t) depth: 4
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_cleanup_t) depth: 4
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_cleanup_t) depth: 5
 	
	
	


	dontaudit postfix_cleanup_t security_t:dir search;
	dontaudit postfix_cleanup_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_cleanup_t) depth: 4
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_cleanup_t) depth: 5
 	
	
	


	dontaudit postfix_cleanup_t selinux_config_t:dir search;
	dontaudit postfix_cleanup_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_cleanup_t) depth: 4
 	
	
	


	 	 	 	
##### end domain_type(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_cleanup_t,postfix_cleanup_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_cleanup_exec_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_cleanup_exec_t) depth: 6
 	
	
	


	allow postfix_cleanup_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_cleanup_exec_t) depth: 5
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_cleanup_exec_t) depth: 6
 	
	
	


	allow postfix_cleanup_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_cleanup_exec_t) depth: 5
 	
	typeattribute postfix_cleanup_exec_t file_type;

	 	 	 	
##### end files_type(postfix_cleanup_exec_t) depth: 4
 	

	allow postfix_cleanup_t postfix_cleanup_exec_t:file entrypoint;
	allow postfix_cleanup_t postfix_cleanup_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_cleanup_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_cleanup_t,postfix_cleanup_exec_t) depth: 3
 	
	role system_r types postfix_cleanup_t;

	dontaudit postfix_cleanup_t self:capability sys_tty_config;
	allow postfix_cleanup_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_cleanup_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_cleanup_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_cleanup_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_cleanup_t:process signal;

	allow postfix_cleanup_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_cleanup_t postfix_cleanup_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_cleanup_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_cleanup_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_cleanup_t postfix_master_t:process sigchld;

	allow postfix_cleanup_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_cleanup_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_cleanup_t,postfix_var_run_t,file) depth: 4
 	
	
	


	allow postfix_cleanup_t var_t:dir { getattr search };
	allow postfix_cleanup_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_cleanup_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_cleanup_t,postfix_var_run_t,file) depth: 3
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t proc_t:lnk_file { getattr read };
	allow postfix_cleanup_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t proc_t:dir search;
	allow postfix_cleanup_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_cleanup_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_cleanup_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_cleanup_t { proc_t proc_net_t }:dir search;

	allow postfix_cleanup_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_cleanup_t) depth: 4
 	
	
	


	dontaudit postfix_cleanup_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t bin_t:dir search;
	allow postfix_cleanup_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t sbin_t:dir search;
	allow postfix_cleanup_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_cleanup_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t etc_t:file { read getattr lock ioctl };
	allow postfix_cleanup_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_cleanup_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t usr_t:dir search;
	allow postfix_cleanup_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin files_search_spool(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t var_t:dir { getattr search };
	allow postfix_cleanup_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin init_use_fds(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin init_sigchld(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_cleanup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_cleanup_t) depth: 4
 	
	allow postfix_cleanup_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_cleanup_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_cleanup_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_cleanup_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_cleanup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_cleanup_t) depth: 4
 	
	allow postfix_cleanup_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_cleanup_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_cleanup_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_cleanup_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t devlog_t:lnk_file read;
	allow postfix_cleanup_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_cleanup_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_cleanup_t syslogd_t:unix_stream_socket connectto;
	allow postfix_cleanup_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_cleanup_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_cleanup_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_cleanup_t) depth: 6
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_cleanup_t) depth: 5
 	
	allow postfix_cleanup_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_cleanup_t) depth: 4
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_cleanup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_cleanup_t) depth: 4
 	
	# FIXME: postfix_cleanup_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_cleanup_t) depth: 4
 	
	allow postfix_cleanup_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_cleanup_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_cleanup_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_cleanup_t) depth: 6
 	
	
	


	allow postfix_cleanup_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_cleanup_t) depth: 5
 	
	allow postfix_cleanup_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_cleanup_t) depth: 4
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t cert_t:file { read getattr lock ioctl };
	allow postfix_cleanup_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_cleanup_t) depth: 3
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_cleanup_t) depth: 4
 	
	
	


	dontaudit postfix_cleanup_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_cleanup_t) depth: 3
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_cleanup_t) depth: 4
 	
	
	


	dontaudit postfix_cleanup_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_cleanup_t) depth: 3
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_cleanup_t) depth: 4
 	
	
	


	dontaudit postfix_cleanup_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_cleanup_t) depth: 3
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_cleanup_t) depth: 4
 	
	
	


	dontaudit postfix_cleanup_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_cleanup_t) depth: 3
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_cleanup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_cleanup_t) depth: 5
 	
	
	


	allow postfix_cleanup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_cleanup_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_cleanup_t) depth: 4
 	
	allow postfix_cleanup_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_cleanup_t) depth: 3
 	
	
	

 	 	 	 	
##### end postfix_domain_template(cleanup) depth: 2
 	

	allow postfix_cleanup_t self:capability { setuid setgid dac_override };
	allow postfix_cleanup_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_cleanup_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_cleanup_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_cleanup_exec_t,postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_cleanup_exec_t,postfix_cleanup_t) depth: 4
 	
	allow postfix_master_t postfix_cleanup_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_cleanup_t:process transition;
	dontaudit postfix_master_t postfix_cleanup_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_cleanup_exec_t,postfix_cleanup_t) depth: 3
 	
	type_transition postfix_master_t postfix_cleanup_exec_t:process postfix_cleanup_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_cleanup_exec_t,postfix_cleanup_t) depth: 2
 	
	allow postfix_master_t postfix_cleanup_t:fd use;
	allow postfix_cleanup_t postfix_master_t:fd use;
	allow postfix_cleanup_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_cleanup_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_cleanup_t) depth: 3
 	
	
	


	allow postfix_cleanup_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_cleanup_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_cleanup_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_cleanup_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_cleanup_t) depth: 3
 	
	
	


	allow postfix_cleanup_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_cleanup_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_cleanup_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_cleanup_t) depth: 3
 	
	
	


	allow postfix_cleanup_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_cleanup_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_cleanup_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_cleanup_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_cleanup_t) depth: 3
 	
	
	


	allow postfix_cleanup_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_cleanup_t) depth: 3
 	
	
	


	allow postfix_cleanup_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_cleanup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_cleanup_t) depth: 3
 	
	
	


	allow postfix_cleanup_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_cleanup_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_cleanup_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_cleanup_t) depth: 4
 	
	
	


	allow postfix_cleanup_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_cleanup_t) depth: 3
 	
	allow postfix_cleanup_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_cleanup_t) depth: 2
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(cleanup) depth: 1
 	

	allow postfix_cleanup_t postfix_public_t:dir search;
 	 	 	 	
##### end postfix_public_domain_template(cleanup) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_etc_t) depth: 2
 	
	
	


	allow postfix_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_etc_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_etc_t) depth: 2
 	
	
	


	allow postfix_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_etc_t) depth: 1
 	
	typeattribute postfix_etc_t file_type;

	 	 	 	
##### end files_type(postfix_etc_t) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_exec_t) depth: 2
 	
	
	


	allow postfix_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_exec_t) depth: 2
 	
	
	


	allow postfix_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_exec_t) depth: 1
 	
	typeattribute postfix_exec_t file_type;

	 	 	 	
##### end files_type(postfix_exec_t) depth: 0
 	

# temp:
typeattribute postfix_exec_t entry_type;

 	 	 	 	
##### begin postfix_server_domain_template(local) depth: 1
 	
	 	 	 	 	
##### begin postfix_domain_template(local) depth: 2
 	
	type postfix_local_t;
	type postfix_local_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_local_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_local_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_local_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_local_t self:dir { read getattr lock search ioctl };
	allow postfix_local_t self:lnk_file { read getattr lock ioctl };
	allow postfix_local_t self:file { getattr read write append ioctl lock };

	# allow postfix_local_t to create child processes in this domain
	allow postfix_local_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_local_t;
		role sysadm_r types postfix_local_t;
		role user_r types postfix_local_t;
		role staff_r types postfix_local_t;
	

	 	 	 	
##### end domain_base_type(postfix_local_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_local_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_local_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_local_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_local_t) depth: 5
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_local_t) depth: 4
 	
	allow postfix_local_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_local_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t root_t:dir { read getattr lock search ioctl };
	allow postfix_local_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_local_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_local_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_local_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_local_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_local_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_local_t) depth: 4
 	
	
	


	dontaudit postfix_local_t security_t:dir search;
	dontaudit postfix_local_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_local_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_local_t) depth: 4
 	
	
	


	dontaudit postfix_local_t selinux_config_t:dir search;
	dontaudit postfix_local_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_local_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_local_t,postfix_local_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_local_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_local_exec_t) depth: 5
 	
	
	


	allow postfix_local_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_local_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_local_exec_t) depth: 5
 	
	
	


	allow postfix_local_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_local_exec_t) depth: 4
 	
	typeattribute postfix_local_exec_t file_type;

	 	 	 	
##### end files_type(postfix_local_exec_t) depth: 3
 	

	allow postfix_local_t postfix_local_exec_t:file entrypoint;
	allow postfix_local_t postfix_local_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_local_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_local_t,postfix_local_exec_t) depth: 2
 	
	role system_r types postfix_local_t;

	dontaudit postfix_local_t self:capability sys_tty_config;
	allow postfix_local_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_local_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_local_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_local_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_local_t:process signal;

	allow postfix_local_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_local_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_local_t postfix_local_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_local_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_local_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_local_t postfix_master_t:process sigchld;

	allow postfix_local_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_local_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_local_t,postfix_var_run_t,file) depth: 3
 	
	
	


	allow postfix_local_t var_t:dir { getattr search };
	allow postfix_local_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_local_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_local_t,postfix_var_run_t,file) depth: 2
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_local_t proc_t:lnk_file { getattr read };
	allow postfix_local_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t proc_t:dir search;
	allow postfix_local_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_local_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_local_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_local_t) depth: 3
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_local_t { proc_t proc_net_t }:dir search;

	allow postfix_local_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_local_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_local_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_local_t) depth: 3
 	
	
	


	dontaudit postfix_local_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t bin_t:dir search;
	allow postfix_local_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t sbin_t:dir search;
	allow postfix_local_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_local_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_local_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_local_t etc_t:file { read getattr lock ioctl };
	allow postfix_local_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_local_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_local_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t usr_t:dir search;
	allow postfix_local_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin files_search_spool(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t var_t:dir { getattr search };
	allow postfix_local_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin init_use_fds(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin init_sigchld(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_local_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_local_t) depth: 3
 	
	allow postfix_local_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_local_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_local_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_local_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_local_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_local_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_local_t) depth: 3
 	
	allow postfix_local_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_local_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_local_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_local_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_local_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t devlog_t:lnk_file read;
	allow postfix_local_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_local_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_local_t syslogd_t:unix_stream_socket connectto;
	allow postfix_local_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_local_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_local_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_local_t) depth: 5
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_local_t) depth: 4
 	
	allow postfix_local_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_local_t) depth: 3
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_local_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_local_t) depth: 3
 	
	# FIXME: postfix_local_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_local_t) depth: 3
 	
	allow postfix_local_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_local_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_local_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_local_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_local_t) depth: 5
 	
	
	


	allow postfix_local_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_local_t) depth: 4
 	
	allow postfix_local_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_local_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_local_t) depth: 3
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_local_t cert_t:file { read getattr lock ioctl };
	allow postfix_local_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_local_t) depth: 2
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_local_t) depth: 3
 	
	
	


	dontaudit postfix_local_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_local_t) depth: 2
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_local_t) depth: 3
 	
	
	


	dontaudit postfix_local_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_local_t) depth: 2
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_local_t) depth: 3
 	
	
	


	dontaudit postfix_local_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_local_t) depth: 2
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_local_t) depth: 3
 	
	
	


	dontaudit postfix_local_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_local_t) depth: 2
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_local_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_local_t) depth: 4
 	
	
	


	allow postfix_local_t device_t:dir { read getattr lock search ioctl };
	allow postfix_local_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_local_t) depth: 3
 	
	allow postfix_local_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_local_t) depth: 2
 	
	
	

 	 	 	 	
##### end postfix_domain_template(local) depth: 1
 	

	allow postfix_local_t self:capability { setuid setgid dac_override };
	allow postfix_local_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_local_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_local_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_local_exec_t,postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_local_exec_t,postfix_local_t) depth: 3
 	
	allow postfix_master_t postfix_local_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_local_t:process transition;
	dontaudit postfix_master_t postfix_local_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_local_exec_t,postfix_local_t) depth: 2
 	
	type_transition postfix_master_t postfix_local_exec_t:process postfix_local_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_local_exec_t,postfix_local_t) depth: 1
 	
	allow postfix_master_t postfix_local_t:fd use;
	allow postfix_local_t postfix_master_t:fd use;
	allow postfix_local_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_local_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_local_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_local_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_local_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_local_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_local_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_local_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_local_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_local_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_local_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_local_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_local_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_local_t) depth: 3
 	
	
	


	allow postfix_local_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_local_t) depth: 2
 	
	allow postfix_local_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_local_t) depth: 1
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(local) depth: 0
 	
 	 	 	 	
##### begin mta_mailserver_delivery(postfix_local_t) depth: 1
 	
	
	


	typeattribute postfix_local_t mailserver_delivery;

	allow postfix_local_t mail_spool_t:dir { read getattr lock search ioctl add_name write };
	allow postfix_local_t mail_spool_t:file { create ioctl read getattr lock append };
	allow postfix_local_t mail_spool_t:lnk_file { create read getattr };

	
	
		
	


	
	
		
	


	 	 	 	
##### end mta_mailserver_delivery(postfix_local_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(postfix_local_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_local_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_local_tmp_t) depth: 3
 	
	
	


	allow postfix_local_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_local_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_local_tmp_t) depth: 3
 	
	
	


	allow postfix_local_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_local_tmp_t) depth: 2
 	
	typeattribute postfix_local_tmp_t file_type;

	 	 	 	
##### end files_type(postfix_local_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(postfix_local_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_local_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_local_tmp_t) depth: 4
 	
	
	


	allow postfix_local_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_local_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_local_tmp_t) depth: 4
 	
	
	


	allow postfix_local_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_local_tmp_t) depth: 3
 	
	typeattribute postfix_local_tmp_t file_type;

	 	 	 	
##### end files_type(postfix_local_tmp_t) depth: 2
 	
	typeattribute postfix_local_tmp_t polymember;

	 	 	 	
##### end files_poly_member(postfix_local_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(postfix_local_tmp_t) depth: 2
 	
	
	


	allow postfix_local_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(postfix_local_tmp_t) depth: 1
 	
	typeattribute postfix_local_tmp_t tmpfile;
	allow postfix_local_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(postfix_local_tmp_t) depth: 0
 	

# Program for creating database files
 	 	 	 	
##### begin domain_type(postfix_map_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_map_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute postfix_map_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_map_t self:dir { read getattr lock search ioctl };
	allow postfix_map_t self:lnk_file { read getattr lock ioctl };
	allow postfix_map_t self:file { getattr read write append ioctl lock };

	# allow postfix_map_t to create child processes in this domain
	allow postfix_map_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_map_t;
		role sysadm_r types postfix_map_t;
		role user_r types postfix_map_t;
		role staff_r types postfix_map_t;
	

	 	 	 	
##### end domain_base_type(postfix_map_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t device_t:dir { read getattr lock search ioctl };
	allow postfix_map_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t device_t:dir { read getattr lock search ioctl };
	allow postfix_map_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_map_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_map_t) depth: 3
 	
	
	


	allow postfix_map_t device_t:dir { read getattr lock search ioctl };
	allow postfix_map_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_map_t) depth: 2
 	
	allow postfix_map_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_map_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t root_t:dir { read getattr lock search ioctl };
	allow postfix_map_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_map_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_map_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_map_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_map_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_map_t) depth: 2
 	
	
	


	dontaudit postfix_map_t security_t:dir search;
	dontaudit postfix_map_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_map_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_map_t) depth: 2
 	
	
	


	dontaudit postfix_map_t selinux_config_t:dir search;
	dontaudit postfix_map_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_map_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(postfix_map_t,postfix_map_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_map_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_map_exec_t) depth: 3
 	
	
	


	allow postfix_map_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_map_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_map_exec_t) depth: 3
 	
	
	


	allow postfix_map_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_map_exec_t) depth: 2
 	
	typeattribute postfix_map_exec_t file_type;

	 	 	 	
##### end files_type(postfix_map_exec_t) depth: 1
 	

	allow postfix_map_t postfix_map_exec_t:file entrypoint;
	allow postfix_map_t postfix_map_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_map_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_map_t,postfix_map_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(postfix_map_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_map_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_map_tmp_t) depth: 3
 	
	
	


	allow postfix_map_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_map_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_map_tmp_t) depth: 3
 	
	
	


	allow postfix_map_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_map_tmp_t) depth: 2
 	
	typeattribute postfix_map_tmp_t file_type;

	 	 	 	
##### end files_type(postfix_map_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(postfix_map_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_map_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_map_tmp_t) depth: 4
 	
	
	


	allow postfix_map_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_map_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_map_tmp_t) depth: 4
 	
	
	


	allow postfix_map_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_map_tmp_t) depth: 3
 	
	typeattribute postfix_map_tmp_t file_type;

	 	 	 	
##### end files_type(postfix_map_tmp_t) depth: 2
 	
	typeattribute postfix_map_tmp_t polymember;

	 	 	 	
##### end files_poly_member(postfix_map_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(postfix_map_tmp_t) depth: 2
 	
	
	


	allow postfix_map_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(postfix_map_tmp_t) depth: 1
 	
	typeattribute postfix_map_tmp_t tmpfile;
	allow postfix_map_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(postfix_map_tmp_t) depth: 0
 	

 	 	 	 	
##### begin postfix_domain_template(master) depth: 1
 	
	type postfix_master_t;
	type postfix_master_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_master_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_master_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute postfix_master_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_master_t self:dir { read getattr lock search ioctl };
	allow postfix_master_t self:lnk_file { read getattr lock ioctl };
	allow postfix_master_t self:file { getattr read write append ioctl lock };

	# allow postfix_master_t to create child processes in this domain
	allow postfix_master_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_master_t;
		role sysadm_r types postfix_master_t;
		role user_r types postfix_master_t;
		role staff_r types postfix_master_t;
	

	 	 	 	
##### end domain_base_type(postfix_master_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_master_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_master_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_master_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_master_t) depth: 4
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_master_t) depth: 3
 	
	allow postfix_master_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_master_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t root_t:dir { read getattr lock search ioctl };
	allow postfix_master_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_master_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_master_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_master_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_master_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_master_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_master_t) depth: 3
 	
	
	


	dontaudit postfix_master_t security_t:dir search;
	dontaudit postfix_master_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_master_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_master_t) depth: 3
 	
	
	


	dontaudit postfix_master_t selinux_config_t:dir search;
	dontaudit postfix_master_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_master_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_master_t,postfix_master_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_master_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_master_exec_t) depth: 4
 	
	
	


	allow postfix_master_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_master_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_master_exec_t) depth: 4
 	
	
	


	allow postfix_master_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_master_exec_t) depth: 3
 	
	typeattribute postfix_master_exec_t file_type;

	 	 	 	
##### end files_type(postfix_master_exec_t) depth: 2
 	

	allow postfix_master_t postfix_master_exec_t:file entrypoint;
	allow postfix_master_t postfix_master_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_master_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_master_t,postfix_master_exec_t) depth: 1
 	
	role system_r types postfix_master_t;

	dontaudit postfix_master_t self:capability sys_tty_config;
	allow postfix_master_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_master_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_master_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_master_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_master_t:process signal;

	allow postfix_master_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_master_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_master_t postfix_master_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_master_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_master_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_master_t postfix_master_t:process sigchld;

	allow postfix_master_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_master_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_master_t,postfix_var_run_t,file) depth: 2
 	
	
	


	allow postfix_master_t var_t:dir { getattr search };
	allow postfix_master_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_master_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_master_t,postfix_var_run_t,file) depth: 1
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_master_t proc_t:lnk_file { getattr read };
	allow postfix_master_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t proc_t:dir search;
	allow postfix_master_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_master_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_master_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_master_t) depth: 2
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_master_t { proc_t proc_net_t }:dir search;

	allow postfix_master_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_master_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_master_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_master_t) depth: 2
 	
	
	


	dontaudit postfix_master_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t bin_t:dir search;
	allow postfix_master_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t sbin_t:dir search;
	allow postfix_master_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_master_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_master_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_master_t etc_t:file { read getattr lock ioctl };
	allow postfix_master_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_master_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_master_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t usr_t:dir search;
	allow postfix_master_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_spool(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t var_t:dir { getattr search };
	allow postfix_master_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin init_use_fds(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin init_sigchld(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_master_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_master_t) depth: 2
 	
	allow postfix_master_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_master_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_master_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_master_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_master_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_master_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_master_t) depth: 2
 	
	allow postfix_master_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_master_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_master_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_master_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_master_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t devlog_t:lnk_file read;
	allow postfix_master_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_master_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_master_t syslogd_t:unix_stream_socket connectto;
	allow postfix_master_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_master_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_master_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_master_t) depth: 4
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_master_t) depth: 3
 	
	allow postfix_master_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_master_t) depth: 2
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_master_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_master_t) depth: 2
 	
	# FIXME: postfix_master_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_master_t) depth: 2
 	
	allow postfix_master_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_master_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_master_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_master_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_master_t) depth: 4
 	
	
	


	allow postfix_master_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_master_t) depth: 3
 	
	allow postfix_master_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_master_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_master_t) depth: 2
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_master_t cert_t:file { read getattr lock ioctl };
	allow postfix_master_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_master_t) depth: 1
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_master_t) depth: 2
 	
	
	


	dontaudit postfix_master_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_master_t) depth: 1
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_master_t) depth: 2
 	
	
	


	dontaudit postfix_master_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_master_t) depth: 1
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_master_t) depth: 2
 	
	
	


	dontaudit postfix_master_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_master_t) depth: 1
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_master_t) depth: 2
 	
	
	


	dontaudit postfix_master_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_master_t) depth: 1
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_master_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_master_t) depth: 2
 	
	allow postfix_master_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_master_t) depth: 1
 	
	
	

 	 	 	 	
##### end postfix_domain_template(master) depth: 0
 	
typealias postfix_master_t alias postfix_t;
# alias is a hack to make the disable trans bool
# generation macro work
 	 	 	 	
##### begin mta_mailserver(postfix_t,postfix_master_exec_t) depth: 1
 	
	
	


	# For when the user wants to send mail via port 25 localhost
	 	 	 	 	
##### begin kernel_tcp_recvfrom(postfix_t) depth: 2
 	
	
	


	allow postfix_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(postfix_t) depth: 1
 	

	 	 	 	 	
##### begin init_daemon_domain(postfix_t,postfix_master_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin domain_type(postfix_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_t self:dir { read getattr lock search ioctl };
	allow postfix_t self:lnk_file { read getattr lock ioctl };
	allow postfix_t self:file { getattr read write append ioctl lock };

	# allow postfix_t to create child processes in this domain
	allow postfix_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_t;
		role sysadm_r types postfix_t;
		role user_r types postfix_t;
		role staff_r types postfix_t;
	

	 	 	 	
##### end domain_base_type(postfix_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_t) depth: 4
 	
	
	


	allow postfix_t device_t:dir { read getattr lock search ioctl };
	allow postfix_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_t) depth: 4
 	
	
	


	allow postfix_t device_t:dir { read getattr lock search ioctl };
	allow postfix_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_t) depth: 5
 	
	
	


	allow postfix_t device_t:dir { read getattr lock search ioctl };
	allow postfix_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_t) depth: 4
 	
	allow postfix_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_t) depth: 4
 	
	
	


	allow postfix_t root_t:dir { read getattr lock search ioctl };
	allow postfix_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_t) depth: 4
 	
	
	


	allow postfix_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_t) depth: 4
 	
	
	


	allow postfix_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_t) depth: 4
 	
	
	


	allow postfix_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_t) depth: 4
 	
	
	


	allow postfix_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_t) depth: 4
 	
	
	


	dontaudit postfix_t security_t:dir search;
	dontaudit postfix_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_t) depth: 4
 	
	
	


	dontaudit postfix_t selinux_config_t:dir search;
	dontaudit postfix_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_t,postfix_master_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_master_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_master_exec_t) depth: 5
 	
	
	


	allow postfix_master_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_master_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_master_exec_t) depth: 5
 	
	
	


	allow postfix_master_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_master_exec_t) depth: 4
 	
	typeattribute postfix_master_exec_t file_type;

	 	 	 	
##### end files_type(postfix_master_exec_t) depth: 3
 	

	allow postfix_t postfix_master_exec_t:file entrypoint;
	allow postfix_t postfix_master_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_master_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_t,postfix_master_exec_t) depth: 2
 	

	role system_r types postfix_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool postfix_disable_trans false;
			
		
		if(postfix_disable_trans ) {
			
	
	


	allow initrc_t postfix_master_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init postfix_master_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,postfix_master_exec_t,postfix_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,postfix_master_exec_t,postfix_t) depth: 4
 	
	allow initrc_t postfix_master_exec_t:file { getattr read execute };
	allow initrc_t postfix_t:process transition;
	dontaudit initrc_t postfix_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,postfix_master_exec_t,postfix_t) depth: 3
 	
	type_transition initrc_t postfix_master_exec_t:process postfix_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,postfix_master_exec_t,postfix_t) depth: 2
 	
			allow initrc_t postfix_t:fd use;
			allow postfix_t initrc_t:fd use;
			allow postfix_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow postfix_t initrc_t:process sigchld;
			allow initrc_t postfix_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow postfix_t postfix_master_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(postfix_t,postfix_master_exec_t) depth: 1
 	
	typeattribute postfix_t mailserver_domain;

	 	 	 	
##### end mta_mailserver(postfix_t,postfix_master_exec_t) depth: 0
 	

 	 	 	 	
##### begin postfix_public_domain_template(pickup) depth: 1
 	
	 	 	 	 	
##### begin postfix_server_domain_template(pickup) depth: 2
 	
	 	 	 	 	
##### begin postfix_domain_template(pickup) depth: 3
 	
	type postfix_pickup_t;
	type postfix_pickup_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_pickup_t) depth: 4
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_pickup_t) depth: 5
 	
	
	


	# mark as a domain
	typeattribute postfix_pickup_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_pickup_t self:dir { read getattr lock search ioctl };
	allow postfix_pickup_t self:lnk_file { read getattr lock ioctl };
	allow postfix_pickup_t self:file { getattr read write append ioctl lock };

	# allow postfix_pickup_t to create child processes in this domain
	allow postfix_pickup_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_pickup_t;
		role sysadm_r types postfix_pickup_t;
		role user_r types postfix_pickup_t;
		role staff_r types postfix_pickup_t;
	

	 	 	 	
##### end domain_base_type(postfix_pickup_t) depth: 4
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_pickup_t) depth: 4
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_pickup_t) depth: 4
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_pickup_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_pickup_t) depth: 6
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_pickup_t) depth: 5
 	
	allow postfix_pickup_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_pickup_t) depth: 4
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t root_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_pickup_t) depth: 4
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_pickup_t) depth: 4
 	
	 	 	 	 	
##### begin init_signull(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_pickup_t) depth: 4
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_pickup_t) depth: 4
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_pickup_t) depth: 4
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_pickup_t) depth: 5
 	
	
	


	dontaudit postfix_pickup_t security_t:dir search;
	dontaudit postfix_pickup_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_pickup_t) depth: 4
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_pickup_t) depth: 5
 	
	
	


	dontaudit postfix_pickup_t selinux_config_t:dir search;
	dontaudit postfix_pickup_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_pickup_t) depth: 4
 	
	
	


	 	 	 	
##### end domain_type(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_pickup_t,postfix_pickup_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_pickup_exec_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_pickup_exec_t) depth: 6
 	
	
	


	allow postfix_pickup_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_pickup_exec_t) depth: 5
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_pickup_exec_t) depth: 6
 	
	
	


	allow postfix_pickup_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_pickup_exec_t) depth: 5
 	
	typeattribute postfix_pickup_exec_t file_type;

	 	 	 	
##### end files_type(postfix_pickup_exec_t) depth: 4
 	

	allow postfix_pickup_t postfix_pickup_exec_t:file entrypoint;
	allow postfix_pickup_t postfix_pickup_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_pickup_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_pickup_t,postfix_pickup_exec_t) depth: 3
 	
	role system_r types postfix_pickup_t;

	dontaudit postfix_pickup_t self:capability sys_tty_config;
	allow postfix_pickup_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_pickup_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_pickup_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_pickup_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_pickup_t:process signal;

	allow postfix_pickup_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_pickup_t postfix_pickup_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_pickup_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_pickup_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_pickup_t postfix_master_t:process sigchld;

	allow postfix_pickup_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_pickup_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_pickup_t,postfix_var_run_t,file) depth: 4
 	
	
	


	allow postfix_pickup_t var_t:dir { getattr search };
	allow postfix_pickup_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_pickup_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_pickup_t,postfix_var_run_t,file) depth: 3
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t proc_t:lnk_file { getattr read };
	allow postfix_pickup_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t proc_t:dir search;
	allow postfix_pickup_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_pickup_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_pickup_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_pickup_t { proc_t proc_net_t }:dir search;

	allow postfix_pickup_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_pickup_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_pickup_t) depth: 4
 	
	
	


	dontaudit postfix_pickup_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t bin_t:dir search;
	allow postfix_pickup_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t sbin_t:dir search;
	allow postfix_pickup_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_pickup_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t etc_t:file { read getattr lock ioctl };
	allow postfix_pickup_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_pickup_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t usr_t:dir search;
	allow postfix_pickup_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin files_search_spool(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t var_t:dir { getattr search };
	allow postfix_pickup_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin init_use_fds(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin init_sigchld(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_pickup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_pickup_t) depth: 4
 	
	allow postfix_pickup_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_pickup_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_pickup_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_pickup_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_pickup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_pickup_t) depth: 4
 	
	allow postfix_pickup_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_pickup_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_pickup_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_pickup_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t devlog_t:lnk_file read;
	allow postfix_pickup_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_pickup_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_pickup_t syslogd_t:unix_stream_socket connectto;
	allow postfix_pickup_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_pickup_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_pickup_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_pickup_t) depth: 6
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_pickup_t) depth: 5
 	
	allow postfix_pickup_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_pickup_t) depth: 4
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_pickup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_pickup_t) depth: 4
 	
	# FIXME: postfix_pickup_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_pickup_t) depth: 4
 	
	allow postfix_pickup_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_pickup_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_pickup_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_pickup_t) depth: 6
 	
	
	


	allow postfix_pickup_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_pickup_t) depth: 5
 	
	allow postfix_pickup_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_pickup_t) depth: 4
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t cert_t:file { read getattr lock ioctl };
	allow postfix_pickup_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_pickup_t) depth: 3
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_pickup_t) depth: 4
 	
	
	


	dontaudit postfix_pickup_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_pickup_t) depth: 3
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_pickup_t) depth: 4
 	
	
	


	dontaudit postfix_pickup_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_pickup_t) depth: 3
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_pickup_t) depth: 4
 	
	
	


	dontaudit postfix_pickup_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_pickup_t) depth: 3
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_pickup_t) depth: 4
 	
	
	


	dontaudit postfix_pickup_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_pickup_t) depth: 3
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_pickup_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_pickup_t) depth: 5
 	
	
	


	allow postfix_pickup_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pickup_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_pickup_t) depth: 4
 	
	allow postfix_pickup_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_pickup_t) depth: 3
 	
	
	

 	 	 	 	
##### end postfix_domain_template(pickup) depth: 2
 	

	allow postfix_pickup_t self:capability { setuid setgid dac_override };
	allow postfix_pickup_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_pickup_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_pickup_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_pickup_exec_t,postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_pickup_exec_t,postfix_pickup_t) depth: 4
 	
	allow postfix_master_t postfix_pickup_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_pickup_t:process transition;
	dontaudit postfix_master_t postfix_pickup_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_pickup_exec_t,postfix_pickup_t) depth: 3
 	
	type_transition postfix_master_t postfix_pickup_exec_t:process postfix_pickup_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_pickup_exec_t,postfix_pickup_t) depth: 2
 	
	allow postfix_master_t postfix_pickup_t:fd use;
	allow postfix_pickup_t postfix_master_t:fd use;
	allow postfix_pickup_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_pickup_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_pickup_t) depth: 3
 	
	
	


	allow postfix_pickup_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_pickup_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_pickup_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_pickup_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_pickup_t) depth: 3
 	
	
	


	allow postfix_pickup_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_pickup_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_pickup_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_pickup_t) depth: 3
 	
	
	


	allow postfix_pickup_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_pickup_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_pickup_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_pickup_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_pickup_t) depth: 3
 	
	
	


	allow postfix_pickup_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_pickup_t) depth: 3
 	
	
	


	allow postfix_pickup_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_pickup_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_pickup_t) depth: 3
 	
	
	


	allow postfix_pickup_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_pickup_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_pickup_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_pickup_t) depth: 4
 	
	
	


	allow postfix_pickup_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_pickup_t) depth: 3
 	
	allow postfix_pickup_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_pickup_t) depth: 2
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(pickup) depth: 1
 	

	allow postfix_pickup_t postfix_public_t:dir search;
 	 	 	 	
##### end postfix_public_domain_template(pickup) depth: 0
 	

 	 	 	 	
##### begin postfix_public_domain_template(pipe) depth: 1
 	
	 	 	 	 	
##### begin postfix_server_domain_template(pipe) depth: 2
 	
	 	 	 	 	
##### begin postfix_domain_template(pipe) depth: 3
 	
	type postfix_pipe_t;
	type postfix_pipe_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_pipe_t) depth: 4
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_pipe_t) depth: 5
 	
	
	


	# mark as a domain
	typeattribute postfix_pipe_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_pipe_t self:dir { read getattr lock search ioctl };
	allow postfix_pipe_t self:lnk_file { read getattr lock ioctl };
	allow postfix_pipe_t self:file { getattr read write append ioctl lock };

	# allow postfix_pipe_t to create child processes in this domain
	allow postfix_pipe_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_pipe_t;
		role sysadm_r types postfix_pipe_t;
		role user_r types postfix_pipe_t;
		role staff_r types postfix_pipe_t;
	

	 	 	 	
##### end domain_base_type(postfix_pipe_t) depth: 4
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_pipe_t) depth: 4
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_pipe_t) depth: 4
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_pipe_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_pipe_t) depth: 6
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_pipe_t) depth: 5
 	
	allow postfix_pipe_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_pipe_t) depth: 4
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t root_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_pipe_t) depth: 4
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_pipe_t) depth: 4
 	
	 	 	 	 	
##### begin init_signull(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_pipe_t) depth: 4
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_pipe_t) depth: 4
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_pipe_t) depth: 4
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_pipe_t) depth: 5
 	
	
	


	dontaudit postfix_pipe_t security_t:dir search;
	dontaudit postfix_pipe_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_pipe_t) depth: 4
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_pipe_t) depth: 5
 	
	
	


	dontaudit postfix_pipe_t selinux_config_t:dir search;
	dontaudit postfix_pipe_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_pipe_t) depth: 4
 	
	
	


	 	 	 	
##### end domain_type(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_pipe_t,postfix_pipe_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_pipe_exec_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_pipe_exec_t) depth: 6
 	
	
	


	allow postfix_pipe_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_pipe_exec_t) depth: 5
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_pipe_exec_t) depth: 6
 	
	
	


	allow postfix_pipe_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_pipe_exec_t) depth: 5
 	
	typeattribute postfix_pipe_exec_t file_type;

	 	 	 	
##### end files_type(postfix_pipe_exec_t) depth: 4
 	

	allow postfix_pipe_t postfix_pipe_exec_t:file entrypoint;
	allow postfix_pipe_t postfix_pipe_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_pipe_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_pipe_t,postfix_pipe_exec_t) depth: 3
 	
	role system_r types postfix_pipe_t;

	dontaudit postfix_pipe_t self:capability sys_tty_config;
	allow postfix_pipe_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_pipe_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_pipe_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_pipe_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_pipe_t:process signal;

	allow postfix_pipe_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_pipe_t postfix_pipe_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_pipe_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_pipe_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_pipe_t postfix_master_t:process sigchld;

	allow postfix_pipe_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_pipe_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_pipe_t,postfix_var_run_t,file) depth: 4
 	
	
	


	allow postfix_pipe_t var_t:dir { getattr search };
	allow postfix_pipe_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_pipe_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_pipe_t,postfix_var_run_t,file) depth: 3
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t proc_t:lnk_file { getattr read };
	allow postfix_pipe_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t proc_t:dir search;
	allow postfix_pipe_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_pipe_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_pipe_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_pipe_t { proc_t proc_net_t }:dir search;

	allow postfix_pipe_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_pipe_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_pipe_t) depth: 4
 	
	
	


	dontaudit postfix_pipe_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t bin_t:dir search;
	allow postfix_pipe_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t sbin_t:dir search;
	allow postfix_pipe_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_pipe_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t etc_t:file { read getattr lock ioctl };
	allow postfix_pipe_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_pipe_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t usr_t:dir search;
	allow postfix_pipe_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin files_search_spool(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t var_t:dir { getattr search };
	allow postfix_pipe_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin init_use_fds(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin init_sigchld(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_pipe_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_pipe_t) depth: 4
 	
	allow postfix_pipe_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_pipe_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_pipe_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_pipe_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_pipe_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_pipe_t) depth: 4
 	
	allow postfix_pipe_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_pipe_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_pipe_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_pipe_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t devlog_t:lnk_file read;
	allow postfix_pipe_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_pipe_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_pipe_t syslogd_t:unix_stream_socket connectto;
	allow postfix_pipe_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_pipe_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_pipe_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_pipe_t) depth: 6
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_pipe_t) depth: 5
 	
	allow postfix_pipe_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_pipe_t) depth: 4
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_pipe_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_pipe_t) depth: 4
 	
	# FIXME: postfix_pipe_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_pipe_t) depth: 4
 	
	allow postfix_pipe_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_pipe_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_pipe_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_pipe_t) depth: 6
 	
	
	


	allow postfix_pipe_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_pipe_t) depth: 5
 	
	allow postfix_pipe_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_pipe_t) depth: 4
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t cert_t:file { read getattr lock ioctl };
	allow postfix_pipe_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_pipe_t) depth: 3
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_pipe_t) depth: 4
 	
	
	


	dontaudit postfix_pipe_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_pipe_t) depth: 3
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_pipe_t) depth: 4
 	
	
	


	dontaudit postfix_pipe_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_pipe_t) depth: 3
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_pipe_t) depth: 4
 	
	
	


	dontaudit postfix_pipe_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_pipe_t) depth: 3
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_pipe_t) depth: 4
 	
	
	


	dontaudit postfix_pipe_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_pipe_t) depth: 3
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_pipe_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_pipe_t) depth: 5
 	
	
	


	allow postfix_pipe_t device_t:dir { read getattr lock search ioctl };
	allow postfix_pipe_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_pipe_t) depth: 4
 	
	allow postfix_pipe_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_pipe_t) depth: 3
 	
	
	

 	 	 	 	
##### end postfix_domain_template(pipe) depth: 2
 	

	allow postfix_pipe_t self:capability { setuid setgid dac_override };
	allow postfix_pipe_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_pipe_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_pipe_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_pipe_exec_t,postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_pipe_exec_t,postfix_pipe_t) depth: 4
 	
	allow postfix_master_t postfix_pipe_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_pipe_t:process transition;
	dontaudit postfix_master_t postfix_pipe_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_pipe_exec_t,postfix_pipe_t) depth: 3
 	
	type_transition postfix_master_t postfix_pipe_exec_t:process postfix_pipe_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_pipe_exec_t,postfix_pipe_t) depth: 2
 	
	allow postfix_master_t postfix_pipe_t:fd use;
	allow postfix_pipe_t postfix_master_t:fd use;
	allow postfix_pipe_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_pipe_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_pipe_t) depth: 3
 	
	
	


	allow postfix_pipe_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_pipe_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_pipe_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_pipe_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_pipe_t) depth: 3
 	
	
	


	allow postfix_pipe_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_pipe_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_pipe_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_pipe_t) depth: 3
 	
	
	


	allow postfix_pipe_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_pipe_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_pipe_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_pipe_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_pipe_t) depth: 3
 	
	
	


	allow postfix_pipe_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_pipe_t) depth: 3
 	
	
	


	allow postfix_pipe_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_pipe_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_pipe_t) depth: 3
 	
	
	


	allow postfix_pipe_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_pipe_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_pipe_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_pipe_t) depth: 4
 	
	
	


	allow postfix_pipe_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_pipe_t) depth: 3
 	
	allow postfix_pipe_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_pipe_t) depth: 2
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(pipe) depth: 1
 	

	allow postfix_pipe_t postfix_public_t:dir search;
 	 	 	 	
##### end postfix_public_domain_template(pipe) depth: 0
 	

 	 	 	 	
##### begin postfix_user_domain_template(postdrop) depth: 1
 	
	
	


	 	 	 	 	
##### begin postfix_domain_template(postdrop) depth: 2
 	
	type postfix_postdrop_t;
	type postfix_postdrop_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_postdrop_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_postdrop_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_postdrop_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_postdrop_t self:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t self:lnk_file { read getattr lock ioctl };
	allow postfix_postdrop_t self:file { getattr read write append ioctl lock };

	# allow postfix_postdrop_t to create child processes in this domain
	allow postfix_postdrop_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_postdrop_t;
		role sysadm_r types postfix_postdrop_t;
		role user_r types postfix_postdrop_t;
		role staff_r types postfix_postdrop_t;
	

	 	 	 	
##### end domain_base_type(postfix_postdrop_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_postdrop_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_postdrop_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_postdrop_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postdrop_t) depth: 5
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postdrop_t) depth: 4
 	
	allow postfix_postdrop_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_postdrop_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t root_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_postdrop_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_postdrop_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_postdrop_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_postdrop_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_postdrop_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_postdrop_t) depth: 4
 	
	
	


	dontaudit postfix_postdrop_t security_t:dir search;
	dontaudit postfix_postdrop_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_postdrop_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_postdrop_t) depth: 4
 	
	
	


	dontaudit postfix_postdrop_t selinux_config_t:dir search;
	dontaudit postfix_postdrop_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_postdrop_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_postdrop_t,postfix_postdrop_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_postdrop_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_postdrop_exec_t) depth: 5
 	
	
	


	allow postfix_postdrop_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_postdrop_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_postdrop_exec_t) depth: 5
 	
	
	


	allow postfix_postdrop_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_postdrop_exec_t) depth: 4
 	
	typeattribute postfix_postdrop_exec_t file_type;

	 	 	 	
##### end files_type(postfix_postdrop_exec_t) depth: 3
 	

	allow postfix_postdrop_t postfix_postdrop_exec_t:file entrypoint;
	allow postfix_postdrop_t postfix_postdrop_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_postdrop_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_postdrop_t,postfix_postdrop_exec_t) depth: 2
 	
	role system_r types postfix_postdrop_t;

	dontaudit postfix_postdrop_t self:capability sys_tty_config;
	allow postfix_postdrop_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_postdrop_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_postdrop_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_postdrop_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_postdrop_t:process signal;

	allow postfix_postdrop_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_postdrop_t postfix_postdrop_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_postdrop_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_postdrop_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_postdrop_t postfix_master_t:process sigchld;

	allow postfix_postdrop_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_postdrop_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_postdrop_t,postfix_var_run_t,file) depth: 3
 	
	
	


	allow postfix_postdrop_t var_t:dir { getattr search };
	allow postfix_postdrop_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_postdrop_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_postdrop_t,postfix_var_run_t,file) depth: 2
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t proc_t:lnk_file { getattr read };
	allow postfix_postdrop_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t proc_t:dir search;
	allow postfix_postdrop_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_postdrop_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_postdrop_t) depth: 3
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_postdrop_t { proc_t proc_net_t }:dir search;

	allow postfix_postdrop_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_postdrop_t) depth: 3
 	
	
	


	dontaudit postfix_postdrop_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t bin_t:dir search;
	allow postfix_postdrop_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t sbin_t:dir search;
	allow postfix_postdrop_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_postdrop_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t etc_t:file { read getattr lock ioctl };
	allow postfix_postdrop_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_postdrop_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t usr_t:dir search;
	allow postfix_postdrop_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin files_search_spool(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t var_t:dir { getattr search };
	allow postfix_postdrop_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin init_use_fds(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin init_sigchld(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_postdrop_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_postdrop_t) depth: 3
 	
	allow postfix_postdrop_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_postdrop_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_postdrop_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_postdrop_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_postdrop_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_postdrop_t) depth: 3
 	
	allow postfix_postdrop_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_postdrop_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_postdrop_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_postdrop_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t devlog_t:lnk_file read;
	allow postfix_postdrop_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_postdrop_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_postdrop_t syslogd_t:unix_stream_socket connectto;
	allow postfix_postdrop_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_postdrop_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_postdrop_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postdrop_t) depth: 5
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postdrop_t) depth: 4
 	
	allow postfix_postdrop_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_postdrop_t) depth: 3
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_postdrop_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_postdrop_t) depth: 3
 	
	# FIXME: postfix_postdrop_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_postdrop_t) depth: 3
 	
	allow postfix_postdrop_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_postdrop_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_postdrop_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_postdrop_t) depth: 5
 	
	
	


	allow postfix_postdrop_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_postdrop_t) depth: 4
 	
	allow postfix_postdrop_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_postdrop_t) depth: 3
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t cert_t:file { read getattr lock ioctl };
	allow postfix_postdrop_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_postdrop_t) depth: 2
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_postdrop_t) depth: 3
 	
	
	


	dontaudit postfix_postdrop_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_postdrop_t) depth: 2
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_postdrop_t) depth: 3
 	
	
	


	dontaudit postfix_postdrop_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_postdrop_t) depth: 2
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_postdrop_t) depth: 3
 	
	
	


	dontaudit postfix_postdrop_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_postdrop_t) depth: 2
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_postdrop_t) depth: 3
 	
	
	


	dontaudit postfix_postdrop_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_postdrop_t) depth: 2
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_postdrop_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postdrop_t) depth: 4
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postdrop_t) depth: 3
 	
	allow postfix_postdrop_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_postdrop_t) depth: 2
 	
	
	

 	 	 	 	
##### end postfix_domain_template(postdrop) depth: 1
 	

	typeattribute postfix_postdrop_t postfix_user_domains;

	allow postfix_postdrop_t self:capability dac_override;

	 	 	 	 	
##### begin domain_auto_trans(postfix_user_domtrans,postfix_postdrop_exec_t,postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(postfix_user_domtrans,postfix_postdrop_exec_t,postfix_postdrop_t) depth: 3
 	
	allow postfix_user_domtrans postfix_postdrop_exec_t:file { getattr read execute };
	allow postfix_user_domtrans postfix_postdrop_t:process transition;
	dontaudit postfix_user_domtrans postfix_postdrop_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_user_domtrans,postfix_postdrop_exec_t,postfix_postdrop_t) depth: 2
 	
	type_transition postfix_user_domtrans postfix_postdrop_exec_t:process postfix_postdrop_t;
 	 	 	 	
##### end domain_auto_trans(postfix_user_domtrans,postfix_postdrop_exec_t,postfix_postdrop_t) depth: 1
 	
	allow postfix_user_domtrans postfix_postdrop_t:fd use;
	allow postfix_postdrop_t postfix_user_domtrans:fd use;
	allow postfix_postdrop_t postfix_user_domtrans:fifo_file { getattr read write append ioctl lock };
	allow postfix_postdrop_t postfix_user_domtrans:process sigchld;

	 	 	 	 	
##### begin domain_use_interactive_fds(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(postfix_postdrop_t) depth: 1
 	
 	 	 	 	
##### end postfix_user_domain_template(postdrop) depth: 0
 	
 	 	 	 	
##### begin mta_mailserver_user_agent(postfix_postdrop_t) depth: 1
 	
	
	


	typeattribute postfix_postdrop_t mta_user_agent;

	
	
		
	


	 	 	 	
##### end mta_mailserver_user_agent(postfix_postdrop_t) depth: 0
 	

 	 	 	 	
##### begin postfix_user_domain_template(postqueue) depth: 1
 	
	
	


	 	 	 	 	
##### begin postfix_domain_template(postqueue) depth: 2
 	
	type postfix_postqueue_t;
	type postfix_postqueue_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_postqueue_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_postqueue_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_postqueue_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_postqueue_t self:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t self:lnk_file { read getattr lock ioctl };
	allow postfix_postqueue_t self:file { getattr read write append ioctl lock };

	# allow postfix_postqueue_t to create child processes in this domain
	allow postfix_postqueue_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_postqueue_t;
		role sysadm_r types postfix_postqueue_t;
		role user_r types postfix_postqueue_t;
		role staff_r types postfix_postqueue_t;
	

	 	 	 	
##### end domain_base_type(postfix_postqueue_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_postqueue_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_postqueue_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_postqueue_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postqueue_t) depth: 5
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postqueue_t) depth: 4
 	
	allow postfix_postqueue_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_postqueue_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t root_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_postqueue_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_postqueue_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_postqueue_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_postqueue_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_postqueue_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_postqueue_t) depth: 4
 	
	
	


	dontaudit postfix_postqueue_t security_t:dir search;
	dontaudit postfix_postqueue_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_postqueue_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_postqueue_t) depth: 4
 	
	
	


	dontaudit postfix_postqueue_t selinux_config_t:dir search;
	dontaudit postfix_postqueue_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_postqueue_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_postqueue_t,postfix_postqueue_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_postqueue_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_postqueue_exec_t) depth: 5
 	
	
	


	allow postfix_postqueue_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_postqueue_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_postqueue_exec_t) depth: 5
 	
	
	


	allow postfix_postqueue_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_postqueue_exec_t) depth: 4
 	
	typeattribute postfix_postqueue_exec_t file_type;

	 	 	 	
##### end files_type(postfix_postqueue_exec_t) depth: 3
 	

	allow postfix_postqueue_t postfix_postqueue_exec_t:file entrypoint;
	allow postfix_postqueue_t postfix_postqueue_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_postqueue_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_postqueue_t,postfix_postqueue_exec_t) depth: 2
 	
	role system_r types postfix_postqueue_t;

	dontaudit postfix_postqueue_t self:capability sys_tty_config;
	allow postfix_postqueue_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_postqueue_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_postqueue_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_postqueue_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_postqueue_t:process signal;

	allow postfix_postqueue_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_postqueue_t postfix_postqueue_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_postqueue_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_postqueue_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_postqueue_t postfix_master_t:process sigchld;

	allow postfix_postqueue_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_postqueue_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_postqueue_t,postfix_var_run_t,file) depth: 3
 	
	
	


	allow postfix_postqueue_t var_t:dir { getattr search };
	allow postfix_postqueue_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_postqueue_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_postqueue_t,postfix_var_run_t,file) depth: 2
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t proc_t:lnk_file { getattr read };
	allow postfix_postqueue_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t proc_t:dir search;
	allow postfix_postqueue_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_postqueue_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_postqueue_t) depth: 3
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_postqueue_t { proc_t proc_net_t }:dir search;

	allow postfix_postqueue_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_postqueue_t) depth: 3
 	
	
	


	dontaudit postfix_postqueue_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t bin_t:dir search;
	allow postfix_postqueue_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t sbin_t:dir search;
	allow postfix_postqueue_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_postqueue_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t etc_t:file { read getattr lock ioctl };
	allow postfix_postqueue_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_postqueue_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t usr_t:dir search;
	allow postfix_postqueue_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin files_search_spool(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t var_t:dir { getattr search };
	allow postfix_postqueue_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin init_use_fds(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin init_sigchld(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_postqueue_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_postqueue_t) depth: 3
 	
	allow postfix_postqueue_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_postqueue_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_postqueue_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_postqueue_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_postqueue_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_postqueue_t) depth: 3
 	
	allow postfix_postqueue_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_postqueue_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_postqueue_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_postqueue_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t devlog_t:lnk_file read;
	allow postfix_postqueue_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_postqueue_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_postqueue_t syslogd_t:unix_stream_socket connectto;
	allow postfix_postqueue_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_postqueue_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_postqueue_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postqueue_t) depth: 5
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postqueue_t) depth: 4
 	
	allow postfix_postqueue_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_postqueue_t) depth: 3
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_postqueue_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_postqueue_t) depth: 3
 	
	# FIXME: postfix_postqueue_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_postqueue_t) depth: 3
 	
	allow postfix_postqueue_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_postqueue_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_postqueue_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_postqueue_t) depth: 5
 	
	
	


	allow postfix_postqueue_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_postqueue_t) depth: 4
 	
	allow postfix_postqueue_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_postqueue_t) depth: 3
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_postqueue_t) depth: 3
 	
	
	


	allow postfix_postqueue_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t cert_t:file { read getattr lock ioctl };
	allow postfix_postqueue_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_postqueue_t) depth: 2
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_postqueue_t) depth: 3
 	
	
	


	dontaudit postfix_postqueue_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_postqueue_t) depth: 2
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_postqueue_t) depth: 3
 	
	
	


	dontaudit postfix_postqueue_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_postqueue_t) depth: 2
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_postqueue_t) depth: 3
 	
	
	


	dontaudit postfix_postqueue_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_postqueue_t) depth: 2
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_postqueue_t) depth: 3
 	
	
	


	dontaudit postfix_postqueue_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_postqueue_t) depth: 2
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_postqueue_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postqueue_t) depth: 4
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postqueue_t) depth: 3
 	
	allow postfix_postqueue_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_postqueue_t) depth: 2
 	
	
	

 	 	 	 	
##### end postfix_domain_template(postqueue) depth: 1
 	

	typeattribute postfix_postqueue_t postfix_user_domains;

	allow postfix_postqueue_t self:capability dac_override;

	 	 	 	 	
##### begin domain_auto_trans(postfix_user_domtrans,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(postfix_user_domtrans,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 3
 	
	allow postfix_user_domtrans postfix_postqueue_exec_t:file { getattr read execute };
	allow postfix_user_domtrans postfix_postqueue_t:process transition;
	dontaudit postfix_user_domtrans postfix_postqueue_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_user_domtrans,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 2
 	
	type_transition postfix_user_domtrans postfix_postqueue_exec_t:process postfix_postqueue_t;
 	 	 	 	
##### end domain_auto_trans(postfix_user_domtrans,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 1
 	
	allow postfix_user_domtrans postfix_postqueue_t:fd use;
	allow postfix_postqueue_t postfix_user_domtrans:fd use;
	allow postfix_postqueue_t postfix_user_domtrans:fifo_file { getattr read write append ioctl lock };
	allow postfix_postqueue_t postfix_user_domtrans:process sigchld;

	 	 	 	 	
##### begin domain_use_interactive_fds(postfix_postqueue_t) depth: 2
 	
	
	


	allow postfix_postqueue_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(postfix_postqueue_t) depth: 1
 	
 	 	 	 	
##### end postfix_user_domain_template(postqueue) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_private_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_private_t) depth: 2
 	
	
	


	allow postfix_private_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_private_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_private_t) depth: 2
 	
	
	


	allow postfix_private_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_private_t) depth: 1
 	
	typeattribute postfix_private_t file_type;

	 	 	 	
##### end files_type(postfix_private_t) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_prng_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_prng_t) depth: 2
 	
	
	


	allow postfix_prng_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_prng_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_prng_t) depth: 2
 	
	
	


	allow postfix_prng_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_prng_t) depth: 1
 	
	typeattribute postfix_prng_t file_type;

	 	 	 	
##### end files_type(postfix_prng_t) depth: 0
 	

 	 	 	 	
##### begin postfix_public_domain_template(qmgr) depth: 1
 	
	 	 	 	 	
##### begin postfix_server_domain_template(qmgr) depth: 2
 	
	 	 	 	 	
##### begin postfix_domain_template(qmgr) depth: 3
 	
	type postfix_qmgr_t;
	type postfix_qmgr_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_qmgr_t) depth: 4
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_qmgr_t) depth: 5
 	
	
	


	# mark as a domain
	typeattribute postfix_qmgr_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_qmgr_t self:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t self:lnk_file { read getattr lock ioctl };
	allow postfix_qmgr_t self:file { getattr read write append ioctl lock };

	# allow postfix_qmgr_t to create child processes in this domain
	allow postfix_qmgr_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_qmgr_t;
		role sysadm_r types postfix_qmgr_t;
		role user_r types postfix_qmgr_t;
		role staff_r types postfix_qmgr_t;
	

	 	 	 	
##### end domain_base_type(postfix_qmgr_t) depth: 4
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_qmgr_t) depth: 4
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_qmgr_t) depth: 4
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_qmgr_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_qmgr_t) depth: 6
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_qmgr_t) depth: 5
 	
	allow postfix_qmgr_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_qmgr_t) depth: 4
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t root_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_qmgr_t) depth: 4
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_qmgr_t) depth: 4
 	
	 	 	 	 	
##### begin init_signull(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_qmgr_t) depth: 4
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_qmgr_t) depth: 4
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_qmgr_t) depth: 4
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_qmgr_t) depth: 5
 	
	
	


	dontaudit postfix_qmgr_t security_t:dir search;
	dontaudit postfix_qmgr_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_qmgr_t) depth: 4
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_qmgr_t) depth: 5
 	
	
	


	dontaudit postfix_qmgr_t selinux_config_t:dir search;
	dontaudit postfix_qmgr_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_qmgr_t) depth: 4
 	
	
	


	 	 	 	
##### end domain_type(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_qmgr_t,postfix_qmgr_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_qmgr_exec_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_qmgr_exec_t) depth: 6
 	
	
	


	allow postfix_qmgr_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_qmgr_exec_t) depth: 5
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_qmgr_exec_t) depth: 6
 	
	
	


	allow postfix_qmgr_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_qmgr_exec_t) depth: 5
 	
	typeattribute postfix_qmgr_exec_t file_type;

	 	 	 	
##### end files_type(postfix_qmgr_exec_t) depth: 4
 	

	allow postfix_qmgr_t postfix_qmgr_exec_t:file entrypoint;
	allow postfix_qmgr_t postfix_qmgr_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_qmgr_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_qmgr_t,postfix_qmgr_exec_t) depth: 3
 	
	role system_r types postfix_qmgr_t;

	dontaudit postfix_qmgr_t self:capability sys_tty_config;
	allow postfix_qmgr_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_qmgr_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_qmgr_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_qmgr_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_qmgr_t:process signal;

	allow postfix_qmgr_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_qmgr_t postfix_qmgr_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_qmgr_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_qmgr_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_qmgr_t postfix_master_t:process sigchld;

	allow postfix_qmgr_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_qmgr_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_qmgr_t,postfix_var_run_t,file) depth: 4
 	
	
	


	allow postfix_qmgr_t var_t:dir { getattr search };
	allow postfix_qmgr_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_qmgr_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_qmgr_t,postfix_var_run_t,file) depth: 3
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t proc_t:lnk_file { getattr read };
	allow postfix_qmgr_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t proc_t:dir search;
	allow postfix_qmgr_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_qmgr_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_qmgr_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_qmgr_t { proc_t proc_net_t }:dir search;

	allow postfix_qmgr_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_qmgr_t) depth: 4
 	
	
	


	dontaudit postfix_qmgr_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t bin_t:dir search;
	allow postfix_qmgr_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t sbin_t:dir search;
	allow postfix_qmgr_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_qmgr_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t etc_t:file { read getattr lock ioctl };
	allow postfix_qmgr_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_qmgr_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t usr_t:dir search;
	allow postfix_qmgr_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin files_search_spool(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t var_t:dir { getattr search };
	allow postfix_qmgr_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin init_use_fds(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin init_sigchld(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_qmgr_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_qmgr_t) depth: 4
 	
	allow postfix_qmgr_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_qmgr_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_qmgr_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_qmgr_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_qmgr_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_qmgr_t) depth: 4
 	
	allow postfix_qmgr_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_qmgr_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_qmgr_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_qmgr_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t devlog_t:lnk_file read;
	allow postfix_qmgr_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_qmgr_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_qmgr_t syslogd_t:unix_stream_socket connectto;
	allow postfix_qmgr_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_qmgr_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_qmgr_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_qmgr_t) depth: 6
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_qmgr_t) depth: 5
 	
	allow postfix_qmgr_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_qmgr_t) depth: 4
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_qmgr_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_qmgr_t) depth: 4
 	
	# FIXME: postfix_qmgr_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_qmgr_t) depth: 4
 	
	allow postfix_qmgr_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_qmgr_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_qmgr_t) depth: 5
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_qmgr_t) depth: 6
 	
	
	


	allow postfix_qmgr_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_qmgr_t) depth: 5
 	
	allow postfix_qmgr_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_qmgr_t) depth: 4
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t cert_t:file { read getattr lock ioctl };
	allow postfix_qmgr_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_qmgr_t) depth: 3
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_qmgr_t) depth: 4
 	
	
	


	dontaudit postfix_qmgr_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_qmgr_t) depth: 3
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_qmgr_t) depth: 4
 	
	
	


	dontaudit postfix_qmgr_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_qmgr_t) depth: 3
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_qmgr_t) depth: 4
 	
	
	


	dontaudit postfix_qmgr_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_qmgr_t) depth: 3
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_qmgr_t) depth: 4
 	
	
	


	dontaudit postfix_qmgr_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_qmgr_t) depth: 3
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_qmgr_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_qmgr_t) depth: 5
 	
	
	


	allow postfix_qmgr_t device_t:dir { read getattr lock search ioctl };
	allow postfix_qmgr_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_qmgr_t) depth: 4
 	
	allow postfix_qmgr_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_qmgr_t) depth: 3
 	
	
	

 	 	 	 	
##### end postfix_domain_template(qmgr) depth: 2
 	

	allow postfix_qmgr_t self:capability { setuid setgid dac_override };
	allow postfix_qmgr_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_qmgr_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_qmgr_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_qmgr_exec_t,postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_qmgr_exec_t,postfix_qmgr_t) depth: 4
 	
	allow postfix_master_t postfix_qmgr_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_qmgr_t:process transition;
	dontaudit postfix_master_t postfix_qmgr_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_qmgr_exec_t,postfix_qmgr_t) depth: 3
 	
	type_transition postfix_master_t postfix_qmgr_exec_t:process postfix_qmgr_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_qmgr_exec_t,postfix_qmgr_t) depth: 2
 	
	allow postfix_master_t postfix_qmgr_t:fd use;
	allow postfix_qmgr_t postfix_master_t:fd use;
	allow postfix_qmgr_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_qmgr_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_qmgr_t) depth: 3
 	
	
	


	allow postfix_qmgr_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_qmgr_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_qmgr_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_qmgr_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_qmgr_t) depth: 3
 	
	
	


	allow postfix_qmgr_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_qmgr_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_qmgr_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_qmgr_t) depth: 3
 	
	
	


	allow postfix_qmgr_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_qmgr_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_qmgr_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_qmgr_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_qmgr_t) depth: 3
 	
	
	


	allow postfix_qmgr_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_qmgr_t) depth: 3
 	
	
	


	allow postfix_qmgr_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_qmgr_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_qmgr_t) depth: 3
 	
	
	


	allow postfix_qmgr_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_qmgr_t) depth: 2
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_qmgr_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_qmgr_t) depth: 4
 	
	
	


	allow postfix_qmgr_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_qmgr_t) depth: 3
 	
	allow postfix_qmgr_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_qmgr_t) depth: 2
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(qmgr) depth: 1
 	

	allow postfix_qmgr_t postfix_public_t:dir search;
 	 	 	 	
##### end postfix_public_domain_template(qmgr) depth: 0
 	

 	 	 	 	
##### begin postfix_user_domain_template(showq) depth: 1
 	
	
	


	 	 	 	 	
##### begin postfix_domain_template(showq) depth: 2
 	
	type postfix_showq_t;
	type postfix_showq_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_showq_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_showq_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_showq_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_showq_t self:dir { read getattr lock search ioctl };
	allow postfix_showq_t self:lnk_file { read getattr lock ioctl };
	allow postfix_showq_t self:file { getattr read write append ioctl lock };

	# allow postfix_showq_t to create child processes in this domain
	allow postfix_showq_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_showq_t;
		role sysadm_r types postfix_showq_t;
		role user_r types postfix_showq_t;
		role staff_r types postfix_showq_t;
	

	 	 	 	
##### end domain_base_type(postfix_showq_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_showq_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_showq_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_showq_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_showq_t) depth: 5
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_showq_t) depth: 4
 	
	allow postfix_showq_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_showq_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t root_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_showq_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_showq_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_showq_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_showq_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_showq_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_showq_t) depth: 4
 	
	
	


	dontaudit postfix_showq_t security_t:dir search;
	dontaudit postfix_showq_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_showq_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_showq_t) depth: 4
 	
	
	


	dontaudit postfix_showq_t selinux_config_t:dir search;
	dontaudit postfix_showq_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_showq_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_showq_t,postfix_showq_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_showq_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_showq_exec_t) depth: 5
 	
	
	


	allow postfix_showq_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_showq_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_showq_exec_t) depth: 5
 	
	
	


	allow postfix_showq_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_showq_exec_t) depth: 4
 	
	typeattribute postfix_showq_exec_t file_type;

	 	 	 	
##### end files_type(postfix_showq_exec_t) depth: 3
 	

	allow postfix_showq_t postfix_showq_exec_t:file entrypoint;
	allow postfix_showq_t postfix_showq_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_showq_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_showq_t,postfix_showq_exec_t) depth: 2
 	
	role system_r types postfix_showq_t;

	dontaudit postfix_showq_t self:capability sys_tty_config;
	allow postfix_showq_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_showq_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_showq_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_showq_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_showq_t:process signal;

	allow postfix_showq_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_showq_t postfix_showq_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_showq_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_showq_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_showq_t postfix_master_t:process sigchld;

	allow postfix_showq_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_showq_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_showq_t,postfix_var_run_t,file) depth: 3
 	
	
	


	allow postfix_showq_t var_t:dir { getattr search };
	allow postfix_showq_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_showq_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_showq_t,postfix_var_run_t,file) depth: 2
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t proc_t:lnk_file { getattr read };
	allow postfix_showq_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t proc_t:dir search;
	allow postfix_showq_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_showq_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_showq_t) depth: 3
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_showq_t { proc_t proc_net_t }:dir search;

	allow postfix_showq_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_showq_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_showq_t) depth: 3
 	
	
	


	dontaudit postfix_showq_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t bin_t:dir search;
	allow postfix_showq_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t sbin_t:dir search;
	allow postfix_showq_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_showq_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t etc_t:file { read getattr lock ioctl };
	allow postfix_showq_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_showq_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t usr_t:dir search;
	allow postfix_showq_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin files_search_spool(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t var_t:dir { getattr search };
	allow postfix_showq_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin init_use_fds(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin init_sigchld(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_showq_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_showq_t) depth: 3
 	
	allow postfix_showq_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_showq_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_showq_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_showq_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_showq_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_showq_t) depth: 3
 	
	allow postfix_showq_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_showq_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_showq_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_showq_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t devlog_t:lnk_file read;
	allow postfix_showq_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_showq_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_showq_t syslogd_t:unix_stream_socket connectto;
	allow postfix_showq_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_showq_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_showq_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_showq_t) depth: 5
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_showq_t) depth: 4
 	
	allow postfix_showq_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_showq_t) depth: 3
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_showq_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_showq_t) depth: 3
 	
	# FIXME: postfix_showq_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_showq_t) depth: 3
 	
	allow postfix_showq_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_showq_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_showq_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_showq_t) depth: 5
 	
	
	


	allow postfix_showq_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_showq_t) depth: 4
 	
	allow postfix_showq_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_showq_t) depth: 3
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t cert_t:file { read getattr lock ioctl };
	allow postfix_showq_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_showq_t) depth: 2
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_showq_t) depth: 3
 	
	
	


	dontaudit postfix_showq_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_showq_t) depth: 2
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_showq_t) depth: 3
 	
	
	


	dontaudit postfix_showq_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_showq_t) depth: 2
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_showq_t) depth: 3
 	
	
	


	dontaudit postfix_showq_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_showq_t) depth: 2
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_showq_t) depth: 3
 	
	
	


	dontaudit postfix_showq_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_showq_t) depth: 2
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_showq_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_showq_t) depth: 4
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_showq_t) depth: 3
 	
	allow postfix_showq_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_showq_t) depth: 2
 	
	
	

 	 	 	 	
##### end postfix_domain_template(showq) depth: 1
 	

	typeattribute postfix_showq_t postfix_user_domains;

	allow postfix_showq_t self:capability dac_override;

	 	 	 	 	
##### begin domain_auto_trans(postfix_user_domtrans,postfix_showq_exec_t,postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(postfix_user_domtrans,postfix_showq_exec_t,postfix_showq_t) depth: 3
 	
	allow postfix_user_domtrans postfix_showq_exec_t:file { getattr read execute };
	allow postfix_user_domtrans postfix_showq_t:process transition;
	dontaudit postfix_user_domtrans postfix_showq_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_user_domtrans,postfix_showq_exec_t,postfix_showq_t) depth: 2
 	
	type_transition postfix_user_domtrans postfix_showq_exec_t:process postfix_showq_t;
 	 	 	 	
##### end domain_auto_trans(postfix_user_domtrans,postfix_showq_exec_t,postfix_showq_t) depth: 1
 	
	allow postfix_user_domtrans postfix_showq_t:fd use;
	allow postfix_showq_t postfix_user_domtrans:fd use;
	allow postfix_showq_t postfix_user_domtrans:fifo_file { getattr read write append ioctl lock };
	allow postfix_showq_t postfix_user_domtrans:process sigchld;

	 	 	 	 	
##### begin domain_use_interactive_fds(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(postfix_showq_t) depth: 1
 	
 	 	 	 	
##### end postfix_user_domain_template(showq) depth: 0
 	

 	 	 	 	
##### begin postfix_server_domain_template(smtp) depth: 1
 	
	 	 	 	 	
##### begin postfix_domain_template(smtp) depth: 2
 	
	type postfix_smtp_t;
	type postfix_smtp_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_smtp_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_smtp_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_smtp_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_smtp_t self:dir { read getattr lock search ioctl };
	allow postfix_smtp_t self:lnk_file { read getattr lock ioctl };
	allow postfix_smtp_t self:file { getattr read write append ioctl lock };

	# allow postfix_smtp_t to create child processes in this domain
	allow postfix_smtp_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_smtp_t;
		role sysadm_r types postfix_smtp_t;
		role user_r types postfix_smtp_t;
		role staff_r types postfix_smtp_t;
	

	 	 	 	
##### end domain_base_type(postfix_smtp_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_smtp_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_smtp_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_smtp_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_smtp_t) depth: 5
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_smtp_t) depth: 4
 	
	allow postfix_smtp_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_smtp_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t root_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_smtp_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_smtp_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_smtp_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_smtp_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_smtp_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_smtp_t) depth: 4
 	
	
	


	dontaudit postfix_smtp_t security_t:dir search;
	dontaudit postfix_smtp_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_smtp_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_smtp_t) depth: 4
 	
	
	


	dontaudit postfix_smtp_t selinux_config_t:dir search;
	dontaudit postfix_smtp_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_smtp_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_smtp_t,postfix_smtp_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_smtp_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_smtp_exec_t) depth: 5
 	
	
	


	allow postfix_smtp_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_smtp_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_smtp_exec_t) depth: 5
 	
	
	


	allow postfix_smtp_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_smtp_exec_t) depth: 4
 	
	typeattribute postfix_smtp_exec_t file_type;

	 	 	 	
##### end files_type(postfix_smtp_exec_t) depth: 3
 	

	allow postfix_smtp_t postfix_smtp_exec_t:file entrypoint;
	allow postfix_smtp_t postfix_smtp_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_smtp_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_smtp_t,postfix_smtp_exec_t) depth: 2
 	
	role system_r types postfix_smtp_t;

	dontaudit postfix_smtp_t self:capability sys_tty_config;
	allow postfix_smtp_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_smtp_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_smtp_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_smtp_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_smtp_t:process signal;

	allow postfix_smtp_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_smtp_t postfix_smtp_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_smtp_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_smtp_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_smtp_t postfix_master_t:process sigchld;

	allow postfix_smtp_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_smtp_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_smtp_t,postfix_var_run_t,file) depth: 3
 	
	
	


	allow postfix_smtp_t var_t:dir { getattr search };
	allow postfix_smtp_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_smtp_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_smtp_t,postfix_var_run_t,file) depth: 2
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t proc_t:lnk_file { getattr read };
	allow postfix_smtp_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t proc_t:dir search;
	allow postfix_smtp_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_smtp_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_smtp_t) depth: 3
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_smtp_t { proc_t proc_net_t }:dir search;

	allow postfix_smtp_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_smtp_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_smtp_t) depth: 3
 	
	
	


	dontaudit postfix_smtp_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t bin_t:dir search;
	allow postfix_smtp_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t sbin_t:dir search;
	allow postfix_smtp_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_smtp_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t etc_t:file { read getattr lock ioctl };
	allow postfix_smtp_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_smtp_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t usr_t:dir search;
	allow postfix_smtp_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin files_search_spool(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t var_t:dir { getattr search };
	allow postfix_smtp_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin init_use_fds(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin init_sigchld(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_smtp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_smtp_t) depth: 3
 	
	allow postfix_smtp_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtp_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtp_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_smtp_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_smtp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_smtp_t) depth: 3
 	
	allow postfix_smtp_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtp_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_smtp_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_smtp_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t devlog_t:lnk_file read;
	allow postfix_smtp_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_smtp_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_smtp_t syslogd_t:unix_stream_socket connectto;
	allow postfix_smtp_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_smtp_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_smtp_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_smtp_t) depth: 5
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_smtp_t) depth: 4
 	
	allow postfix_smtp_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_smtp_t) depth: 3
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_smtp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_smtp_t) depth: 3
 	
	# FIXME: postfix_smtp_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_smtp_t) depth: 3
 	
	allow postfix_smtp_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtp_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_smtp_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_smtp_t) depth: 5
 	
	
	


	allow postfix_smtp_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_smtp_t) depth: 4
 	
	allow postfix_smtp_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_smtp_t) depth: 3
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t cert_t:file { read getattr lock ioctl };
	allow postfix_smtp_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_smtp_t) depth: 2
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_smtp_t) depth: 3
 	
	
	


	dontaudit postfix_smtp_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_smtp_t) depth: 2
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_smtp_t) depth: 3
 	
	
	


	dontaudit postfix_smtp_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_smtp_t) depth: 2
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_smtp_t) depth: 3
 	
	
	


	dontaudit postfix_smtp_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_smtp_t) depth: 2
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_smtp_t) depth: 3
 	
	
	


	dontaudit postfix_smtp_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_smtp_t) depth: 2
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_smtp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_smtp_t) depth: 4
 	
	
	


	allow postfix_smtp_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtp_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_smtp_t) depth: 3
 	
	allow postfix_smtp_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_smtp_t) depth: 2
 	
	
	

 	 	 	 	
##### end postfix_domain_template(smtp) depth: 1
 	

	allow postfix_smtp_t self:capability { setuid setgid dac_override };
	allow postfix_smtp_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_smtp_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_smtp_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_smtp_exec_t,postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_smtp_exec_t,postfix_smtp_t) depth: 3
 	
	allow postfix_master_t postfix_smtp_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_smtp_t:process transition;
	dontaudit postfix_master_t postfix_smtp_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_smtp_exec_t,postfix_smtp_t) depth: 2
 	
	type_transition postfix_master_t postfix_smtp_exec_t:process postfix_smtp_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_smtp_exec_t,postfix_smtp_t) depth: 1
 	
	allow postfix_master_t postfix_smtp_t:fd use;
	allow postfix_smtp_t postfix_master_t:fd use;
	allow postfix_smtp_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_smtp_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_smtp_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_smtp_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_smtp_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_smtp_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_smtp_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_smtp_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_smtp_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_smtp_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_smtp_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_smtp_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_smtp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_smtp_t) depth: 3
 	
	
	


	allow postfix_smtp_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_smtp_t) depth: 2
 	
	allow postfix_smtp_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_smtp_t) depth: 1
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(smtp) depth: 0
 	
 	 	 	 	
##### begin mta_mailserver_sender(postfix_smtp_t) depth: 1
 	
	
	


	typeattribute postfix_smtp_t mailserver_sender;

	 	 	 	
##### end mta_mailserver_sender(postfix_smtp_t) depth: 0
 	

 	 	 	 	
##### begin postfix_server_domain_template(smtpd) depth: 1
 	
	 	 	 	 	
##### begin postfix_domain_template(smtpd) depth: 2
 	
	type postfix_smtpd_t;
	type postfix_smtpd_exec_t;
	 	 	 	 	
##### begin domain_type(postfix_smtpd_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(postfix_smtpd_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute postfix_smtpd_t domain;

	# allow the domain to read its /proc/pid entries
	allow postfix_smtpd_t self:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t self:lnk_file { read getattr lock ioctl };
	allow postfix_smtpd_t self:file { getattr read write append ioctl lock };

	# allow postfix_smtpd_t to create child processes in this domain
	allow postfix_smtpd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types postfix_smtpd_t;
		role sysadm_r types postfix_smtpd_t;
		role user_r types postfix_smtpd_t;
		role staff_r types postfix_smtpd_t;
	

	 	 	 	
##### end domain_base_type(postfix_smtpd_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(postfix_smtpd_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(postfix_smtpd_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(postfix_smtpd_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_smtpd_t) depth: 5
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_smtpd_t) depth: 4
 	
	allow postfix_smtpd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(postfix_smtpd_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t root_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(postfix_smtpd_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_smtpd_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t init_t:process signull;

	 	 	 	
##### end init_signull(postfix_smtpd_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(postfix_smtpd_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(postfix_smtpd_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(postfix_smtpd_t) depth: 4
 	
	
	


	dontaudit postfix_smtpd_t security_t:dir search;
	dontaudit postfix_smtpd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(postfix_smtpd_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(postfix_smtpd_t) depth: 4
 	
	
	


	dontaudit postfix_smtpd_t selinux_config_t:dir search;
	dontaudit postfix_smtpd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(postfix_smtpd_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(postfix_smtpd_t,postfix_smtpd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_smtpd_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_smtpd_exec_t) depth: 5
 	
	
	


	allow postfix_smtpd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_smtpd_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_smtpd_exec_t) depth: 5
 	
	
	


	allow postfix_smtpd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_smtpd_exec_t) depth: 4
 	
	typeattribute postfix_smtpd_exec_t file_type;

	 	 	 	
##### end files_type(postfix_smtpd_exec_t) depth: 3
 	

	allow postfix_smtpd_t postfix_smtpd_exec_t:file entrypoint;
	allow postfix_smtpd_t postfix_smtpd_exec_t:file { read getattr lock execute ioctl };

	typeattribute postfix_smtpd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(postfix_smtpd_t,postfix_smtpd_exec_t) depth: 2
 	
	role system_r types postfix_smtpd_t;

	dontaudit postfix_smtpd_t self:capability sys_tty_config;
	allow postfix_smtpd_t self:process { { sigchld sigkill sigstop signull signal } setpgid };
	allow postfix_smtpd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_smtpd_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
	allow postfix_smtpd_t self:unix_stream_socket connectto;

	allow postfix_master_t postfix_smtpd_t:process signal;

	allow postfix_smtpd_t postfix_etc_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t postfix_etc_t:file { read getattr lock ioctl };

	
	
	


	allow postfix_smtpd_t postfix_smtpd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	allow postfix_smtpd_t postfix_exec_t:file { read getattr lock execute ioctl };
	# cjp: ???
	allow postfix_smtpd_t postfix_exec_t:dir { read getattr lock search ioctl };

	allow postfix_smtpd_t postfix_master_t:process sigchld;

	allow postfix_smtpd_t postfix_spool_t:dir { read getattr lock search ioctl };

	allow postfix_smtpd_t postfix_var_run_t:file { create getattr setattr read write append rename link unlink ioctl lock };
	 	 	 	 	
##### begin files_pid_filetrans(postfix_smtpd_t,postfix_var_run_t,file) depth: 3
 	
	
	


	allow postfix_smtpd_t var_t:dir { getattr search };
	allow postfix_smtpd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_smtpd_t var_run_t:file postfix_var_run_t;

	 	 	 	
##### end files_pid_filetrans(postfix_smtpd_t,postfix_var_run_t,file) depth: 2
 	

	 	 	 	 	
##### begin kernel_read_system_state(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t proc_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t proc_t:lnk_file { getattr read };
	allow postfix_smtpd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_network_state(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t proc_t:dir search;
	allow postfix_smtpd_t proc_net_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t proc_net_t:file { read getattr lock ioctl };
	allow postfix_smtpd_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_smtpd_t) depth: 3
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_smtpd_t { proc_t proc_net_t }:dir search;

	allow postfix_smtpd_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin dev_read_sysfs(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t sysfs_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_rand(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_read_urand(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin fs_search_auto_mountpoints(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin fs_getattr_xattr_fs(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin term_dontaudit_use_console(postfix_smtpd_t) depth: 3
 	
	
	


	dontaudit postfix_smtpd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin corecmd_list_bin(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_list_sbin(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t bin_t:dir search;
	allow postfix_smtpd_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t sbin_t:dir search;
	allow postfix_smtpd_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corecmd_exec_shell(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_smtpd_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin files_read_etc_files(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t etc_t:file { read getattr lock ioctl };
	allow postfix_smtpd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_smtpd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin files_read_usr_symlinks(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t usr_t:dir search;
	allow postfix_smtpd_t usr_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_symlinks(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin files_search_spool(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t var_t:dir { getattr search };
	allow postfix_smtpd_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin files_getattr_tmp_dirs(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t tmp_t:dir getattr;

	 	 	 	
##### end files_getattr_tmp_dirs(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin init_use_fds(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin init_sigchld(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin libs_use_ld_so(postfix_smtpd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_smtpd_t) depth: 3
 	
	allow postfix_smtpd_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtpd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtpd_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_smtpd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin libs_use_shared_libs(postfix_smtpd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_smtpd_t) depth: 3
 	
	allow postfix_smtpd_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtpd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_smtpd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_smtpd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin logging_send_syslog_msg(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t devlog_t:lnk_file read;
	allow postfix_smtpd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_smtpd_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_smtpd_t syslogd_t:unix_stream_socket connectto;
	allow postfix_smtpd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_smtpd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_smtpd_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_smtpd_t) depth: 5
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_smtpd_t) depth: 4
 	
	allow postfix_smtpd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_smtpd_t) depth: 3
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin miscfiles_read_localization(postfix_smtpd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_smtpd_t) depth: 3
 	
	# FIXME: postfix_smtpd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_smtpd_t) depth: 3
 	
	allow postfix_smtpd_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_smtpd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_smtpd_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_smtpd_t) depth: 5
 	
	
	


	allow postfix_smtpd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_smtpd_t) depth: 4
 	
	allow postfix_smtpd_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_smtpd_t) depth: 3
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin miscfiles_read_certs(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t cert_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t cert_t:file { read getattr lock ioctl };
	allow postfix_smtpd_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(postfix_smtpd_t) depth: 2
 	

	 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(postfix_smtpd_t) depth: 3
 	
	
	


	dontaudit postfix_smtpd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(postfix_smtpd_t) depth: 2
 	

	
		 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(postfix_smtpd_t) depth: 3
 	
	
	


	dontaudit postfix_smtpd_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(postfix_smtpd_t) depth: 2
 	
		 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(postfix_smtpd_t) depth: 3
 	
	
	


	dontaudit postfix_smtpd_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(postfix_smtpd_t) depth: 2
 	
		 	 	 	 	
##### begin files_dontaudit_read_root_files(postfix_smtpd_t) depth: 3
 	
	
	


	dontaudit postfix_smtpd_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(postfix_smtpd_t) depth: 2
 	
	

	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_read_db(postfix_smtpd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_smtpd_t) depth: 4
 	
	
	


	allow postfix_smtpd_t device_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_smtpd_t) depth: 3
 	
	allow postfix_smtpd_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(postfix_smtpd_t) depth: 2
 	
	
	

 	 	 	 	
##### end postfix_domain_template(smtpd) depth: 1
 	

	allow postfix_smtpd_t self:capability { setuid setgid dac_override };
	allow postfix_smtpd_t postfix_master_t:unix_stream_socket { connectto { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept } };
	allow postfix_smtpd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_smtpd_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_smtpd_exec_t,postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_smtpd_exec_t,postfix_smtpd_t) depth: 3
 	
	allow postfix_master_t postfix_smtpd_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_smtpd_t:process transition;
	dontaudit postfix_master_t postfix_smtpd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_smtpd_exec_t,postfix_smtpd_t) depth: 2
 	
	type_transition postfix_master_t postfix_smtpd_exec_t:process postfix_smtpd_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_smtpd_exec_t,postfix_smtpd_t) depth: 1
 	
	allow postfix_master_t postfix_smtpd_t:fd use;
	allow postfix_smtpd_t postfix_master_t:fd use;
	allow postfix_smtpd_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_smtpd_t postfix_master_t:process sigchld;

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_smtpd_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_smtpd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_smtpd_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_smtpd_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_smtpd_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_smtpd_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_smtpd_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_smtpd_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_smtpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_smtpd_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_read_config(postfix_smtpd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_smtpd_t) depth: 3
 	
	
	


	allow postfix_smtpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_smtpd_t) depth: 2
 	
	allow postfix_smtpd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_smtpd_t) depth: 1
 	

	
	
		
	

 	 	 	 	
##### end postfix_server_domain_template(smtpd) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_spool_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_spool_t) depth: 2
 	
	
	


	allow postfix_spool_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_spool_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_spool_t) depth: 2
 	
	
	


	allow postfix_spool_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_spool_t) depth: 1
 	
	typeattribute postfix_spool_t file_type;

	 	 	 	
##### end files_type(postfix_spool_t) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_spool_maildrop_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_spool_maildrop_t) depth: 2
 	
	
	


	allow postfix_spool_maildrop_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_spool_maildrop_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_spool_maildrop_t) depth: 2
 	
	
	


	allow postfix_spool_maildrop_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_spool_maildrop_t) depth: 1
 	
	typeattribute postfix_spool_maildrop_t file_type;

	 	 	 	
##### end files_type(postfix_spool_maildrop_t) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_spool_flush_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_spool_flush_t) depth: 2
 	
	
	


	allow postfix_spool_flush_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_spool_flush_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_spool_flush_t) depth: 2
 	
	
	


	allow postfix_spool_flush_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_spool_flush_t) depth: 1
 	
	typeattribute postfix_spool_flush_t file_type;

	 	 	 	
##### end files_type(postfix_spool_flush_t) depth: 0
 	

 	 	 	 	
##### begin files_type(postfix_public_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_public_t) depth: 2
 	
	
	


	allow postfix_public_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_public_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_public_t) depth: 2
 	
	
	


	allow postfix_public_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_public_t) depth: 1
 	
	typeattribute postfix_public_t file_type;

	 	 	 	
##### end files_type(postfix_public_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(postfix_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(postfix_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(postfix_var_run_t) depth: 3
 	
	
	


	allow postfix_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(postfix_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(postfix_var_run_t) depth: 3
 	
	
	


	allow postfix_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(postfix_var_run_t) depth: 2
 	
	typeattribute postfix_var_run_t file_type;

	 	 	 	
##### end files_type(postfix_var_run_t) depth: 1
 	
	typeattribute postfix_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(postfix_var_run_t) depth: 0
 	

########################################
#
# Postfix master process local policy
#

# chown is to set the correct ownership of queue dirs
allow postfix_master_t self:capability { chown dac_override kill setgid setuid net_bind_service sys_tty_config };
allow postfix_master_t self:fifo_file { getattr read write append ioctl lock };
allow postfix_master_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow postfix_master_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow postfix_master_t postfix_etc_t:file { getattr read write append ioctl lock };


	
	


	allow postfix_master_t postfix_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow postfix_master_t postfix_map_exec_t:file { read getattr lock execute ioctl };

allow postfix_master_t postfix_postdrop_exec_t:file getattr;

allow postfix_master_t postfix_postqueue_exec_t:file getattr;

allow postfix_master_t postfix_private_t:dir { read getattr lock search ioctl add_name remove_name write };
allow postfix_master_t postfix_private_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_master_t postfix_private_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

allow postfix_master_t postfix_prng_t:file { getattr read write append ioctl lock };

allow postfix_master_t postfix_public_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_master_t postfix_public_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_master_t postfix_public_t:dir { read getattr lock search ioctl add_name remove_name write };

# allow access to deferred queue and allow removing bogus incoming entries
allow postfix_master_t postfix_spool_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_master_t postfix_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };

allow postfix_master_t postfix_spool_bounce_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };
allow postfix_master_t postfix_spool_bounce_t:file getattr;

allow postfix_master_t postfix_spool_flush_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_master_t postfix_spool_flush_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_master_t postfix_spool_flush_t:lnk_file { create read getattr setattr link unlink rename };

allow postfix_master_t postfix_spool_maildrop_t:dir { read getattr lock search ioctl add_name remove_name write };
allow postfix_master_t postfix_spool_maildrop_t:file { unlink rename getattr };

 	 	 	 	
##### begin kernel_read_all_sysctls(postfix_master_t) depth: 1
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow postfix_master_t { proc_t proc_net_t }:dir search;

	allow postfix_master_t sysctl_type:dir { read getattr lock search ioctl };
	allow postfix_master_t sysctl_type:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_all_sysctls(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_master_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_master_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_master_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_master_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_master_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_master_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_master_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_master_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_amavisd_send_port(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t amavisd_send_port_t:tcp_socket name_bind;
	

	 	 	 	
##### end corenet_tcp_bind_amavisd_send_port(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_smtp_port(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t smtp_port_t:tcp_socket name_bind;
	allow postfix_master_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_smtp_port(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_master_t) depth: 0
 	

# for a find command
 	 	 	 	
##### begin selinux_dontaudit_search_fs(postfix_master_t) depth: 1
 	
	
	


	dontaudit postfix_master_t security_t:dir search;

	 	 	 	
##### end selinux_dontaudit_search_fs(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_ls(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_master_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_master_t ls_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_ls(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t sbin_t:dir { read getattr lock search ioctl };
	allow postfix_master_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_master_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_master_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_master_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_master_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_master_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin files_read_usr_files(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t usr_t:dir { read getattr lock search ioctl };
	allow postfix_master_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin init_use_script_ptys(postfix_master_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(postfix_master_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_master_t) depth: 3
 	
	
	


	allow postfix_master_t device_t:dir { read getattr lock search ioctl };
	allow postfix_master_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_master_t) depth: 2
 	
	allow postfix_master_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(postfix_master_t) depth: 1
 	
	allow postfix_master_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_dontaudit_search_man_pages(postfix_master_t) depth: 1
 	
	
	


	dontaudit postfix_master_t man_t:dir search;

	 	 	 	
##### end miscfiles_dontaudit_search_man_pages(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin seutil_sigchld_newrole(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(postfix_master_t) depth: 0
 	
# postfix does a "find" on startup for some reason - keep it quiet
 	 	 	 	
##### begin seutil_dontaudit_search_config(postfix_master_t) depth: 1
 	
	
	


	dontaudit postfix_master_t selinux_config_t:dir search;

	 	 	 	
##### end seutil_dontaudit_search_config(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(postfix_master_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_master_t) depth: 1
 	
	allow postfix_master_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_master_t) depth: 0
 	

 	 	 	 	
##### begin mta_rw_aliases(postfix_master_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_master_t) depth: 2
 	
	
	


	allow postfix_master_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_master_t) depth: 1
 	
	allow postfix_master_t etc_aliases_t:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end mta_rw_aliases(postfix_master_t) depth: 0
 	
 	 	 	 	
##### begin mta_read_sendmail_bin(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t sendmail_exec_t:file { read getattr lock ioctl };

	 	 	 	
##### end mta_read_sendmail_bin(postfix_master_t) depth: 0
 	


	
		
	 	 	 	 	
##### begin mount_send_nfs_client_request(postfix_master_t) depth: 1
 	
	
	


	allow postfix_master_t mount_t:udp_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end mount_send_nfs_client_request(postfix_master_t) depth: 0
 	

	



	
		
	


###########################################################
#
# Partially converted rules.  THESE ARE ONLY TEMPORARY
#



# end partially converted rules

########################################
#
# Postfix bounce local policy
#

allow postfix_bounce_t self:capability dac_read_search;
allow postfix_bounce_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow postfix_bounce_t postfix_public_t:sock_file write;

allow postfix_bounce_t postfix_spool_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_bounce_t postfix_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_bounce_t postfix_spool_t:lnk_file { create read getattr setattr link unlink rename };

allow postfix_bounce_t postfix_spool_bounce_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_bounce_t postfix_spool_bounce_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_bounce_t postfix_spool_bounce_t:lnk_file { create read getattr setattr link unlink rename };

########################################
#
# Postfix cleanup local policy
#

allow postfix_cleanup_t self:process setrlimit;

# connect to master process
allow postfix_cleanup_t postfix_master_t:unix_stream_socket connectto;
allow postfix_cleanup_t postfix_private_t:dir search;
allow postfix_cleanup_t postfix_private_t:sock_file { getattr read write append ioctl lock };

allow postfix_cleanup_t postfix_public_t:fifo_file { getattr read write append ioctl lock };
allow postfix_cleanup_t postfix_public_t:sock_file { getattr write };

allow postfix_cleanup_t postfix_spool_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_cleanup_t postfix_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_cleanup_t postfix_spool_t:lnk_file { create read getattr setattr link unlink rename };

allow postfix_cleanup_t postfix_spool_bounce_t:dir { read getattr lock search ioctl };

########################################
#
# Postfix local local policy
#

allow postfix_local_t self:fifo_file { getattr read write append ioctl lock };
allow postfix_local_t self:process { setsched setrlimit };

allow postfix_local_t postfix_local_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_local_t postfix_local_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(postfix_local_t,postfix_local_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow postfix_local_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_local_t tmp_t:{ file dir } postfix_local_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(postfix_local_t,postfix_local_tmp_t,{ file dir }) depth: 0
 	

# connect to master process
allow postfix_local_t postfix_master_t:unix_stream_socket connectto;
allow postfix_local_t postfix_public_t:dir search;
allow postfix_local_t postfix_public_t:sock_file write;

# for .forward - maybe we need a new type for it?
allow postfix_local_t postfix_private_t:dir search;
allow postfix_local_t postfix_private_t:sock_file { getattr read write append ioctl lock };

allow postfix_local_t postfix_spool_t:file { getattr read write append ioctl lock };

 	 	 	 	
##### begin corecmd_exec_shell(postfix_local_t) depth: 1
 	
	
	


	allow postfix_local_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_local_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_local_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(postfix_local_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(postfix_local_t) depth: 1
 	
	
	


	allow postfix_local_t bin_t:dir { read getattr lock search ioctl };
	allow postfix_local_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow postfix_local_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(postfix_local_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(postfix_local_t) depth: 1
 	
	
	


	allow postfix_local_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_local_t etc_t:file { read getattr lock ioctl };
	allow postfix_local_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_local_t) depth: 0
 	

 	 	 	 	
##### begin mta_read_aliases(postfix_local_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_local_t) depth: 1
 	
	allow postfix_local_t etc_aliases_t:file { read getattr lock ioctl };

	 	 	 	
##### end mta_read_aliases(postfix_local_t) depth: 0
 	
 	 	 	 	
##### begin mta_delete_spool(postfix_local_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_spool(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t var_t:dir { getattr search };
	allow postfix_local_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(postfix_local_t) depth: 1
 	
	allow postfix_local_t mail_spool_t:dir { { getattr search read lock ioctl } write remove_name };
	allow postfix_local_t mail_spool_t:file unlink;

	 	 	 	
##### end mta_delete_spool(postfix_local_t) depth: 0
 	
# For reading spamassasin
 	 	 	 	
##### begin mta_read_config(postfix_local_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_local_t) depth: 2
 	
	
	


	allow postfix_local_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_local_t) depth: 1
 	
	allow postfix_local_t etc_mail_t:dir { getattr search read lock ioctl };
	allow postfix_local_t etc_mail_t:file { read getattr lock ioctl };
	allow postfix_local_t etc_mail_t:lnk_file { getattr read };

	 	 	 	
##### end mta_read_config(postfix_local_t) depth: 0
 	


	
		
	


########################################
#
# Postfix map local policy
#

allow postfix_map_t self:capability setgid;
allow postfix_map_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow postfix_map_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow postfix_map_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow postfix_map_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow postfix_map_t postfix_etc_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_map_t postfix_etc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_map_t postfix_etc_t:lnk_file { create read getattr setattr link unlink rename };

allow postfix_map_t postfix_map_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_map_t postfix_map_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(postfix_map_t,postfix_map_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow postfix_map_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition postfix_map_t tmp_t:{ file dir } postfix_map_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(postfix_map_t,postfix_map_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t proc_t:dir search;
	allow postfix_map_t sysctl_t:dir { read getattr lock search ioctl };
	allow postfix_map_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow postfix_map_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin kernel_dontaudit_list_proc(postfix_map_t) depth: 1
 	
	
	


	dontaudit postfix_map_t proc_t:dir { getattr search read lock ioctl };

	 	 	 	
##### end kernel_dontaudit_list_proc(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_map_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_map_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_map_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_map_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_map_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(postfix_map_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_map_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_map_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_list_bin(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_symlinks(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t bin_t:dir search;
	allow postfix_map_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_files(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t bin_t:dir search;
	allow postfix_map_t bin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_files(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_pipes(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t bin_t:dir search;
	allow postfix_map_t bin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_pipes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_sockets(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t bin_t:dir search;
	allow postfix_map_t bin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_sockets(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_list_sbin(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_symlinks(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t sbin_t:dir search;
	allow postfix_map_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_files(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t sbin_t:dir search;
	allow postfix_map_t sbin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_files(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_pipes(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t sbin_t:dir search;
	allow postfix_map_t sbin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_pipes(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_sockets(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t sbin_t:dir search;
	allow postfix_map_t sbin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_sockets(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin files_list_home(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t usr_t:dir { read getattr lock search ioctl };
	allow postfix_map_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_map_t etc_t:file { read getattr lock ioctl };
	allow postfix_map_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t etc_t:dir { read getattr lock search ioctl };
	allow postfix_map_t etc_runtime_t:file { read getattr lock ioctl };
	allow postfix_map_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_var(postfix_map_t) depth: 1
 	
	
	


	dontaudit postfix_map_t var_t:dir search;

	 	 	 	
##### end files_dontaudit_search_var(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(postfix_map_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(postfix_map_t) depth: 1
 	
	allow postfix_map_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_map_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_map_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow postfix_map_t ld_so_t:file { read getattr lock execute ioctl };
	allow postfix_map_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(postfix_map_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(postfix_map_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(postfix_map_t) depth: 1
 	
	allow postfix_map_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_map_t lib_t:lnk_file { read getattr lock ioctl };
	allow postfix_map_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow postfix_map_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow postfix_map_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t devlog_t:lnk_file read;
	allow postfix_map_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow postfix_map_t syslogd_t:unix_dgram_socket sendto;
	allow postfix_map_t syslogd_t:unix_stream_socket connectto;
	allow postfix_map_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_map_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(postfix_map_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_map_t) depth: 3
 	
	
	


	allow postfix_map_t device_t:dir { read getattr lock search ioctl };
	allow postfix_map_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_map_t) depth: 2
 	
	allow postfix_map_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(postfix_map_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(postfix_map_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_map_t) depth: 1
 	
	# FIXME: postfix_map_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_map_t) depth: 1
 	
	allow postfix_map_t locale_t:dir { read getattr lock search ioctl };
	allow postfix_map_t locale_t:lnk_file { read getattr lock ioctl };
	allow postfix_map_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(postfix_map_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(postfix_map_t) depth: 3
 	
	
	


	allow postfix_map_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(postfix_map_t) depth: 2
 	
	allow postfix_map_t lib_t:dir { read getattr lock search ioctl };
	allow postfix_map_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(postfix_map_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(postfix_map_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_map_t) depth: 1
 	
	allow postfix_map_t selinux_config_t:dir { read getattr lock search ioctl };
	allow postfix_map_t selinux_config_t:file { read getattr lock ioctl };
	allow postfix_map_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(postfix_map_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(postfix_map_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_map_t) depth: 2
 	
	
	


	allow postfix_map_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_map_t) depth: 1
 	
	allow postfix_map_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(postfix_map_t) depth: 0
 	


	# FIXME: would be better to use a run interface
	role system_r types postfix_map_t;



	
		if (read_default_t) {
			
	 	 	 	 	
##### begin files_list_default(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t default_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_default(postfix_map_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_files(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t default_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_files(postfix_map_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_symlinks(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t default_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_symlinks(postfix_map_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_sockets(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t default_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_sockets(postfix_map_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_pipes(postfix_map_t) depth: 1
 	
	
	


	allow postfix_map_t default_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_pipes(postfix_map_t) depth: 0
 	

		
		}
	



	
		
	 	 	 	 	
##### begin locallogin_dontaudit_use_fds(postfix_map_t) depth: 1
 	
	
	


	dontaudit postfix_map_t local_login_t:fd use;

	 	 	 	
##### end locallogin_dontaudit_use_fds(postfix_map_t) depth: 0
 	

	


# a "run" interface needs to be
# added, and have sysadm_t use it
# in a optional_policy block.

########################################
#
# Postfix pickup local policy
#

allow postfix_pickup_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow postfix_pickup_t postfix_master_t:unix_stream_socket connectto;

allow postfix_pickup_t postfix_private_t:dir search;
allow postfix_pickup_t postfix_private_t:sock_file write;

allow postfix_pickup_t postfix_public_t:fifo_file { getattr read write append ioctl lock };
allow postfix_pickup_t postfix_public_t:sock_file { getattr read write append ioctl lock };

allow postfix_pickup_t postfix_spool_maildrop_t:dir { read getattr lock search ioctl add_name remove_name write };
allow postfix_pickup_t postfix_spool_maildrop_t:file { read getattr lock ioctl };
allow postfix_pickup_t postfix_spool_maildrop_t:file unlink;

########################################
#
# Postfix pipe local policy
#

allow postfix_pipe_t self:fifo_file { read write };

allow postfix_pipe_t postfix_private_t:dir search;
allow postfix_pipe_t postfix_private_t:sock_file write;

allow postfix_pipe_t postfix_public_t:fifo_file { getattr write };

allow postfix_pipe_t postfix_spool_t:dir search;
allow postfix_pipe_t postfix_spool_t:file { getattr read write append ioctl lock };


	
		
	


########################################
#
# Postfix postdrop local policy
#

# usually it does not need a UDP socket
allow postfix_postdrop_t self:capability sys_resource;
allow postfix_postdrop_t self:tcp_socket create;
allow postfix_postdrop_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow postfix_postdrop_t postfix_public_t:dir search;
allow postfix_postdrop_t postfix_public_t:fifo_file { getattr read write append ioctl lock };

allow postfix_postdrop_t postfix_spool_maildrop_t:dir { read getattr lock search ioctl add_name remove_name write };
allow postfix_postdrop_t postfix_spool_maildrop_t:file { create ioctl read getattr lock write setattr append link unlink rename };

 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_postdrop_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_postdrop_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_postdrop_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_postdrop_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_all_user_ptys(postfix_postdrop_t) depth: 1
 	
	
	


	dontaudit postfix_postdrop_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_dontaudit_use_all_user_ptys(postfix_postdrop_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_all_user_ttys(postfix_postdrop_t) depth: 1
 	
	
	


	dontaudit postfix_postdrop_t ttynode:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_all_user_ttys(postfix_postdrop_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_dns_name_resolve(postfix_postdrop_t) depth: 1
 	
	
	


	allow postfix_postdrop_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_postdrop_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_postdrop_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_postdrop_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_postdrop_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_postdrop_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_postdrop_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(postfix_postdrop_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_postdrop_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_postdrop_t) depth: 3
 	
	
	


	allow postfix_postdrop_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_postdrop_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_postdrop_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(postfix_postdrop_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_postdrop_t) depth: 1
 	
	allow postfix_postdrop_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(postfix_postdrop_t) depth: 0
 	

 	 	 	 	
##### begin mta_rw_user_mail_stream_sockets(postfix_postdrop_t) depth: 1
 	
	
	


	allow postfix_postdrop_t user_mail_domain:unix_stream_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end mta_rw_user_mail_stream_sockets(postfix_postdrop_t) depth: 0
 	


	 	 	 	 	
##### begin term_use_unallocated_ttys(postfix_postdrop_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postdrop_t) depth: 1
 	
	allow postfix_postdrop_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(postfix_postdrop_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_generic_ptys(postfix_postdrop_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postdrop_t) depth: 2
 	
	
	


	allow postfix_postdrop_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postdrop_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postdrop_t) depth: 1
 	
	allow postfix_postdrop_t devpts_t:dir { getattr search read lock ioctl };
	allow postfix_postdrop_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(postfix_postdrop_t) depth: 0
 	



	
		
	



	
		
	


#######################################
#
# Postfix postqueue local policy
#

allow postfix_postqueue_t self:tcp_socket create;
allow postfix_postqueue_t self:udp_socket { create ioctl };

# wants to write to /var/spool/postfix/public/showq
allow postfix_postqueue_t postfix_public_t:sock_file { getattr read write append ioctl lock };
allow postfix_postqueue_t postfix_master_t:unix_stream_socket connectto;

allow postfix_postqueue_t postfix_public_t:dir search;
# write to /var/spool/postfix/public/qmgr
allow postfix_postqueue_t postfix_public_t:fifo_file { getattr write };

 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 1
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 2
 	
	allow postfix_master_t postfix_postqueue_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_postqueue_t:process transition;
	dontaudit postfix_master_t postfix_postqueue_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 1
 	
	type_transition postfix_master_t postfix_postqueue_exec_t:process postfix_postqueue_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_postqueue_exec_t,postfix_postqueue_t) depth: 0
 	
allow postfix_master_t postfix_postqueue_t:fd use;
allow postfix_postqueue_t postfix_master_t:fd use;
allow postfix_postqueue_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
allow postfix_postqueue_t postfix_master_t:process sigchld;

 	 	 	 	
##### begin domain_auto_trans(postfix_postqueue_t,postfix_showq_exec_t,postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin domain_trans(postfix_postqueue_t,postfix_showq_exec_t,postfix_showq_t) depth: 2
 	
	allow postfix_postqueue_t postfix_showq_exec_t:file { getattr read execute };
	allow postfix_postqueue_t postfix_showq_t:process transition;
	dontaudit postfix_postqueue_t postfix_showq_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_postqueue_t,postfix_showq_exec_t,postfix_showq_t) depth: 1
 	
	type_transition postfix_postqueue_t postfix_showq_exec_t:process postfix_showq_t;
 	 	 	 	
##### end domain_auto_trans(postfix_postqueue_t,postfix_showq_exec_t,postfix_showq_t) depth: 0
 	
allow postfix_postqueue_t postfix_showq_t:fd use;
allow postfix_showq_t postfix_postqueue_t:fd use;
allow postfix_showq_t postfix_postqueue_t:fifo_file { getattr read write append ioctl lock };
allow postfix_showq_t postfix_postqueue_t:process sigchld;

# to write the mailq output, it really should not need read access!
 	 	 	 	
##### begin term_use_all_user_ptys(postfix_postqueue_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postqueue_t) depth: 2
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postqueue_t) depth: 1
 	
	allow postfix_postqueue_t devpts_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(postfix_postqueue_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ttys(postfix_postqueue_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_postqueue_t) depth: 2
 	
	
	


	allow postfix_postqueue_t device_t:dir { read getattr lock search ioctl };
	allow postfix_postqueue_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_postqueue_t) depth: 1
 	
	allow postfix_postqueue_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(postfix_postqueue_t) depth: 0
 	

 	 	 	 	
##### begin init_sigchld_script(postfix_postqueue_t) depth: 1
 	
	
	


	allow postfix_postqueue_t initrc_t:process sigchld;

	 	 	 	
##### end init_sigchld_script(postfix_postqueue_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_fds(postfix_postqueue_t) depth: 1
 	
	
	


	allow postfix_postqueue_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(postfix_postqueue_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_dontaudit_read_config(postfix_postqueue_t) depth: 1
 	
	
	


	dontaudit postfix_postqueue_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dontaudit_read_config(postfix_postqueue_t) depth: 0
 	



########################################
#
# Postfix qmgr local policy
#

allow postfix_qmgr_t postfix_master_t:unix_stream_socket connectto;

allow postfix_qmgr_t postfix_private_t:dir search;
allow postfix_qmgr_t postfix_private_t:sock_file { getattr read write append ioctl lock };

allow postfix_qmgr_t postfix_public_t:fifo_file { getattr read write append ioctl lock };
allow postfix_qmgr_t postfix_public_t:sock_file write;

# for /var/spool/postfix/active
allow postfix_qmgr_t postfix_spool_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow postfix_qmgr_t postfix_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow postfix_qmgr_t postfix_spool_t:lnk_file { create read getattr setattr link unlink rename };

allow postfix_qmgr_t postfix_spool_bounce_t:dir { getattr read search };
allow postfix_qmgr_t postfix_spool_bounce_t:file { read getattr };
allow postfix_qmgr_t postfix_spool_bounce_t:lnk_file { getattr read };

########################################
#
# Postfix showq local policy
#

allow postfix_showq_t self:capability { setuid setgid };
allow postfix_showq_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

# the following auto_trans is usually in postfix server domain
 	 	 	 	
##### begin domain_auto_trans(postfix_master_t,postfix_showq_exec_t,postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin domain_trans(postfix_master_t,postfix_showq_exec_t,postfix_showq_t) depth: 2
 	
	allow postfix_master_t postfix_showq_exec_t:file { getattr read execute };
	allow postfix_master_t postfix_showq_t:process transition;
	dontaudit postfix_master_t postfix_showq_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(postfix_master_t,postfix_showq_exec_t,postfix_showq_t) depth: 1
 	
	type_transition postfix_master_t postfix_showq_exec_t:process postfix_showq_t;
 	 	 	 	
##### end domain_auto_trans(postfix_master_t,postfix_showq_exec_t,postfix_showq_t) depth: 0
 	
allow postfix_master_t postfix_showq_t:fd use;
allow postfix_showq_t postfix_master_t:fd use;
allow postfix_showq_t postfix_master_t:fifo_file { getattr read write append ioctl lock };
allow postfix_showq_t postfix_master_t:process sigchld;

allow postfix_showq_t postfix_master_t:unix_stream_socket { accept { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow postfix_showq_t postfix_spool_t:file { read getattr lock ioctl };

allow postfix_showq_t postfix_spool_maildrop_t:dir { getattr read search };
allow postfix_showq_t postfix_spool_maildrop_t:file { read getattr };
allow postfix_showq_t postfix_spool_maildrop_t:lnk_file { getattr read };

# to write the mailq output, it really should not need read access!
 	 	 	 	
##### begin term_use_all_user_ptys(postfix_showq_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_showq_t) depth: 1
 	
	allow postfix_showq_t devpts_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(postfix_showq_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ttys(postfix_showq_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t device_t:dir { read getattr lock search ioctl };
	allow postfix_showq_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(postfix_showq_t) depth: 1
 	
	allow postfix_showq_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(postfix_showq_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_dns_name_resolve(postfix_showq_t) depth: 1
 	
	
	


	allow postfix_showq_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow postfix_showq_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(postfix_showq_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow postfix_showq_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(postfix_showq_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(postfix_showq_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(postfix_showq_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(postfix_showq_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(postfix_showq_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(postfix_showq_t) depth: 3
 	
	
	


	allow postfix_showq_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(postfix_showq_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(postfix_showq_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(postfix_showq_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(postfix_showq_t) depth: 2
 	
	
	


	allow postfix_showq_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_showq_t) depth: 1
 	
	allow postfix_showq_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(postfix_showq_t) depth: 0
 	

########################################
#
# Postfix smtp delivery local policy
#

# connect to master process
allow postfix_smtp_t postfix_master_t:unix_stream_socket connectto;
allow postfix_smtp_t { postfix_private_t postfix_public_t }:dir search;
allow postfix_smtp_t { postfix_private_t postfix_public_t }:sock_file write;

allow postfix_smtp_t postfix_spool_t:file { getattr read write append ioctl lock };

 	 	 	 	
##### begin kernel_tcp_recvfrom(postfix_smtp_t) depth: 1
 	
	
	


	allow postfix_smtp_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(postfix_smtp_t) depth: 0
 	

# if you have two different mail servers on the same host let them talk via
# SMTP, also if one mail server wants to talk to itself then allow it and let
# the SMTP protocol sort it out (SE Linux is not to prevent mail server
# misconfiguration)
 	 	 	 	
##### begin mta_tcp_connect_all_mailservers(postfix_smtp_t) depth: 1
 	
	
	


	allow postfix_smtp_t mailserver_domain:tcp_socket { connectto recvfrom };
	allow mailserver_domain postfix_smtp_t:tcp_socket { acceptfrom recvfrom };
	 	 	 	 	
##### begin kernel_tcp_recvfrom(postfix_smtp_t) depth: 2
 	
	
	


	allow postfix_smtp_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(postfix_smtp_t) depth: 1
 	

	 	 	 	
##### end mta_tcp_connect_all_mailservers(postfix_smtp_t) depth: 0
 	

########################################
#
# Postfix smtpd local policy
#
allow postfix_smtpd_t postfix_master_t:tcp_socket { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept };

# connect to master process
allow postfix_smtpd_t postfix_master_t:unix_stream_socket connectto;
allow postfix_smtpd_t { postfix_private_t postfix_public_t }:dir search;
allow postfix_smtpd_t { postfix_private_t postfix_public_t }:sock_file { getattr read write append ioctl lock };

# for prng_exch
allow postfix_smtpd_t postfix_spool_t:file { getattr read write append ioctl lock };
allow { postfix_smtp_t postfix_smtpd_t } postfix_prng_t:file { getattr read write append ioctl lock };

# for OpenSSL certificates
 	 	 	 	
##### begin files_read_usr_files(postfix_smtpd_t) depth: 1
 	
	
	


	allow postfix_smtpd_t usr_t:dir { read getattr lock search ioctl };
	allow postfix_smtpd_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(postfix_smtpd_t) depth: 0
 	
 	 	 	 	
##### begin mta_read_aliases(postfix_smtpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(postfix_smtpd_t) depth: 2
 	
	
	


	allow postfix_smtpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(postfix_smtpd_t) depth: 1
 	
	allow postfix_smtpd_t etc_aliases_t:file { read getattr lock ioctl };

	 	 	 	
##### end mta_read_aliases(postfix_smtpd_t) depth: 0
 	


	
		
	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin domain_obj_id_change_exemption(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_subj_id_change_exemption(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t can_change_process_identity;

	 	 	 	
##### end domain_subj_id_change_exemption(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_role_change_exemption(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t can_change_process_role;

	 	 	 	
##### end domain_role_change_exemption(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(remote_login_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(remote_login_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute remote_login_t domain;

	# allow the domain to read its /proc/pid entries
	allow remote_login_t self:dir { read getattr lock search ioctl };
	allow remote_login_t self:lnk_file { read getattr lock ioctl };
	allow remote_login_t self:file { getattr read write append ioctl lock };

	# allow remote_login_t to create child processes in this domain
	allow remote_login_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types remote_login_t;
		role sysadm_r types remote_login_t;
		role user_r types remote_login_t;
		role staff_r types remote_login_t;
	

	 	 	 	
##### end domain_base_type(remote_login_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(remote_login_t) depth: 2
 	
	allow remote_login_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(remote_login_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t root_t:dir { read getattr lock search ioctl };
	allow remote_login_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(remote_login_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t init_t:process signull;

	 	 	 	
##### end init_signull(remote_login_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(remote_login_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(remote_login_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(remote_login_t) depth: 2
 	
	
	


	dontaudit remote_login_t security_t:dir search;
	dontaudit remote_login_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(remote_login_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(remote_login_t) depth: 2
 	
	
	


	dontaudit remote_login_t selinux_config_t:dir search;
	dontaudit remote_login_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(remote_login_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t privfd;

	 	 	 	
##### end domain_interactive_fd(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_login_entry_type(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_entry_file(remote_login_t,login_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(login_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(login_exec_t) depth: 4
 	
	
	


	allow login_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(login_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(login_exec_t) depth: 4
 	
	
	


	allow login_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(login_exec_t) depth: 3
 	
	typeattribute login_exec_t file_type;

	 	 	 	
##### end files_type(login_exec_t) depth: 2
 	

	allow remote_login_t login_exec_t:file entrypoint;
	allow remote_login_t login_exec_t:file { read getattr lock execute ioctl };

	typeattribute login_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(remote_login_t,login_exec_t) depth: 1
 	

	 	 	 	
##### end auth_login_entry_type(remote_login_t) depth: 0
 	
role system_r types remote_login_t;

 	 	 	 	
##### begin files_tmp_file(remote_login_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(remote_login_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(remote_login_tmp_t) depth: 3
 	
	
	


	allow remote_login_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(remote_login_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(remote_login_tmp_t) depth: 3
 	
	
	


	allow remote_login_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(remote_login_tmp_t) depth: 2
 	
	typeattribute remote_login_tmp_t file_type;

	 	 	 	
##### end files_type(remote_login_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(remote_login_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(remote_login_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(remote_login_tmp_t) depth: 4
 	
	
	


	allow remote_login_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(remote_login_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(remote_login_tmp_t) depth: 4
 	
	
	


	allow remote_login_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(remote_login_tmp_t) depth: 3
 	
	typeattribute remote_login_tmp_t file_type;

	 	 	 	
##### end files_type(remote_login_tmp_t) depth: 2
 	
	typeattribute remote_login_tmp_t polymember;

	 	 	 	
##### end files_poly_member(remote_login_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(remote_login_tmp_t) depth: 2
 	
	
	


	allow remote_login_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(remote_login_tmp_t) depth: 1
 	
	typeattribute remote_login_tmp_t tmpfile;
	allow remote_login_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(remote_login_tmp_t) depth: 0
 	

########################################
#
# Remote login remote policy
#

allow remote_login_t self:capability { dac_override chown fowner fsetid kill setgid setuid net_bind_service sys_nice sys_resource sys_tty_config };
allow remote_login_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow remote_login_t self:process { setrlimit setexec };
allow remote_login_t self:fd use;
allow remote_login_t self:fifo_file { getattr read write append ioctl lock };
allow remote_login_t self:sock_file { read getattr lock ioctl };
allow remote_login_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow remote_login_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow remote_login_t self:unix_dgram_socket sendto;
allow remote_login_t self:unix_stream_socket connectto;
allow remote_login_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow remote_login_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow remote_login_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow remote_login_t self:msg { send receive };

allow remote_login_t remote_login_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow remote_login_t remote_login_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(remote_login_t,remote_login_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow remote_login_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition remote_login_t tmp_t:{ file dir } remote_login_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(remote_login_t,remote_login_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t proc_t:dir { read getattr lock search ioctl };
	allow remote_login_t proc_t:lnk_file { getattr read };
	allow remote_login_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t proc_t:dir search;
	allow remote_login_t sysctl_t:dir { read getattr lock search ioctl };
	allow remote_login_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow remote_login_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin dev_getattr_mouse_dev(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t mouse_device_t:chr_file getattr;

	 	 	 	
##### end dev_getattr_mouse_dev(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_setattr_mouse_dev(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t mouse_device_t:chr_file setattr;

	 	 	 	
##### end dev_setattr_mouse_dev(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin dev_dontaudit_search_sysfs(remote_login_t) depth: 1
 	
	
	


	dontaudit remote_login_t sysfs_t:dir search;

	 	 	 	
##### end dev_dontaudit_search_sysfs(remote_login_t) depth: 0
 	
# for SSP/ProPolice
 	 	 	 	
##### begin dev_read_urand(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(remote_login_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t proc_t:dir { read getattr lock search ioctl };
	allow remote_login_t proc_t:lnk_file { getattr read };
	allow remote_login_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(remote_login_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t security_t:dir { read search getattr };
	allow remote_login_t security_t:file { getattr read write };
	allow remote_login_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t security_t:dir { read search getattr };
	allow remote_login_t security_t:file { getattr read write };
	allow remote_login_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t security_t:dir { read search getattr };
	allow remote_login_t security_t:file { getattr read write };
	allow remote_login_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t security_t:dir { read search getattr };
	allow remote_login_t security_t:file { getattr read write };
	allow remote_login_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t security_t:dir { read search getattr };
	allow remote_login_t security_t:file { getattr read write };
	allow remote_login_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin term_relabel_all_user_ptys(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(remote_login_t) depth: 1
 	
	allow remote_login_t devpts_t:dir search;
	allow remote_login_t ptynode:chr_file { relabelfrom relabelto };

	 	 	 	
##### end term_relabel_all_user_ptys(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin auth_domtrans_chk_passwd(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(remote_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(remote_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	allow remote_login_t chkpwd_exec_t:file { getattr read execute };
	allow remote_login_t system_chkpwd_t:process transition;
	dontaudit remote_login_t system_chkpwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(remote_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	type_transition remote_login_t chkpwd_exec_t:process system_chkpwd_t;
 	 	 	 	
##### end domain_auto_trans(remote_login_t,chkpwd_exec_t,system_chkpwd_t) depth: 1
 	

	allow remote_login_t self:capability { audit_write audit_control };
	allow remote_login_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

	allow remote_login_t system_chkpwd_t:fd use;
	allow system_chkpwd_t remote_login_t:fd use;
	allow system_chkpwd_t remote_login_t:fifo_file { getattr read write append ioctl lock };
	allow system_chkpwd_t remote_login_t:process sigchld;

	dontaudit remote_login_t shadow_t:file { getattr read };

	 	 	 	 	
##### begin dev_read_rand(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(remote_login_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_certs(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t cert_t:dir { read getattr lock search ioctl };
	allow remote_login_t cert_t:file { read getattr lock ioctl };
	allow remote_login_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(remote_login_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow remote_login_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow remote_login_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(remote_login_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 2
 	
	allow remote_login_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(remote_login_t) depth: 2
 	
	
	
		

	allow remote_login_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow remote_login_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(remote_login_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 2
 	
	allow remote_login_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(remote_login_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_domtrans_chk_passwd(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_dontaudit_read_shadow(remote_login_t) depth: 1
 	
	
	


	dontaudit remote_login_t shadow_t:file { getattr read };

	 	 	 	
##### end auth_dontaudit_read_shadow(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_login_records(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t wtmp_t:file { getattr read write append ioctl lock };
	 	 	 	 	
##### begin logging_search_logs(remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(remote_login_t) depth: 2
 	
	allow remote_login_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(remote_login_t) depth: 1
 	

	 	 	 	
##### end auth_rw_login_records(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_lastlog(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(remote_login_t) depth: 2
 	
	allow remote_login_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(remote_login_t) depth: 1
 	
	allow remote_login_t lastlog_t:file { getattr read write setattr };

	 	 	 	
##### end auth_rw_lastlog(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_faillog(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(remote_login_t) depth: 2
 	
	allow remote_login_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(remote_login_t) depth: 1
 	
	allow remote_login_t faillog_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end auth_rw_faillog(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_exec_pam(remote_login_t) depth: 1
 	
	
	


	
	
	


	allow remote_login_t pam_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end auth_exec_pam(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_manage_pam_console_data(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_pids(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t var_t:dir { getattr search };
	allow remote_login_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(remote_login_t) depth: 1
 	
	allow remote_login_t pam_var_console_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow remote_login_t pam_var_console_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow remote_login_t pam_var_console_t:lnk_file { create read getattr setattr link unlink rename };

	 	 	 	
##### end auth_manage_pam_console_data(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin auth_domtrans_pam_console(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(remote_login_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(remote_login_t,pam_console_exec_t,pam_console_t) depth: 3
 	
	allow remote_login_t pam_console_exec_t:file { getattr read execute };
	allow remote_login_t pam_console_t:process transition;
	dontaudit remote_login_t pam_console_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(remote_login_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	type_transition remote_login_t pam_console_exec_t:process pam_console_t;
 	 	 	 	
##### end domain_auto_trans(remote_login_t,pam_console_exec_t,pam_console_t) depth: 1
 	

	allow remote_login_t pam_console_t:fd use;
	allow pam_console_t remote_login_t:fd use;
	allow pam_console_t remote_login_t:fifo_file { getattr read write append ioctl lock };
	allow pam_console_t remote_login_t:process sigchld;

	 	 	 	
##### end auth_domtrans_pam_console(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_list_bin(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_list_sbin(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t sbin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_sbin(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t bin_t:dir search;
	allow remote_login_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t sbin_t:dir search;
	allow remote_login_t sbin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_symlinks(remote_login_t) depth: 0
 	
# cjp: these are probably not needed:
 	 	 	 	
##### begin corecmd_read_bin_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t bin_t:dir search;
	allow remote_login_t bin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_files(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_pipes(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t bin_t:dir search;
	allow remote_login_t bin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_pipes(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_sockets(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t bin_t:dir search;
	allow remote_login_t bin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_sockets(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t sbin_t:dir search;
	allow remote_login_t sbin_t:file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_files(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_pipes(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t sbin_t:dir search;
	allow remote_login_t sbin_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_pipes(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_sbin_sockets(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t sbin_t:dir search;
	allow remote_login_t sbin_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_sbin_sockets(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin domain_read_all_entry_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t entry_type:lnk_file { read getattr lock ioctl };
	allow remote_login_t entry_type:file { read getattr lock ioctl };

	 	 	 	
##### end domain_read_all_entry_files(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t etc_t:dir { read getattr lock search ioctl };
	allow remote_login_t etc_t:file { read getattr lock ioctl };
	allow remote_login_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t etc_t:dir { read getattr lock search ioctl };
	allow remote_login_t etc_runtime_t:file { read getattr lock ioctl };
	allow remote_login_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_list_home(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t usr_t:dir { read getattr lock search ioctl };
	allow remote_login_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_list_world_readable(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t readable_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_world_readable(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t readable_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_files(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t readable_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_symlinks(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_pipes(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t readable_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_pipes(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_read_world_readable_sockets(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t readable_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_world_readable_sockets(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_list_mnt(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t mnt_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_mnt(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin files_polyinstantiate_all(remote_login_t) depth: 1
 	
	
	


	# Need to give access to /selinux/member
	 	 	 	 	
##### begin selinux_compute_member(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t security_t:dir { read search getattr };
	allow remote_login_t security_t:file { getattr read write };
	allow remote_login_t security_t:security compute_member;

	 	 	 	
##### end selinux_compute_member(remote_login_t) depth: 1
 	

	# Need sys_admin capability for mounting
	allow remote_login_t self:capability sys_admin;

	# Need to give access to the directories to be polyinstantiated
	allow remote_login_t polydir:dir { create getattr search write add_name setattr mounton };

	# Need to give access to the polyinstantiated subdirectories
	allow remote_login_t polymember:dir { getattr search };

	# Need to give access to parent directories where original
	# is remounted for polyinstantiation aware programs (like gdm)
	allow remote_login_t polyparent:dir { getattr mounton };

	# Need to give permission to create directories where applicable
	allow remote_login_t self:process setfscreate;
	allow remote_login_t polymember: dir { create setattr };
	allow remote_login_t polydir: dir { write add_name };
	allow remote_login_t polyparent:dir { write add_name };

	# Default type for mountpoints
	allow remote_login_t poly_t:dir { create mounton };

	 	 	 	
##### end files_polyinstantiate_all(remote_login_t) depth: 0
 	
# for when /var/mail is a sym-link
 	 	 	 	
##### begin files_read_var_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t var_t:dir { getattr search };
	allow remote_login_t var_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_var_symlinks(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin init_rw_utmp(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t var_t:dir { getattr search };
	allow remote_login_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(remote_login_t) depth: 1
 	
	allow remote_login_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(remote_login_t) depth: 1
 	
	allow remote_login_t lib_t:dir { read getattr lock search ioctl };
	allow remote_login_t lib_t:lnk_file { read getattr lock ioctl };
	allow remote_login_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow remote_login_t ld_so_t:file { read getattr lock execute ioctl };
	allow remote_login_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(remote_login_t) depth: 1
 	
	allow remote_login_t lib_t:dir { read getattr lock search ioctl };
	allow remote_login_t lib_t:lnk_file { read getattr lock ioctl };
	allow remote_login_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow remote_login_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow remote_login_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t devlog_t:lnk_file read;
	allow remote_login_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow remote_login_t syslogd_t:unix_dgram_socket sendto;
	allow remote_login_t syslogd_t:unix_stream_socket connectto;
	allow remote_login_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow remote_login_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t device_t:dir { read getattr lock search ioctl };
	allow remote_login_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(remote_login_t) depth: 2
 	
	allow remote_login_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(remote_login_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_upgrade(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t mlsfileupgrade;

	 	 	 	
##### end mls_file_upgrade(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_set_level(remote_login_t) depth: 1
 	
	
	


	typeattribute remote_login_t mlsprocsetsl;

	 	 	 	
##### end mls_process_set_level(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 1
 	
	allow remote_login_t selinux_config_t:dir { read getattr lock search ioctl };
	allow remote_login_t selinux_config_t:file { read getattr lock ioctl };
	allow remote_login_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_default_contexts(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 1
 	
	allow remote_login_t selinux_config_t:dir search;
	allow remote_login_t default_context_t:dir { read getattr lock search ioctl };
	allow remote_login_t default_context_t:file { read getattr lock ioctl };
	allow remote_login_t default_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_default_contexts(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_dns_name_resolve(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow remote_login_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(remote_login_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow remote_login_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(remote_login_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(remote_login_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(remote_login_t) depth: 2
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(remote_login_t) depth: 2
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(remote_login_t) depth: 2
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(remote_login_t) depth: 1
 	

	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 1
 	
	allow remote_login_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 1
 	
	# FIXME: remote_login_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(remote_login_t) depth: 1
 	
	allow remote_login_t locale_t:dir { read getattr lock search ioctl };
	allow remote_login_t locale_t:lnk_file { read getattr lock ioctl };
	allow remote_login_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(remote_login_t) depth: 2
 	
	allow remote_login_t lib_t:dir { read getattr lock search ioctl };
	allow remote_login_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(remote_login_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(remote_login_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin userdom_search_all_users_home_content(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_home(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(remote_login_t) depth: 1
 	
	allow remote_login_t { home_dir_type home_type }:dir search;

	 	 	 	
##### end userdom_search_all_users_home_content(remote_login_t) depth: 0
 	
# Only permit unprivileged user domains to be entered via rlogin,
# since very weak authentication is used.
 	 	 	 	
##### begin userdom_signal_unpriv_users(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t unpriv_userdomain:process signal;

	 	 	 	
##### end userdom_signal_unpriv_users(remote_login_t) depth: 0
 	
 	 	 	 	
##### begin userdom_spec_domtrans_unpriv_users(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(remote_login_t,unpriv_userdomain) depth: 2
 	
	
	


	allow remote_login_t bin_t:dir { read getattr lock search ioctl };
	allow remote_login_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(remote_login_t,shell_exec_t,unpriv_userdomain) depth: 3
 	
	allow remote_login_t shell_exec_t:file { getattr read execute };
	allow remote_login_t unpriv_userdomain:process transition;
	dontaudit remote_login_t unpriv_userdomain:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(remote_login_t,shell_exec_t,unpriv_userdomain) depth: 2
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(remote_login_t,unpriv_userdomain) depth: 1
 	
	allow remote_login_t unpriv_userdomain:fd use;
	allow unpriv_userdomain remote_login_t:fd use;
	allow unpriv_userdomain remote_login_t:fifo_file { getattr read write append ioctl lock };
	allow unpriv_userdomain remote_login_t:process sigchld;

	 	 	 	
##### end userdom_spec_domtrans_unpriv_users(remote_login_t) depth: 0
 	

# Search for mail spool file.
 	 	 	 	
##### begin mta_getattr_spool(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_spool(remote_login_t) depth: 2
 	
	
	


	allow remote_login_t var_t:dir { getattr search };
	allow remote_login_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(remote_login_t) depth: 1
 	
	allow remote_login_t mail_spool_t:dir { read getattr lock search ioctl };
	allow remote_login_t mail_spool_t:lnk_file read;
	allow remote_login_t mail_spool_t:file getattr;

	 	 	 	
##### end mta_getattr_spool(remote_login_t) depth: 0
 	


	 	 	 	 	
##### begin unconfined_domain(remote_login_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(remote_login_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow remote_login_t self:capability *;
	allow remote_login_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow remote_login_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow remote_login_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow remote_login_t self:nscd *;
	allow remote_login_t self:dbus *;
	allow remote_login_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t proc_type:{ dir file } *;

	allow remote_login_t sysctl_t:{ dir file } *;

	allow remote_login_t kernel_t:system *;

	allow remote_login_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow remote_login_t unlabeled_t:filesystem *;
	allow remote_login_t unlabeled_t:association *;

	typeattribute remote_login_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute remote_login_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(remote_login_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow remote_login_t { proc_t proc_net_t }:dir search;

	allow remote_login_t sysctl_type:dir { read getattr lock search ioctl };
	allow remote_login_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(remote_login_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t node_type:node *;
	allow remote_login_t netif_type:netif *;
	allow remote_login_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow remote_login_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow remote_login_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow remote_login_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(remote_login_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(remote_login_t) depth: 5
 	
	
	


	allow remote_login_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(remote_login_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(remote_login_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t device_node:{ chr_file blk_file } *;
	allow remote_login_t mtrr_device_t:{ dir file } *;

	allow remote_login_t self:capability sys_rawio;
	typeattribute remote_login_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(remote_login_t) depth: 3
 	
	
	


	typeattribute remote_login_t unconfined_domain_type;

	# pass all constraints
	typeattribute remote_login_t can_change_process_identity;
	typeattribute remote_login_t can_change_process_role;
	typeattribute remote_login_t can_change_object_identity;
	typeattribute remote_login_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow remote_login_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow remote_login_t domain:fd use;
	allow remote_login_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow remote_login_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow remote_login_t domain:{ sem msgq shm } *;
	allow remote_login_t domain:msg { send receive };

	# For /proc/pid
	allow remote_login_t domain:dir { read getattr lock search ioctl };
	allow remote_login_t domain:file { read getattr lock ioctl };
	allow remote_login_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(remote_login_t) depth: 3
 	
	
	


	dontaudit remote_login_t domain:dir { read getattr lock search ioctl };
	dontaudit remote_login_t domain:lnk_file { read getattr lock ioctl };
	dontaudit remote_login_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit remote_login_t domain:sock_file { read getattr lock ioctl };
	dontaudit remote_login_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(remote_login_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow remote_login_t file_type:{ file chr_file } ~execmod;
	allow remote_login_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow remote_login_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow remote_login_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow remote_login_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow remote_login_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(remote_login_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(remote_login_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow remote_login_t security_t:dir { getattr search read };
	allow remote_login_t security_t:file { getattr read write };

	typeattribute remote_login_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow remote_login_t security_t:security *;
		auditallow remote_login_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(remote_login_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow remote_login_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow remote_login_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow remote_login_t self:process execstack;
		auditallow remote_login_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit remote_login_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(remote_login_t) depth: 3
 	
	
	


	typeattribute remote_login_t can_read_shadow_passwords;
	typeattribute remote_login_t can_write_shadow_passwords;
	typeattribute remote_login_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(remote_login_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(remote_login_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(remote_login_t) depth: 3
 	
	allow remote_login_t lib_t:dir { read getattr lock search ioctl };
	allow remote_login_t lib_t:lnk_file { read getattr lock ioctl };
	allow remote_login_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow remote_login_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow remote_login_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(remote_login_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(remote_login_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(remote_login_t) depth: 4
 	
	
	


	allow remote_login_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(remote_login_t) depth: 3
 	
	allow remote_login_t selinux_config_t:dir search;
	allow remote_login_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow remote_login_t policy_config_t:file { getattr create write };
#	typeattribute remote_login_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(remote_login_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t policy_config_t:file relabelto;
	typeattribute remote_login_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(remote_login_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(remote_login_t) depth: 3
 	
	
	


	allow remote_login_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow remote_login_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute remote_login_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute remote_login_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(remote_login_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(remote_login_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow remote_login_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow remote_login_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin unconfined_shell_domtrans(remote_login_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_domtrans(remote_login_t,unconfined_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_shell_spec_domtrans(remote_login_t,unconfined_t) depth: 3
 	
	
	


	allow remote_login_t bin_t:dir { read getattr lock search ioctl };
	allow remote_login_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	 	
##### begin domain_trans(remote_login_t,shell_exec_t,unconfined_t) depth: 4
 	
	allow remote_login_t shell_exec_t:file { getattr read execute };
	allow remote_login_t unconfined_t:process transition;
	dontaudit remote_login_t unconfined_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(remote_login_t,shell_exec_t,unconfined_t) depth: 3
 	

	 	 	 	
##### end corecmd_shell_spec_domtrans(remote_login_t,unconfined_t) depth: 2
 	
	type_transition remote_login_t shell_exec_t:process unconfined_t;

	 	 	 	
##### end corecmd_shell_domtrans(remote_login_t,unconfined_t) depth: 1
 	

	 	 	 	
##### end unconfined_shell_domtrans(remote_login_t) depth: 0
 	



	
		if (read_default_t) {
			
	 	 	 	 	
##### begin files_list_default(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t default_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_default(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t default_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_files(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t default_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_symlinks(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_sockets(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t default_t:sock_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_sockets(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin files_read_default_pipes(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t default_t:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_default_pipes(remote_login_t) depth: 0
 	

		
		}
	



	
		if (use_nfs_home_dirs) {
			
	 	 	 	 	
##### begin fs_read_nfs_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t nfs_t:dir { read getattr lock search ioctl };
	allow remote_login_t nfs_t:file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_nfs_files(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin fs_read_nfs_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t nfs_t:dir { read getattr lock search ioctl };
	allow remote_login_t nfs_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_nfs_symlinks(remote_login_t) depth: 0
 	

		
		}
	



	
		if (use_samba_home_dirs) {
			
	 	 	 	 	
##### begin fs_read_cifs_files(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t cifs_t:dir { read getattr lock search ioctl };
	allow remote_login_t cifs_t:file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_cifs_files(remote_login_t) depth: 0
 	
	 	 	 	 	
##### begin fs_read_cifs_symlinks(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t cifs_t:dir { read getattr lock search ioctl };
	allow remote_login_t cifs_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end fs_read_cifs_symlinks(remote_login_t) depth: 0
 	

		
		}
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin usermanage_read_crack_db(remote_login_t) depth: 1
 	
	
	


	allow remote_login_t crack_db_t:file { read getattr lock ioctl };

	 	 	 	
##### end usermanage_read_crack_db(remote_login_t) depth: 0
 	

	



	



	


########################################
#
# Declarations
#


#
# selinux_config_t is the type applied to
# /etc/selinux/config
#
# cjp: this is out of order due to rules
# in the domain_type interface
# (fix dup decl)
 	 	 	 	
##### begin files_type(selinux_config_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(selinux_config_t) depth: 2
 	
	
	


	allow selinux_config_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(selinux_config_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(selinux_config_t) depth: 2
 	
	
	


	allow selinux_config_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(selinux_config_t) depth: 1
 	
	typeattribute selinux_config_t file_type;

	 	 	 	
##### end files_type(selinux_config_t) depth: 0
 	

 	 	 	 	
##### begin domain_type(checkpolicy_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(checkpolicy_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute checkpolicy_t domain;

	# allow the domain to read its /proc/pid entries
	allow checkpolicy_t self:dir { read getattr lock search ioctl };
	allow checkpolicy_t self:lnk_file { read getattr lock ioctl };
	allow checkpolicy_t self:file { getattr read write append ioctl lock };

	# allow checkpolicy_t to create child processes in this domain
	allow checkpolicy_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types checkpolicy_t;
		role sysadm_r types checkpolicy_t;
		role user_r types checkpolicy_t;
		role staff_r types checkpolicy_t;
	

	 	 	 	
##### end domain_base_type(checkpolicy_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(checkpolicy_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(checkpolicy_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(checkpolicy_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(checkpolicy_t) depth: 3
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(checkpolicy_t) depth: 2
 	
	allow checkpolicy_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(checkpolicy_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t root_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(checkpolicy_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(checkpolicy_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t init_t:process signull;

	 	 	 	
##### end init_signull(checkpolicy_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(checkpolicy_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(checkpolicy_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(checkpolicy_t) depth: 2
 	
	
	


	dontaudit checkpolicy_t security_t:dir search;
	dontaudit checkpolicy_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(checkpolicy_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(checkpolicy_t) depth: 2
 	
	
	


	dontaudit checkpolicy_t selinux_config_t:dir search;
	dontaudit checkpolicy_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(checkpolicy_t) depth: 0
 	
role system_r types checkpolicy_t;

 	 	 	 	
##### begin domain_entry_file(checkpolicy_t,checkpolicy_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(checkpolicy_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(checkpolicy_exec_t) depth: 3
 	
	
	


	allow checkpolicy_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(checkpolicy_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(checkpolicy_exec_t) depth: 3
 	
	
	


	allow checkpolicy_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(checkpolicy_exec_t) depth: 2
 	
	typeattribute checkpolicy_exec_t file_type;

	 	 	 	
##### end files_type(checkpolicy_exec_t) depth: 1
 	

	allow checkpolicy_t checkpolicy_exec_t:file entrypoint;
	allow checkpolicy_t checkpolicy_exec_t:file { read getattr lock execute ioctl };

	typeattribute checkpolicy_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(checkpolicy_t,checkpolicy_exec_t) depth: 0
 	

#
# default_context_t is the type applied to
# /etc/selinux/*/contexts/*
#
 	 	 	 	
##### begin files_type(default_context_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(default_context_t) depth: 2
 	
	
	


	allow default_context_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(default_context_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(default_context_t) depth: 2
 	
	
	


	allow default_context_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(default_context_t) depth: 1
 	
	typeattribute default_context_t file_type;

	 	 	 	
##### end files_type(default_context_t) depth: 0
 	 

#
# file_context_t is the type applied to
# /etc/selinux/*/contexts/files
#
 	 	 	 	
##### begin files_type(file_context_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(file_context_t) depth: 2
 	
	
	


	allow file_context_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(file_context_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(file_context_t) depth: 2
 	
	
	


	allow file_context_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(file_context_t) depth: 1
 	
	typeattribute file_context_t file_type;

	 	 	 	
##### end files_type(file_context_t) depth: 0
 	

 	 	 	 	
##### begin domain_type(load_policy_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(load_policy_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute load_policy_t domain;

	# allow the domain to read its /proc/pid entries
	allow load_policy_t self:dir { read getattr lock search ioctl };
	allow load_policy_t self:lnk_file { read getattr lock ioctl };
	allow load_policy_t self:file { getattr read write append ioctl lock };

	# allow load_policy_t to create child processes in this domain
	allow load_policy_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types load_policy_t;
		role sysadm_r types load_policy_t;
		role user_r types load_policy_t;
		role staff_r types load_policy_t;
	

	 	 	 	
##### end domain_base_type(load_policy_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(load_policy_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(load_policy_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(load_policy_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(load_policy_t) depth: 3
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(load_policy_t) depth: 2
 	
	allow load_policy_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(load_policy_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t root_t:dir { read getattr lock search ioctl };
	allow load_policy_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(load_policy_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(load_policy_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t init_t:process signull;

	 	 	 	
##### end init_signull(load_policy_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(load_policy_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(load_policy_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(load_policy_t) depth: 2
 	
	
	


	dontaudit load_policy_t security_t:dir search;
	dontaudit load_policy_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(load_policy_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(load_policy_t) depth: 2
 	
	
	


	dontaudit load_policy_t selinux_config_t:dir search;
	dontaudit load_policy_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(load_policy_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(load_policy_t) depth: 0
 	
role system_r types load_policy_t;

 	 	 	 	
##### begin domain_entry_file(load_policy_t,load_policy_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(load_policy_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(load_policy_exec_t) depth: 3
 	
	
	


	allow load_policy_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(load_policy_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(load_policy_exec_t) depth: 3
 	
	
	


	allow load_policy_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(load_policy_exec_t) depth: 2
 	
	typeattribute load_policy_exec_t file_type;

	 	 	 	
##### end files_type(load_policy_exec_t) depth: 1
 	

	allow load_policy_t load_policy_exec_t:file entrypoint;
	allow load_policy_t load_policy_exec_t:file { read getattr lock execute ioctl };

	typeattribute load_policy_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(load_policy_t,load_policy_exec_t) depth: 0
 	

 	 	 	 	
##### begin domain_role_change_exemption(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t can_change_process_role;

	 	 	 	
##### end domain_role_change_exemption(newrole_t) depth: 0
 	
 	 	 	 	
##### begin domain_obj_id_change_exemption(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(newrole_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(newrole_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(newrole_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute newrole_t domain;

	# allow the domain to read its /proc/pid entries
	allow newrole_t self:dir { read getattr lock search ioctl };
	allow newrole_t self:lnk_file { read getattr lock ioctl };
	allow newrole_t self:file { getattr read write append ioctl lock };

	# allow newrole_t to create child processes in this domain
	allow newrole_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types newrole_t;
		role sysadm_r types newrole_t;
		role user_r types newrole_t;
		role staff_r types newrole_t;
	

	 	 	 	
##### end domain_base_type(newrole_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(newrole_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(newrole_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(newrole_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(newrole_t) depth: 2
 	
	allow newrole_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(newrole_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(newrole_t) depth: 2
 	
	
	


	allow newrole_t root_t:dir { read getattr lock search ioctl };
	allow newrole_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(newrole_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(newrole_t) depth: 2
 	
	
	


	allow newrole_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(newrole_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(newrole_t) depth: 2
 	
	
	


	allow newrole_t init_t:process signull;

	 	 	 	
##### end init_signull(newrole_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(newrole_t) depth: 2
 	
	
	


	allow newrole_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(newrole_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(newrole_t) depth: 2
 	
	
	


	allow newrole_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(newrole_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(newrole_t) depth: 2
 	
	
	


	dontaudit newrole_t security_t:dir search;
	dontaudit newrole_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(newrole_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(newrole_t) depth: 2
 	
	
	


	dontaudit newrole_t selinux_config_t:dir search;
	dontaudit newrole_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(newrole_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(newrole_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t privfd;

	 	 	 	
##### end domain_interactive_fd(newrole_t) depth: 0
 	

 	 	 	 	
##### begin domain_entry_file(newrole_t,newrole_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(newrole_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(newrole_exec_t) depth: 3
 	
	
	


	allow newrole_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(newrole_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(newrole_exec_t) depth: 3
 	
	
	


	allow newrole_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(newrole_exec_t) depth: 2
 	
	typeattribute newrole_exec_t file_type;

	 	 	 	
##### end files_type(newrole_exec_t) depth: 1
 	

	allow newrole_t newrole_exec_t:file entrypoint;
	allow newrole_t newrole_exec_t:file { read getattr lock execute ioctl };

	typeattribute newrole_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(newrole_t,newrole_exec_t) depth: 0
 	

#
# policy_config_t is the type of /etc/security/selinux/*
# the security server policy configuration.
#
 	 	 	 	
##### begin files_type(policy_config_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(policy_config_t) depth: 2
 	
	
	


	allow policy_config_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(policy_config_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(policy_config_t) depth: 2
 	
	
	


	allow policy_config_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(policy_config_t) depth: 1
 	
	typeattribute policy_config_t file_type;

	 	 	 	
##### end files_type(policy_config_t) depth: 0
 	

neverallow ~can_relabelto_binary_policy policy_config_t:file relabelto;
#neverallow ~can_write_binary_policy policy_config_t:file { write append };

#
# policy_src_t is the type of the policy source
# files.
#
 	 	 	 	
##### begin files_type(policy_src_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(policy_src_t) depth: 2
 	
	
	


	allow policy_src_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(policy_src_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(policy_src_t) depth: 2
 	
	
	


	allow policy_src_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(policy_src_t) depth: 1
 	
	typeattribute policy_src_t file_type;

	 	 	 	
##### end files_type(policy_src_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(restorecon_t) depth: 1
 	
	
	


	typeattribute restorecon_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin init_system_domain(restorecon_t,restorecon_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(restorecon_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(restorecon_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute restorecon_t domain;

	# allow the domain to read its /proc/pid entries
	allow restorecon_t self:dir { read getattr lock search ioctl };
	allow restorecon_t self:lnk_file { read getattr lock ioctl };
	allow restorecon_t self:file { getattr read write append ioctl lock };

	# allow restorecon_t to create child processes in this domain
	allow restorecon_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types restorecon_t;
		role sysadm_r types restorecon_t;
		role user_r types restorecon_t;
		role staff_r types restorecon_t;
	

	 	 	 	
##### end domain_base_type(restorecon_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(restorecon_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(restorecon_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(restorecon_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(restorecon_t) depth: 4
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(restorecon_t) depth: 3
 	
	allow restorecon_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(restorecon_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t root_t:dir { read getattr lock search ioctl };
	allow restorecon_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(restorecon_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(restorecon_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t init_t:process signull;

	 	 	 	
##### end init_signull(restorecon_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(restorecon_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(restorecon_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(restorecon_t) depth: 3
 	
	
	


	dontaudit restorecon_t security_t:dir search;
	dontaudit restorecon_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(restorecon_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(restorecon_t) depth: 3
 	
	
	


	dontaudit restorecon_t selinux_config_t:dir search;
	dontaudit restorecon_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(restorecon_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(restorecon_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(restorecon_t,restorecon_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(restorecon_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(restorecon_exec_t) depth: 4
 	
	
	


	allow restorecon_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(restorecon_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(restorecon_exec_t) depth: 4
 	
	
	


	allow restorecon_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(restorecon_exec_t) depth: 3
 	
	typeattribute restorecon_exec_t file_type;

	 	 	 	
##### end files_type(restorecon_exec_t) depth: 2
 	

	allow restorecon_t restorecon_exec_t:file entrypoint;
	allow restorecon_t restorecon_exec_t:file { read getattr lock execute ioctl };

	typeattribute restorecon_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(restorecon_t,restorecon_exec_t) depth: 1
 	

	role system_r types restorecon_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,restorecon_exec_t,restorecon_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,restorecon_exec_t,restorecon_t) depth: 3
 	
	allow initrc_t restorecon_exec_t:file { getattr read execute };
	allow initrc_t restorecon_t:process transition;
	dontaudit initrc_t restorecon_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,restorecon_exec_t,restorecon_t) depth: 2
 	
	type_transition initrc_t restorecon_exec_t:process restorecon_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,restorecon_exec_t,restorecon_t) depth: 1
 	

	allow initrc_t restorecon_t:fd use;
	allow restorecon_t initrc_t:fd use;
	allow restorecon_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow restorecon_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(restorecon_t,restorecon_exec_t) depth: 0
 	
role system_r types restorecon_t;

 	 	 	 	
##### begin domain_type(run_init_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(run_init_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute run_init_t domain;

	# allow the domain to read its /proc/pid entries
	allow run_init_t self:dir { read getattr lock search ioctl };
	allow run_init_t self:lnk_file { read getattr lock ioctl };
	allow run_init_t self:file { getattr read write append ioctl lock };

	# allow run_init_t to create child processes in this domain
	allow run_init_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types run_init_t;
		role sysadm_r types run_init_t;
		role user_r types run_init_t;
		role staff_r types run_init_t;
	

	 	 	 	
##### end domain_base_type(run_init_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(run_init_t) depth: 2
 	
	
	


	allow run_init_t device_t:dir { read getattr lock search ioctl };
	allow run_init_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(run_init_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(run_init_t) depth: 2
 	
	
	


	allow run_init_t device_t:dir { read getattr lock search ioctl };
	allow run_init_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(run_init_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(run_init_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(run_init_t) depth: 3
 	
	
	


	allow run_init_t device_t:dir { read getattr lock search ioctl };
	allow run_init_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(run_init_t) depth: 2
 	
	allow run_init_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(run_init_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(run_init_t) depth: 2
 	
	
	


	allow run_init_t root_t:dir { read getattr lock search ioctl };
	allow run_init_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(run_init_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(run_init_t) depth: 2
 	
	
	


	allow run_init_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(run_init_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(run_init_t) depth: 2
 	
	
	


	allow run_init_t init_t:process signull;

	 	 	 	
##### end init_signull(run_init_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(run_init_t) depth: 2
 	
	
	


	allow run_init_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(run_init_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(run_init_t) depth: 2
 	
	
	


	allow run_init_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(run_init_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(run_init_t) depth: 2
 	
	
	


	dontaudit run_init_t security_t:dir search;
	dontaudit run_init_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(run_init_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(run_init_t) depth: 2
 	
	
	


	dontaudit run_init_t selinux_config_t:dir search;
	dontaudit run_init_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(run_init_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(run_init_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(run_init_t,run_init_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(run_init_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(run_init_exec_t) depth: 3
 	
	
	


	allow run_init_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(run_init_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(run_init_exec_t) depth: 3
 	
	
	


	allow run_init_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(run_init_exec_t) depth: 2
 	
	typeattribute run_init_exec_t file_type;

	 	 	 	
##### end files_type(run_init_exec_t) depth: 1
 	

	allow run_init_t run_init_exec_t:file entrypoint;
	allow run_init_t run_init_exec_t:file { read getattr lock execute ioctl };

	typeattribute run_init_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(run_init_t,run_init_exec_t) depth: 0
 	
 	 	 	 	
##### begin domain_system_change_exemption(run_init_t) depth: 1
 	
	
	


	typeattribute run_init_t can_system_change;

	 	 	 	
##### end domain_system_change_exemption(run_init_t) depth: 0
 	

 	 	 	 	
##### begin domain_type(semanage_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(semanage_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute semanage_t domain;

	# allow the domain to read its /proc/pid entries
	allow semanage_t self:dir { read getattr lock search ioctl };
	allow semanage_t self:lnk_file { read getattr lock ioctl };
	allow semanage_t self:file { getattr read write append ioctl lock };

	# allow semanage_t to create child processes in this domain
	allow semanage_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types semanage_t;
		role sysadm_r types semanage_t;
		role user_r types semanage_t;
		role staff_r types semanage_t;
	

	 	 	 	
##### end domain_base_type(semanage_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(semanage_t) depth: 2
 	
	
	


	allow semanage_t device_t:dir { read getattr lock search ioctl };
	allow semanage_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(semanage_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(semanage_t) depth: 2
 	
	
	


	allow semanage_t device_t:dir { read getattr lock search ioctl };
	allow semanage_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(semanage_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(semanage_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(semanage_t) depth: 3
 	
	
	


	allow semanage_t device_t:dir { read getattr lock search ioctl };
	allow semanage_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(semanage_t) depth: 2
 	
	allow semanage_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(semanage_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(semanage_t) depth: 2
 	
	
	


	allow semanage_t root_t:dir { read getattr lock search ioctl };
	allow semanage_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(semanage_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(semanage_t) depth: 2
 	
	
	


	allow semanage_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(semanage_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(semanage_t) depth: 2
 	
	
	


	allow semanage_t init_t:process signull;

	 	 	 	
##### end init_signull(semanage_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(semanage_t) depth: 2
 	
	
	


	allow semanage_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(semanage_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(semanage_t) depth: 2
 	
	
	


	allow semanage_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(semanage_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(semanage_t) depth: 2
 	
	
	


	dontaudit semanage_t security_t:dir search;
	dontaudit semanage_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(semanage_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(semanage_t) depth: 2
 	
	
	


	dontaudit semanage_t selinux_config_t:dir search;
	dontaudit semanage_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(semanage_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(semanage_t) depth: 0
 	

 	 	 	 	
##### begin domain_entry_file(semanage_t,semanage_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(semanage_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(semanage_exec_t) depth: 3
 	
	
	


	allow semanage_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(semanage_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(semanage_exec_t) depth: 3
 	
	
	


	allow semanage_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(semanage_exec_t) depth: 2
 	
	typeattribute semanage_exec_t file_type;

	 	 	 	
##### end files_type(semanage_exec_t) depth: 1
 	

	allow semanage_t semanage_exec_t:file entrypoint;
	allow semanage_t semanage_exec_t:file { read getattr lock execute ioctl };

	typeattribute semanage_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(semanage_t,semanage_exec_t) depth: 0
 	
role system_r types semanage_t;

 	 	 	 	
##### begin files_type(semanage_store_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(semanage_store_t) depth: 2
 	
	
	


	allow semanage_store_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(semanage_store_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(semanage_store_t) depth: 2
 	
	
	


	allow semanage_store_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(semanage_store_t) depth: 1
 	
	typeattribute semanage_store_t file_type;

	 	 	 	
##### end files_type(semanage_store_t) depth: 0
 	

 	 	 	 	
##### begin files_type(semanage_read_lock_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(semanage_read_lock_t) depth: 2
 	
	
	


	allow semanage_read_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(semanage_read_lock_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(semanage_read_lock_t) depth: 2
 	
	
	


	allow semanage_read_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(semanage_read_lock_t) depth: 1
 	
	typeattribute semanage_read_lock_t file_type;

	 	 	 	
##### end files_type(semanage_read_lock_t) depth: 0
 	

 	 	 	 	
##### begin files_type(semanage_trans_lock_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(semanage_trans_lock_t) depth: 2
 	
	
	


	allow semanage_trans_lock_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(semanage_trans_lock_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(semanage_trans_lock_t) depth: 2
 	
	
	


	allow semanage_trans_lock_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(semanage_trans_lock_t) depth: 1
 	
	typeattribute semanage_trans_lock_t file_type;

	 	 	 	
##### end files_type(semanage_trans_lock_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(setfiles_t) depth: 1
 	
	
	


	typeattribute setfiles_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(setfiles_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(setfiles_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute setfiles_t domain;

	# allow the domain to read its /proc/pid entries
	allow setfiles_t self:dir { read getattr lock search ioctl };
	allow setfiles_t self:lnk_file { read getattr lock ioctl };
	allow setfiles_t self:file { getattr read write append ioctl lock };

	# allow setfiles_t to create child processes in this domain
	allow setfiles_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types setfiles_t;
		role sysadm_r types setfiles_t;
		role user_r types setfiles_t;
		role staff_r types setfiles_t;
	

	 	 	 	
##### end domain_base_type(setfiles_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(setfiles_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(setfiles_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(setfiles_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(setfiles_t) depth: 3
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(setfiles_t) depth: 2
 	
	allow setfiles_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(setfiles_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t root_t:dir { read getattr lock search ioctl };
	allow setfiles_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(setfiles_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(setfiles_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t init_t:process signull;

	 	 	 	
##### end init_signull(setfiles_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(setfiles_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(setfiles_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(setfiles_t) depth: 2
 	
	
	


	dontaudit setfiles_t security_t:dir search;
	dontaudit setfiles_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(setfiles_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(setfiles_t) depth: 2
 	
	
	


	dontaudit setfiles_t selinux_config_t:dir search;
	dontaudit setfiles_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(setfiles_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(setfiles_t) depth: 0
 	
role system_r types setfiles_t;

 	 	 	 	
##### begin domain_entry_file(setfiles_t,setfiles_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(setfiles_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(setfiles_exec_t) depth: 3
 	
	
	


	allow setfiles_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(setfiles_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(setfiles_exec_t) depth: 3
 	
	
	


	allow setfiles_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(setfiles_exec_t) depth: 2
 	
	typeattribute setfiles_exec_t file_type;

	 	 	 	
##### end files_type(setfiles_exec_t) depth: 1
 	

	allow setfiles_t setfiles_exec_t:file entrypoint;
	allow setfiles_t setfiles_exec_t:file { read getattr lock execute ioctl };

	typeattribute setfiles_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(setfiles_t,setfiles_exec_t) depth: 0
 	



########################################
#
# Checkpolicy local policy
#

allow checkpolicy_t self:capability dac_override;

# able to create and modify binary policy files
allow checkpolicy_t policy_config_t:dir { read getattr lock search ioctl add_name remove_name write };
allow checkpolicy_t policy_config_t:file { create ioctl read getattr lock write setattr append link unlink rename };

# allow test policies to be created in src directories
allow checkpolicy_t policy_src_t:dir { read getattr lock search ioctl add_name remove_name write };
type_transition checkpolicy_t policy_src_t:file policy_config_t;

# only allow read of policy source files
allow checkpolicy_t policy_src_t:dir { read getattr lock search ioctl };
allow checkpolicy_t policy_src_t:file { read getattr lock ioctl };
allow checkpolicy_t policy_src_t:lnk_file { read getattr lock ioctl };
allow checkpolicy_t selinux_config_t:dir search;

 	 	 	 	
##### begin fs_getattr_xattr_fs(checkpolicy_t) depth: 1
 	
	
	


	allow checkpolicy_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(checkpolicy_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(checkpolicy_t) depth: 1
 	
	allow checkpolicy_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(checkpolicy_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(checkpolicy_t) depth: 1
 	
	
	


	allow checkpolicy_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(checkpolicy_t) depth: 0
 	

 	 	 	 	
##### begin files_list_usr(checkpolicy_t) depth: 1
 	
	
	


	allow checkpolicy_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(checkpolicy_t) depth: 0
 	
# directory search permissions for path to source and binary policy files
 	 	 	 	
##### begin files_search_etc(checkpolicy_t) depth: 1
 	
	
	


	allow checkpolicy_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(checkpolicy_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(checkpolicy_t) depth: 1
 	
	
	


	allow checkpolicy_t init_t:fd use;

	 	 	 	
##### end init_use_fds(checkpolicy_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(checkpolicy_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(checkpolicy_t) depth: 3
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(checkpolicy_t) depth: 2
 	
	allow checkpolicy_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(checkpolicy_t) depth: 1
 	
	allow checkpolicy_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(checkpolicy_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(checkpolicy_t) depth: 1
 	
	allow checkpolicy_t lib_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t lib_t:lnk_file { read getattr lock ioctl };
	allow checkpolicy_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow checkpolicy_t ld_so_t:file { read getattr lock execute ioctl };
	allow checkpolicy_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(checkpolicy_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(checkpolicy_t) depth: 1
 	
	allow checkpolicy_t lib_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t lib_t:lnk_file { read getattr lock ioctl };
	allow checkpolicy_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow checkpolicy_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow checkpolicy_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(checkpolicy_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(checkpolicy_t) depth: 1
 	
	
	


	allow checkpolicy_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(checkpolicy_t) depth: 0
 	


	 	 	 	 	
##### begin term_use_generic_ptys(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(checkpolicy_t) depth: 1
 	
	allow checkpolicy_t devpts_t:dir { getattr search read lock ioctl };
	allow checkpolicy_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(checkpolicy_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_unallocated_ttys(checkpolicy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(checkpolicy_t) depth: 2
 	
	
	


	allow checkpolicy_t device_t:dir { read getattr lock search ioctl };
	allow checkpolicy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(checkpolicy_t) depth: 1
 	
	allow checkpolicy_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(checkpolicy_t) depth: 0
 	


########################################
#
# Load_policy local policy
#

allow load_policy_t self:capability dac_override;

# only allow read of policy config files
allow load_policy_t policy_src_t:dir search;
allow load_policy_t policy_config_t:dir { read getattr lock search ioctl };
allow load_policy_t policy_config_t:file { read getattr lock ioctl };
allow load_policy_t policy_config_t:lnk_file { read getattr lock ioctl };

allow load_policy_t selinux_config_t:dir { read getattr lock search ioctl };
allow load_policy_t selinux_config_t:file { read getattr lock ioctl };
allow load_policy_t selinux_config_t:lnk_file { read getattr lock ioctl };

 	 	 	 	
##### begin domain_use_interactive_fds(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(load_policy_t) depth: 0
 	

# for mcs.conf
 	 	 	 	
##### begin files_read_etc_files(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t etc_t:dir { read getattr lock search ioctl };
	allow load_policy_t etc_t:file { read getattr lock ioctl };
	allow load_policy_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(load_policy_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t etc_t:dir { read getattr lock search ioctl };
	allow load_policy_t etc_runtime_t:file { read getattr lock ioctl };
	allow load_policy_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(load_policy_t) depth: 1
 	
	
	


	typeattribute load_policy_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(load_policy_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t proc_t:dir { read getattr lock search ioctl };
	allow load_policy_t proc_t:lnk_file { getattr read };
	allow load_policy_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(load_policy_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(load_policy_t) depth: 0
 	
 	 	 	 	
##### begin selinux_load_policy(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t security_t:dir { read search getattr };
	allow load_policy_t security_t:file { getattr read write };
	typeattribute load_policy_t can_load_policy;

	if(!secure_mode_policyload) {
		allow load_policy_t security_t:security load_policy;
		auditallow load_policy_t security_t:security load_policy;
	}

	 	 	 	
##### end selinux_load_policy(load_policy_t) depth: 0
 	
 	 	 	 	
##### begin selinux_set_boolean(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t security_t:dir search;
	allow load_policy_t security_t:dir { getattr search read };
	allow load_policy_t security_t:file { getattr read write };

	if(!secure_mode_policyload) {
		allow load_policy_t security_t:security setbool;
		auditallow load_policy_t security_t:security setbool;
	}

	 	 	 	
##### end selinux_set_boolean(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin term_use_console(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(load_policy_t) depth: 1
 	
	allow load_policy_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(load_policy_t) depth: 0
 	
 	 	 	 	
##### begin term_list_ptys(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(load_policy_t) depth: 1
 	
	allow load_policy_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin init_use_script_fds(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(load_policy_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(load_policy_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(load_policy_t) depth: 3
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(load_policy_t) depth: 2
 	
	allow load_policy_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(load_policy_t) depth: 1
 	
	allow load_policy_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(load_policy_t) depth: 1
 	
	allow load_policy_t lib_t:dir { read getattr lock search ioctl };
	allow load_policy_t lib_t:lnk_file { read getattr lock ioctl };
	allow load_policy_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow load_policy_t ld_so_t:file { read getattr lock execute ioctl };
	allow load_policy_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(load_policy_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(load_policy_t) depth: 1
 	
	allow load_policy_t lib_t:dir { read getattr lock search ioctl };
	allow load_policy_t lib_t:lnk_file { read getattr lock ioctl };
	allow load_policy_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow load_policy_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow load_policy_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(load_policy_t) depth: 1
 	
	# FIXME: load_policy_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(load_policy_t) depth: 1
 	
	allow load_policy_t locale_t:dir { read getattr lock search ioctl };
	allow load_policy_t locale_t:lnk_file { read getattr lock ioctl };
	allow load_policy_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(load_policy_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(load_policy_t) depth: 3
 	
	
	


	allow load_policy_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(load_policy_t) depth: 2
 	
	allow load_policy_t lib_t:dir { read getattr lock search ioctl };
	allow load_policy_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(load_policy_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(load_policy_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(load_policy_t) depth: 1
 	
	
	


	allow load_policy_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(load_policy_t) depth: 0
 	


	# cjp: cover up stray file descriptors.
	dontaudit load_policy_t selinux_config_t:file write;
	
	
		
		 	 	 	 	
##### begin unconfined_dontaudit_read_pipes(load_policy_t) depth: 1
 	
	
	


	dontaudit load_policy_t unconfined_t:fifo_file read;

	 	 	 	
##### end unconfined_dontaudit_read_pipes(load_policy_t) depth: 0
 	
	
	




	 	 	 	 	
##### begin term_use_unallocated_ttys(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(load_policy_t) depth: 1
 	
	allow load_policy_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(load_policy_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_generic_ptys(load_policy_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(load_policy_t) depth: 2
 	
	
	


	allow load_policy_t device_t:dir { read getattr lock search ioctl };
	allow load_policy_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(load_policy_t) depth: 1
 	
	allow load_policy_t devpts_t:dir { getattr search read lock ioctl };
	allow load_policy_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(load_policy_t) depth: 0
 	


########################################
#
# Newrole local policy
#

allow newrole_t self:capability { fowner setuid setgid dac_override };
allow newrole_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execheap execstack };
allow newrole_t self:process setexec;
allow newrole_t self:fd use;
allow newrole_t self:fifo_file { getattr read write append ioctl lock };
allow newrole_t self:sock_file { read getattr lock ioctl };
allow newrole_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow newrole_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow newrole_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow newrole_t self:msg { send receive };
allow newrole_t self:unix_dgram_socket sendto;
allow newrole_t self:unix_stream_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept } connectto };
allow newrole_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };


allow newrole_t { selinux_config_t default_context_t }:dir { read getattr lock search ioctl };
allow newrole_t { selinux_config_t default_context_t }:file { read getattr lock ioctl };
allow newrole_t { selinux_config_t default_context_t }:lnk_file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_read_system_state(newrole_t) depth: 1
 	
	
	


	allow newrole_t proc_t:dir { read getattr lock search ioctl };
	allow newrole_t proc_t:lnk_file { getattr read };
	allow newrole_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(newrole_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(newrole_t) depth: 1
 	
	
	


	allow newrole_t proc_t:dir search;
	allow newrole_t sysctl_t:dir { read getattr lock search ioctl };
	allow newrole_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow newrole_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(newrole_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_urand(newrole_t) depth: 1
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(newrole_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(newrole_t) depth: 1
 	
	
	


	allow newrole_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(newrole_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(newrole_t) depth: 1
 	
	
	


	allow newrole_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(newrole_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(newrole_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(newrole_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_upgrade(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t mlsfileupgrade;

	 	 	 	
##### end mls_file_upgrade(newrole_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(newrole_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_set_level(newrole_t) depth: 1
 	
	
	


	typeattribute newrole_t mlsprocsetsl;

	 	 	 	
##### end mls_process_set_level(newrole_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(newrole_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(newrole_t) depth: 2
 	
	
	


	allow newrole_t proc_t:dir { read getattr lock search ioctl };
	allow newrole_t proc_t:lnk_file { getattr read };
	allow newrole_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(newrole_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(newrole_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(newrole_t) depth: 1
 	
	
	


	allow newrole_t security_t:dir { read search getattr };
	allow newrole_t security_t:file { getattr read write };
	allow newrole_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(newrole_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(newrole_t) depth: 1
 	
	
	


	allow newrole_t security_t:dir { read search getattr };
	allow newrole_t security_t:file { getattr read write };
	allow newrole_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(newrole_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(newrole_t) depth: 1
 	
	
	


	allow newrole_t security_t:dir { read search getattr };
	allow newrole_t security_t:file { getattr read write };
	allow newrole_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(newrole_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(newrole_t) depth: 1
 	
	
	


	allow newrole_t security_t:dir { read search getattr };
	allow newrole_t security_t:file { getattr read write };
	allow newrole_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(newrole_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(newrole_t) depth: 1
 	
	
	


	allow newrole_t security_t:dir { read search getattr };
	allow newrole_t security_t:file { getattr read write };
	allow newrole_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(newrole_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(newrole_t) depth: 1
 	
	allow newrole_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(newrole_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(newrole_t) depth: 1
 	
	allow newrole_t devpts_t:dir { read getattr lock search ioctl };
	allow newrole_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(newrole_t) depth: 0
 	
 	 	 	 	
##### begin term_relabel_all_user_ttys(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(newrole_t) depth: 1
 	
	allow newrole_t ttynode:chr_file { relabelfrom relabelto };

	 	 	 	
##### end term_relabel_all_user_ttys(newrole_t) depth: 0
 	
 	 	 	 	
##### begin term_relabel_all_user_ptys(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(newrole_t) depth: 1
 	
	allow newrole_t devpts_t:dir search;
	allow newrole_t ptynode:chr_file { relabelfrom relabelto };

	 	 	 	
##### end term_relabel_all_user_ptys(newrole_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(newrole_t) depth: 1
 	
	
	


	dontaudit newrole_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(newrole_t) depth: 0
 	

 	 	 	 	
##### begin auth_domtrans_chk_passwd(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(newrole_t) depth: 2
 	
	
	


	allow newrole_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(newrole_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(newrole_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(newrole_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	allow newrole_t chkpwd_exec_t:file { getattr read execute };
	allow newrole_t system_chkpwd_t:process transition;
	dontaudit newrole_t system_chkpwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(newrole_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	type_transition newrole_t chkpwd_exec_t:process system_chkpwd_t;
 	 	 	 	
##### end domain_auto_trans(newrole_t,chkpwd_exec_t,system_chkpwd_t) depth: 1
 	

	allow newrole_t self:capability { audit_write audit_control };
	allow newrole_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

	allow newrole_t system_chkpwd_t:fd use;
	allow system_chkpwd_t newrole_t:fd use;
	allow system_chkpwd_t newrole_t:fifo_file { getattr read write append ioctl lock };
	allow system_chkpwd_t newrole_t:process sigchld;

	dontaudit newrole_t shadow_t:file { getattr read };

	 	 	 	 	
##### begin dev_read_rand(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(newrole_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(newrole_t) depth: 2
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(newrole_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_certs(newrole_t) depth: 2
 	
	
	


	allow newrole_t cert_t:dir { read getattr lock search ioctl };
	allow newrole_t cert_t:file { read getattr lock ioctl };
	allow newrole_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(newrole_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(newrole_t) depth: 2
 	
	
	


	allow newrole_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow newrole_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(newrole_t) depth: 3
 	
	
	


	allow newrole_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(newrole_t) depth: 4
 	
	
	


	allow newrole_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(newrole_t) depth: 4
 	
	
	


	allow newrole_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(newrole_t) depth: 4
 	
	
	


	allow newrole_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow newrole_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(newrole_t) depth: 4
 	
	
	


	allow newrole_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(newrole_t) depth: 4
 	
	
	


	allow newrole_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(newrole_t) depth: 4
 	
	
	


	allow newrole_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(newrole_t) depth: 4
 	
	
	


	allow newrole_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(newrole_t) depth: 4
 	
	
	


	allow newrole_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(newrole_t) depth: 3
 	
	
	


	allow newrole_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(newrole_t) depth: 4
 	
	
	


	allow newrole_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(newrole_t) depth: 4
 	
	
	


	allow newrole_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(newrole_t) depth: 4
 	
	
	


	allow newrole_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(newrole_t) depth: 3
 	
	
	


	allow newrole_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(newrole_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(newrole_t) depth: 3
 	
	
	


	allow newrole_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(newrole_t) depth: 2
 	
	allow newrole_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(newrole_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(newrole_t) depth: 2
 	
	
	
		

	allow newrole_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(newrole_t) depth: 3
 	
	
	


	allow newrole_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(newrole_t) depth: 4
 	
	
	


	allow newrole_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow newrole_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(newrole_t) depth: 4
 	
	
	


	allow newrole_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(newrole_t) depth: 4
 	
	
	


	allow newrole_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(newrole_t) depth: 4
 	
	
	


	allow newrole_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(newrole_t) depth: 3
 	
	
	


	allow newrole_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(newrole_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(newrole_t) depth: 4
 	
	
	


	allow newrole_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(newrole_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(newrole_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(newrole_t) depth: 3
 	
	
	


	allow newrole_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(newrole_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(newrole_t) depth: 3
 	
	
	


	allow newrole_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(newrole_t) depth: 2
 	
	allow newrole_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(newrole_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_domtrans_chk_passwd(newrole_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_list_bin(newrole_t) depth: 1
 	
	
	


	allow newrole_t bin_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end corecmd_list_bin(newrole_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_read_bin_symlinks(newrole_t) depth: 1
 	
	
	


	allow newrole_t bin_t:dir search;
	allow newrole_t bin_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end corecmd_read_bin_symlinks(newrole_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(newrole_t) depth: 1
 	
	
	


	allow newrole_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(newrole_t) depth: 0
 	
# for when the user types "exec newrole" at the command line:
 	 	 	 	
##### begin domain_sigchld_interactive_fds(newrole_t) depth: 1
 	
	
	


	allow newrole_t privfd:process sigchld;

	 	 	 	
##### end domain_sigchld_interactive_fds(newrole_t) depth: 0
 	

# Write to utmp.
 	 	 	 	
##### begin init_rw_utmp(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(newrole_t) depth: 2
 	
	
	


	allow newrole_t var_t:dir { getattr search };
	allow newrole_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(newrole_t) depth: 1
 	
	allow newrole_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(newrole_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(newrole_t) depth: 1
 	
	
	


	allow newrole_t etc_t:dir { read getattr lock search ioctl };
	allow newrole_t etc_t:file { read getattr lock ioctl };
	allow newrole_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(newrole_t) depth: 0
 	
 	 	 	 	
##### begin files_read_var_files(newrole_t) depth: 1
 	
	
	


	allow newrole_t var_t:dir { getattr search };
	allow newrole_t var_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_var_files(newrole_t) depth: 0
 	
 	 	 	 	
##### begin files_read_var_symlinks(newrole_t) depth: 1
 	
	
	


	allow newrole_t var_t:dir { getattr search };
	allow newrole_t var_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_var_symlinks(newrole_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(newrole_t) depth: 2
 	
	
	


	allow newrole_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(newrole_t) depth: 1
 	
	allow newrole_t lib_t:dir { read getattr lock search ioctl };
	allow newrole_t lib_t:lnk_file { read getattr lock ioctl };
	allow newrole_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow newrole_t ld_so_t:file { read getattr lock execute ioctl };
	allow newrole_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(newrole_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(newrole_t) depth: 2
 	
	
	


	allow newrole_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(newrole_t) depth: 1
 	
	allow newrole_t lib_t:dir { read getattr lock search ioctl };
	allow newrole_t lib_t:lnk_file { read getattr lock ioctl };
	allow newrole_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow newrole_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow newrole_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(newrole_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(newrole_t) depth: 1
 	
	
	


	allow newrole_t devlog_t:lnk_file read;
	allow newrole_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow newrole_t syslogd_t:unix_dgram_socket sendto;
	allow newrole_t syslogd_t:unix_stream_socket connectto;
	allow newrole_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow newrole_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(newrole_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(newrole_t) depth: 3
 	
	
	


	allow newrole_t device_t:dir { read getattr lock search ioctl };
	allow newrole_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(newrole_t) depth: 2
 	
	allow newrole_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(newrole_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(newrole_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(newrole_t) depth: 2
 	
	
	


	allow newrole_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(newrole_t) depth: 1
 	
	# FIXME: newrole_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(newrole_t) depth: 2
 	
	
	


	allow newrole_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(newrole_t) depth: 1
 	
	allow newrole_t locale_t:dir { read getattr lock search ioctl };
	allow newrole_t locale_t:lnk_file { read getattr lock ioctl };
	allow newrole_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(newrole_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(newrole_t) depth: 3
 	
	
	


	allow newrole_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(newrole_t) depth: 2
 	
	allow newrole_t lib_t:dir { read getattr lock search ioctl };
	allow newrole_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(newrole_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(newrole_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(newrole_t) depth: 1
 	
	
	


	allow newrole_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(newrole_t) depth: 0
 	
# for some PAM modules and for cwd
 	 	 	 	
##### begin userdom_dontaudit_search_all_users_home_content(newrole_t) depth: 1
 	
	
	


	dontaudit newrole_t { home_dir_type home_type }:dir { getattr search };

	 	 	 	
##### end userdom_dontaudit_search_all_users_home_content(newrole_t) depth: 0
 	


	# newrole does not make any sense in
	# the targeted policy.  This is to
	# make sediff easier.
	if(!secure_mode) {
		 	 	 	 	
##### begin unconfined_domtrans(newrole_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(newrole_t,unconfined_exec_t,unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(newrole_t,unconfined_exec_t,unconfined_t) depth: 3
 	
	allow newrole_t unconfined_exec_t:file { getattr read execute };
	allow newrole_t unconfined_t:process transition;
	dontaudit newrole_t unconfined_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(newrole_t,unconfined_exec_t,unconfined_t) depth: 2
 	
	type_transition newrole_t unconfined_exec_t:process unconfined_t;
 	 	 	 	
##### end domain_auto_trans(newrole_t,unconfined_exec_t,unconfined_t) depth: 1
 	

	allow newrole_t unconfined_t:fd use;
	allow unconfined_t newrole_t:fd use;
	allow unconfined_t newrole_t:fifo_file { getattr read write append ioctl lock };
	allow unconfined_t newrole_t:process sigchld;

	 	 	 	
##### end unconfined_domtrans(newrole_t) depth: 0
 	
	}



	
		
	



	
		
	


########################################
#
# Restorecon local policy
#

allow restorecon_t self:capability { dac_override dac_read_search fowner };
allow restorecon_t self:fifo_file { getattr read write append ioctl lock };

allow restorecon_t { policy_src_t policy_config_t file_context_t selinux_config_t default_context_t }:dir { read getattr lock search ioctl };
allow restorecon_t { policy_src_t policy_config_t file_context_t selinux_config_t default_context_t }:file { read getattr lock ioctl };
allow restorecon_t { policy_src_t policy_config_t file_context_t selinux_config_t default_context_t }:lnk_file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_use_fds(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t kernel_t:fd use;

	 	 	 	
##### end kernel_use_fds(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rw_pipes(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t kernel_t:fifo_file { read write };

	 	 	 	
##### end kernel_rw_pipes(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t proc_t:dir { read getattr lock search ioctl };
	allow restorecon_t proc_t:lnk_file { getattr read };
	allow restorecon_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_dirs(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t unlabeled_t:dir { getattr search read relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_dirs(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_files(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(restorecon_t) depth: 1
 	
	allow restorecon_t unlabeled_t:file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_files(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_symlinks(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(restorecon_t) depth: 1
 	
	allow restorecon_t unlabeled_t:lnk_file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_symlinks(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_pipes(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(restorecon_t) depth: 1
 	
	allow restorecon_t unlabeled_t:fifo_file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_pipes(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_sockets(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(restorecon_t) depth: 1
 	
	allow restorecon_t unlabeled_t:sock_file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_sockets(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin dev_relabel_all_dev_nodes(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t device_node:dir { getattr relabelfrom };
	allow restorecon_t device_node:file { getattr relabelfrom };
	allow restorecon_t device_node:lnk_file { getattr relabelfrom };
	allow restorecon_t device_node:fifo_file { getattr relabelfrom };
	allow restorecon_t device_node:sock_file { getattr relabelfrom };
	allow restorecon_t { device_t device_node }:blk_file { getattr relabelfrom relabelto };
	allow restorecon_t { device_t device_node }:chr_file { getattr relabelfrom relabelto };

	 	 	 	
##### end dev_relabel_all_dev_nodes(restorecon_t) depth: 0
 	
# cjp: why is this needed?
 	 	 	 	
##### begin dev_rw_generic_files(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t device_t:dir search;
	allow restorecon_t device_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_generic_files(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(restorecon_t) depth: 1
 	
	
	


	typeattribute restorecon_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(restorecon_t) depth: 1
 	
	
	


	typeattribute restorecon_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_upgrade(restorecon_t) depth: 1
 	
	
	


	typeattribute restorecon_t mlsfileupgrade;

	 	 	 	
##### end mls_file_upgrade(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(restorecon_t) depth: 1
 	
	
	


	typeattribute restorecon_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(restorecon_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t proc_t:dir { read getattr lock search ioctl };
	allow restorecon_t proc_t:lnk_file { getattr read };
	allow restorecon_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(restorecon_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t security_t:dir { read search getattr };
	allow restorecon_t security_t:file { getattr read write };
	allow restorecon_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t security_t:dir { read search getattr };
	allow restorecon_t security_t:file { getattr read write };
	allow restorecon_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t security_t:dir { read search getattr };
	allow restorecon_t security_t:file { getattr read write };
	allow restorecon_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t security_t:dir { read search getattr };
	allow restorecon_t security_t:file { getattr read write };
	allow restorecon_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t security_t:dir { read search getattr };
	allow restorecon_t security_t:file { getattr read write };
	allow restorecon_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin term_use_unallocated_ttys(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(restorecon_t) depth: 1
 	
	allow restorecon_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ttys(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(restorecon_t) depth: 1
 	
	allow restorecon_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(restorecon_t) depth: 1
 	
	allow restorecon_t devpts_t:dir { read getattr lock search ioctl };
	allow restorecon_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t init_t:fd use;

	 	 	 	
##### end init_use_fds(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(restorecon_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(restorecon_t) depth: 2
 	
	allow restorecon_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(restorecon_t) depth: 1
 	
	allow restorecon_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin domain_dontaudit_search_all_domains_state(restorecon_t) depth: 1
 	
	
	


	dontaudit restorecon_t domain:dir { getattr search };

	 	 	 	
##### end domain_dontaudit_search_all_domains_state(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t etc_t:dir { read getattr lock search ioctl };
	allow restorecon_t etc_runtime_t:file { read getattr lock ioctl };
	allow restorecon_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t etc_t:dir { read getattr lock search ioctl };
	allow restorecon_t etc_t:file { read getattr lock ioctl };
	allow restorecon_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(restorecon_t) depth: 1
 	
	allow restorecon_t lib_t:dir { read getattr lock search ioctl };
	allow restorecon_t lib_t:lnk_file { read getattr lock ioctl };
	allow restorecon_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow restorecon_t ld_so_t:file { read getattr lock execute ioctl };
	allow restorecon_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(restorecon_t) depth: 1
 	
	allow restorecon_t lib_t:dir { read getattr lock search ioctl };
	allow restorecon_t lib_t:lnk_file { read getattr lock ioctl };
	allow restorecon_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow restorecon_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow restorecon_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t devlog_t:lnk_file read;
	allow restorecon_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow restorecon_t syslogd_t:unix_dgram_socket sendto;
	allow restorecon_t syslogd_t:unix_stream_socket connectto;
	allow restorecon_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow restorecon_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(restorecon_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(restorecon_t) depth: 3
 	
	
	


	allow restorecon_t device_t:dir { read getattr lock search ioctl };
	allow restorecon_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(restorecon_t) depth: 2
 	
	allow restorecon_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(restorecon_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(restorecon_t) depth: 0
 	

 	 	 	 	
##### begin files_relabel_all_files(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t { file_type  }:dir { { read getattr lock search ioctl } relabelfrom relabelto };
	allow restorecon_t { file_type  }:file { getattr relabelfrom relabelto };
	allow restorecon_t { file_type  }:lnk_file { getattr relabelfrom relabelto };
	allow restorecon_t { file_type  }:fifo_file { getattr relabelfrom relabelto };
	allow restorecon_t { file_type  }:sock_file { getattr relabelfrom relabelto };
	allow restorecon_t { file_type  }:blk_file { getattr relabelfrom };
	allow restorecon_t { file_type  }:chr_file { getattr relabelfrom };

	# satisfy the assertions:
	 	 	 	 	
##### begin seutil_relabelto_bin_policy(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t policy_config_t:file relabelto;
	typeattribute restorecon_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(restorecon_t) depth: 1
 	

	 	 	 	
##### end files_relabel_all_files(restorecon_t) depth: 0
 	
 	 	 	 	
##### begin files_list_all(restorecon_t) depth: 1
 	
	
	


	allow restorecon_t file_type:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_all(restorecon_t) depth: 0
 	
# this is to satisfy the assertion:
 	 	 	 	
##### begin auth_relabelto_shadow(restorecon_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(restorecon_t) depth: 2
 	
	
	


	allow restorecon_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(restorecon_t) depth: 1
 	
	allow restorecon_t shadow_t:file relabelto;
	typeattribute restorecon_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_relabelto_shadow(restorecon_t) depth: 0
 	




	 	 	 	 	
##### begin udev_dontaudit_rw_dgram_sockets(restorecon_t) depth: 1
 	
	
	


	dontaudit restorecon_t udev_t:unix_dgram_socket { read write };

	 	 	 	
##### end udev_dontaudit_rw_dgram_sockets(restorecon_t) depth: 0
 	



	
		
	


 
allow restorecon_t kernel_t:unix_dgram_socket { read write };

#################################
#
# Run_init local policy
#

 	 	 	 	
##### begin selinux_get_fs_mount(run_init_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(run_init_t) depth: 2
 	
	
	


	allow run_init_t proc_t:dir { read getattr lock search ioctl };
	allow run_init_t proc_t:lnk_file { getattr read };
	allow run_init_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(run_init_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(run_init_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(run_init_t) depth: 1
 	
	
	


	allow run_init_t security_t:dir { read search getattr };
	allow run_init_t security_t:file { getattr read write };
	allow run_init_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(run_init_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(run_init_t) depth: 1
 	
	
	


	allow run_init_t security_t:dir { read search getattr };
	allow run_init_t security_t:file { getattr read write };
	allow run_init_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(run_init_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(run_init_t) depth: 1
 	
	
	


	allow run_init_t security_t:dir { read search getattr };
	allow run_init_t security_t:file { getattr read write };
	allow run_init_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(run_init_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(run_init_t) depth: 1
 	
	
	


	allow run_init_t security_t:dir { read search getattr };
	allow run_init_t security_t:file { getattr read write };
	allow run_init_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(run_init_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(run_init_t) depth: 1
 	
	
	


	allow run_init_t security_t:dir { read search getattr };
	allow run_init_t security_t:file { getattr read write };
	allow run_init_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(run_init_t) depth: 0
 	


	


 
########################################
#
# semodule local policy
#

allow semanage_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };

allow semanage_t policy_config_t:file { read write };

 	 	 	 	
##### begin kernel_read_system_state(semanage_t) depth: 1
 	
	
	


	allow semanage_t proc_t:dir { read getattr lock search ioctl };
	allow semanage_t proc_t:lnk_file { getattr read };
	allow semanage_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(semanage_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(semanage_t) depth: 1
 	
	
	


	allow semanage_t proc_t:dir search;
	allow semanage_t sysctl_t:dir { read getattr lock search ioctl };
	allow semanage_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow semanage_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(semanage_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(semanage_t) depth: 1
 	
	
	


	allow semanage_t bin_t:dir { read getattr lock search ioctl };
	allow semanage_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow semanage_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(semanage_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(semanage_t) depth: 1
 	
	
	


	allow semanage_t sbin_t:dir { read getattr lock search ioctl };
	allow semanage_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow semanage_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(semanage_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(semanage_t) depth: 1
 	
	
	


	allow semanage_t etc_t:dir { read getattr lock search ioctl };
	allow semanage_t etc_t:file { read getattr lock ioctl };
	allow semanage_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(semanage_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(semanage_t) depth: 1
 	
	
	


	allow semanage_t usr_t:dir { read getattr lock search ioctl };
	allow semanage_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(semanage_t) depth: 0
 	
 	 	 	 	
##### begin files_list_pids(semanage_t) depth: 1
 	
	
	


	allow semanage_t var_t:dir { getattr search };
	allow semanage_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(semanage_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_write_down(semanage_t) depth: 1
 	
	
	


	typeattribute semanage_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(semanage_t) depth: 0
 	
 	 	 	 	
##### begin mls_rangetrans_target(semanage_t) depth: 1
 	
	
	


	typeattribute semanage_t mlsrangetrans;

	 	 	 	
##### end mls_rangetrans_target(semanage_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_enforce_mode(semanage_t) depth: 1
 	
	
	


	allow semanage_t security_t:dir { read search getattr };
	allow semanage_t security_t:file { getattr read };

	 	 	 	
##### end selinux_get_enforce_mode(semanage_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_terms(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(semanage_t) depth: 2
 	
	
	


	allow semanage_t device_t:dir { read getattr lock search ioctl };
	allow semanage_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(semanage_t) depth: 1
 	
	allow semanage_t devpts_t:dir { read getattr lock search ioctl };
	allow semanage_t { console_device_t tty_device_t ttynode ptynode }:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_all_terms(semanage_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(semanage_t) depth: 1
 	
	allow semanage_t lib_t:dir { read getattr lock search ioctl };
	allow semanage_t lib_t:lnk_file { read getattr lock ioctl };
	allow semanage_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow semanage_t ld_so_t:file { read getattr lock execute ioctl };
	allow semanage_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(semanage_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(semanage_t) depth: 2
 	
	
	


	allow semanage_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(semanage_t) depth: 1
 	
	allow semanage_t lib_t:dir { read getattr lock search ioctl };
	allow semanage_t lib_t:lnk_file { read getattr lock ioctl };
	allow semanage_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow semanage_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow semanage_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(semanage_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_lib_files(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(semanage_t) depth: 2
 	
	
	


	allow semanage_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(semanage_t) depth: 1
 	
	allow semanage_t lib_t:dir { read getattr lock search ioctl };
	allow semanage_t lib_t:lnk_file { read getattr lock ioctl };
	allow semanage_t lib_t:file { read getattr lock execute ioctl };

	 	 	 	
##### end libs_use_lib_files(semanage_t) depth: 0
 	

 	 	 	 	
##### begin seutil_search_default_contexts(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t { selinux_config_t default_context_t }:dir search;

	 	 	 	
##### end seutil_search_default_contexts(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_rw_file_contexts(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t selinux_config_t:dir search;
	allow semanage_t file_context_t:dir { read getattr lock search ioctl };
	allow semanage_t file_context_t:file { getattr read write append ioctl lock };
	allow semanage_t file_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_rw_file_contexts(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_domtrans_setfiles(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(semanage_t) depth: 2
 	
	
	


	allow semanage_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(semanage_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_search_sbin(semanage_t) depth: 2
 	
	
	


	allow semanage_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(semanage_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(semanage_t,setfiles_exec_t,setfiles_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(semanage_t,setfiles_exec_t,setfiles_t) depth: 3
 	
	allow semanage_t setfiles_exec_t:file { getattr read execute };
	allow semanage_t setfiles_t:process transition;
	dontaudit semanage_t setfiles_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(semanage_t,setfiles_exec_t,setfiles_t) depth: 2
 	
	type_transition semanage_t setfiles_exec_t:process setfiles_t;
 	 	 	 	
##### end domain_auto_trans(semanage_t,setfiles_exec_t,setfiles_t) depth: 1
 	

	allow semanage_t setfiles_t:fd use;
	allow setfiles_t semanage_t:fd use;
	allow setfiles_t semanage_t:fifo_file { getattr read write append ioctl lock };
	allow setfiles_t semanage_t:process sigchld;

	 	 	 	
##### end seutil_domtrans_setfiles(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_domtrans_loadpolicy(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(semanage_t) depth: 2
 	
	
	


	allow semanage_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(semanage_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(semanage_t,load_policy_exec_t,load_policy_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(semanage_t,load_policy_exec_t,load_policy_t) depth: 3
 	
	allow semanage_t load_policy_exec_t:file { getattr read execute };
	allow semanage_t load_policy_t:process transition;
	dontaudit semanage_t load_policy_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(semanage_t,load_policy_exec_t,load_policy_t) depth: 2
 	
	type_transition semanage_t load_policy_exec_t:process load_policy_t;
 	 	 	 	
##### end domain_auto_trans(semanage_t,load_policy_exec_t,load_policy_t) depth: 1
 	

	allow semanage_t load_policy_t:fd use;
	allow load_policy_t semanage_t:fd use;
	allow load_policy_t semanage_t:fifo_file { getattr read write append ioctl lock };
	allow load_policy_t semanage_t:process sigchld;

	 	 	 	
##### end seutil_domtrans_loadpolicy(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_config(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t selinux_config_t:dir { read getattr lock search ioctl };
	allow semanage_t selinux_config_t:file { read getattr lock ioctl };
	allow semanage_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_manage_bin_policy(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t selinux_config_t:dir search;
	allow semanage_t policy_config_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow semanage_t policy_config_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	typeattribute semanage_t can_write_binary_policy;

	 	 	 	
##### end seutil_manage_bin_policy(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_use_newrole_fds(semanage_t) depth: 1
 	
	
	


	allow semanage_t newrole_t:fd use;

	 	 	 	
##### end seutil_use_newrole_fds(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_manage_module_store(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t selinux_config_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition semanage_t selinux_config_t:dir semanage_store_t;

	allow semanage_t semanage_store_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	allow semanage_t semanage_store_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end seutil_manage_module_store(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_get_semanage_trans_lock(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t selinux_config_t:dir { getattr search };
	allow semanage_t semanage_trans_lock_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end seutil_get_semanage_trans_lock(semanage_t) depth: 0
 	
 	 	 	 	
##### begin seutil_get_semanage_read_lock(semanage_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(semanage_t) depth: 2
 	
	
	


	allow semanage_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(semanage_t) depth: 1
 	
	allow semanage_t selinux_config_t:dir { getattr search };
	allow semanage_t semanage_read_lock_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end seutil_get_semanage_read_lock(semanage_t) depth: 0
 	

########################################
#
# Setfiles local policy
#

allow setfiles_t self:capability { dac_override dac_read_search fowner };
allow setfiles_t self:fifo_file { getattr read write append ioctl lock };

allow setfiles_t { policy_src_t policy_config_t file_context_t selinux_config_t default_context_t }:dir { read getattr lock search ioctl };
allow setfiles_t { policy_src_t policy_config_t file_context_t selinux_config_t default_context_t }:file { read getattr lock ioctl };
allow setfiles_t { policy_src_t policy_config_t file_context_t selinux_config_t default_context_t }:lnk_file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_read_system_state(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t proc_t:dir { read getattr lock search ioctl };
	allow setfiles_t proc_t:lnk_file { getattr read };
	allow setfiles_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_dirs(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t unlabeled_t:dir { getattr search read relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_dirs(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_files(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(setfiles_t) depth: 1
 	
	allow setfiles_t unlabeled_t:file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_files(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_symlinks(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(setfiles_t) depth: 1
 	
	allow setfiles_t unlabeled_t:lnk_file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_symlinks(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_pipes(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(setfiles_t) depth: 1
 	
	allow setfiles_t unlabeled_t:fifo_file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_pipes(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin kernel_relabelfrom_unlabeled_sockets(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_list_unlabeled(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t unlabeled_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end kernel_list_unlabeled(setfiles_t) depth: 1
 	
	allow setfiles_t unlabeled_t:sock_file { getattr relabelfrom };

	 	 	 	
##### end kernel_relabelfrom_unlabeled_sockets(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin dev_relabel_all_dev_nodes(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t device_node:dir { getattr relabelfrom };
	allow setfiles_t device_node:file { getattr relabelfrom };
	allow setfiles_t device_node:lnk_file { getattr relabelfrom };
	allow setfiles_t device_node:fifo_file { getattr relabelfrom };
	allow setfiles_t device_node:sock_file { getattr relabelfrom };
	allow setfiles_t { device_t device_node }:blk_file { getattr relabelfrom relabelto };
	allow setfiles_t { device_t device_node }:chr_file { getattr relabelfrom relabelto };

	 	 	 	
##### end dev_relabel_all_dev_nodes(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin fs_list_all(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t filesystem_type:dir { read getattr lock search ioctl };

	 	 	 	
##### end fs_list_all(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(setfiles_t) depth: 1
 	
	
	


	typeattribute setfiles_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(setfiles_t) depth: 1
 	
	
	


	typeattribute setfiles_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_upgrade(setfiles_t) depth: 1
 	
	
	


	typeattribute setfiles_t mlsfileupgrade;

	 	 	 	
##### end mls_file_upgrade(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(setfiles_t) depth: 1
 	
	
	


	typeattribute setfiles_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(setfiles_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t proc_t:dir { read getattr lock search ioctl };
	allow setfiles_t proc_t:lnk_file { getattr read };
	allow setfiles_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(setfiles_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t security_t:dir { read search getattr };
	allow setfiles_t security_t:file { getattr read write };
	allow setfiles_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t security_t:dir { read search getattr };
	allow setfiles_t security_t:file { getattr read write };
	allow setfiles_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t security_t:dir { read search getattr };
	allow setfiles_t security_t:file { getattr read write };
	allow setfiles_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t security_t:dir { read search getattr };
	allow setfiles_t security_t:file { getattr read write };
	allow setfiles_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t security_t:dir { read search getattr };
	allow setfiles_t security_t:file { getattr read write };
	allow setfiles_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(setfiles_t) depth: 1
 	
	allow setfiles_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(setfiles_t) depth: 1
 	
	allow setfiles_t devpts_t:dir { read getattr lock search ioctl };
	allow setfiles_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin term_use_unallocated_ttys(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(setfiles_t) depth: 1
 	
	allow setfiles_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(setfiles_t) depth: 0
 	

# this is to satisfy the assertion:
 	 	 	 	
##### begin auth_relabelto_shadow(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(setfiles_t) depth: 1
 	
	allow setfiles_t shadow_t:file relabelto;
	typeattribute setfiles_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_relabelto_shadow(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t init_t:fd use;

	 	 	 	
##### end init_use_fds(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_fds(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t initrc_t:fd use;

	 	 	 	
##### end init_use_script_fds(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(setfiles_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(setfiles_t) depth: 3
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(setfiles_t) depth: 2
 	
	allow setfiles_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(setfiles_t) depth: 1
 	
	allow setfiles_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(setfiles_t) depth: 1
 	
	allow setfiles_t lib_t:dir { read getattr lock search ioctl };
	allow setfiles_t lib_t:lnk_file { read getattr lock ioctl };
	allow setfiles_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow setfiles_t ld_so_t:file { read getattr lock execute ioctl };
	allow setfiles_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(setfiles_t) depth: 1
 	
	allow setfiles_t lib_t:dir { read getattr lock search ioctl };
	allow setfiles_t lib_t:lnk_file { read getattr lock ioctl };
	allow setfiles_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow setfiles_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow setfiles_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t etc_t:dir { read getattr lock search ioctl };
	allow setfiles_t etc_runtime_t:file { read getattr lock ioctl };
	allow setfiles_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t etc_t:dir { read getattr lock search ioctl };
	allow setfiles_t etc_t:file { read getattr lock ioctl };
	allow setfiles_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin files_list_all(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t file_type:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_all(setfiles_t) depth: 0
 	
 	 	 	 	
##### begin files_relabel_all_files(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t { file_type  }:dir { { read getattr lock search ioctl } relabelfrom relabelto };
	allow setfiles_t { file_type  }:file { getattr relabelfrom relabelto };
	allow setfiles_t { file_type  }:lnk_file { getattr relabelfrom relabelto };
	allow setfiles_t { file_type  }:fifo_file { getattr relabelfrom relabelto };
	allow setfiles_t { file_type  }:sock_file { getattr relabelfrom relabelto };
	allow setfiles_t { file_type  }:blk_file { getattr relabelfrom };
	allow setfiles_t { file_type  }:chr_file { getattr relabelfrom };

	# satisfy the assertions:
	 	 	 	 	
##### begin seutil_relabelto_bin_policy(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t policy_config_t:file relabelto;
	typeattribute setfiles_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(setfiles_t) depth: 1
 	

	 	 	 	
##### end files_relabel_all_files(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t devlog_t:lnk_file read;
	allow setfiles_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow setfiles_t syslogd_t:unix_dgram_socket sendto;
	allow setfiles_t syslogd_t:unix_stream_socket connectto;
	allow setfiles_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow setfiles_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(setfiles_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(setfiles_t) depth: 3
 	
	
	


	allow setfiles_t device_t:dir { read getattr lock search ioctl };
	allow setfiles_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(setfiles_t) depth: 2
 	
	allow setfiles_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(setfiles_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(setfiles_t) depth: 1
 	
	# FIXME: setfiles_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(setfiles_t) depth: 1
 	
	allow setfiles_t locale_t:dir { read getattr lock search ioctl };
	allow setfiles_t locale_t:lnk_file { read getattr lock ioctl };
	allow setfiles_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(setfiles_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(setfiles_t) depth: 3
 	
	
	


	allow setfiles_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(setfiles_t) depth: 2
 	
	allow setfiles_t lib_t:dir { read getattr lock search ioctl };
	allow setfiles_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(setfiles_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin seutil_get_semanage_read_lock(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(setfiles_t) depth: 1
 	
	allow setfiles_t selinux_config_t:dir { getattr search };
	allow setfiles_t semanage_read_lock_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end seutil_get_semanage_read_lock(setfiles_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(setfiles_t) depth: 1
 	
	
	


	allow setfiles_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(setfiles_t) depth: 0
 	
# for config files in a home directory
 	 	 	 	
##### begin userdom_read_all_users_home_content_files(setfiles_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_home(setfiles_t) depth: 2
 	
	
	


	allow setfiles_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(setfiles_t) depth: 1
 	
	allow setfiles_t home_type:dir { read getattr lock search ioctl };
	allow setfiles_t home_type:file { read getattr lock ioctl };

	 	 	 	
##### end userdom_read_all_users_home_content_files(setfiles_t) depth: 0
 	


	


########################################
#
# Declarations
#

 	 	 	 	
##### begin logging_log_file(sendmail_log_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sendmail_log_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_log_t) depth: 3
 	
	
	


	allow sendmail_log_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_log_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_log_t) depth: 3
 	
	
	


	allow sendmail_log_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_log_t) depth: 2
 	
	typeattribute sendmail_log_t file_type;

	 	 	 	
##### end files_type(sendmail_log_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(sendmail_log_t) depth: 2
 	
	
	


	allow sendmail_log_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(sendmail_log_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(sendmail_log_t) depth: 2
 	
	
	


	allow sendmail_log_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(sendmail_log_t) depth: 1
 	
	typeattribute sendmail_log_t logfile;

	 	 	 	
##### end logging_log_file(sendmail_log_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(sendmail_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sendmail_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_tmp_t) depth: 3
 	
	
	


	allow sendmail_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_tmp_t) depth: 3
 	
	
	


	allow sendmail_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_tmp_t) depth: 2
 	
	typeattribute sendmail_tmp_t file_type;

	 	 	 	
##### end files_type(sendmail_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(sendmail_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(sendmail_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_tmp_t) depth: 4
 	
	
	


	allow sendmail_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_tmp_t) depth: 4
 	
	
	


	allow sendmail_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_tmp_t) depth: 3
 	
	typeattribute sendmail_tmp_t file_type;

	 	 	 	
##### end files_type(sendmail_tmp_t) depth: 2
 	
	typeattribute sendmail_tmp_t polymember;

	 	 	 	
##### end files_poly_member(sendmail_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(sendmail_tmp_t) depth: 2
 	
	
	


	allow sendmail_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(sendmail_tmp_t) depth: 1
 	
	typeattribute sendmail_tmp_t tmpfile;
	allow sendmail_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(sendmail_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(sendmail_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sendmail_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_var_run_t) depth: 3
 	
	
	


	allow sendmail_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_var_run_t) depth: 3
 	
	
	


	allow sendmail_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_var_run_t) depth: 2
 	
	typeattribute sendmail_var_run_t file_type;

	 	 	 	
##### end files_type(sendmail_var_run_t) depth: 1
 	
	typeattribute sendmail_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(sendmail_var_run_t) depth: 0
 	

 	 	 	 	
##### begin mta_sendmail_mailserver(sendmail_t) depth: 1
 	
	
	


	# For when the user wants to send mail via port 25 localhost
	 	 	 	 	
##### begin kernel_tcp_recvfrom(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t kernel_t:tcp_socket recvfrom;

	 	 	 	
##### end kernel_tcp_recvfrom(sendmail_t) depth: 1
 	

	 	 	 	 	
##### begin init_system_domain(sendmail_t,sendmail_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin domain_type(sendmail_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(sendmail_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute sendmail_t domain;

	# allow the domain to read its /proc/pid entries
	allow sendmail_t self:dir { read getattr lock search ioctl };
	allow sendmail_t self:lnk_file { read getattr lock ioctl };
	allow sendmail_t self:file { getattr read write append ioctl lock };

	# allow sendmail_t to create child processes in this domain
	allow sendmail_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types sendmail_t;
		role sysadm_r types sendmail_t;
		role user_r types sendmail_t;
		role staff_r types sendmail_t;
	

	 	 	 	
##### end domain_base_type(sendmail_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(sendmail_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(sendmail_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(sendmail_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sendmail_t) depth: 5
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sendmail_t) depth: 4
 	
	allow sendmail_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(sendmail_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t root_t:dir { read getattr lock search ioctl };
	allow sendmail_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(sendmail_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(sendmail_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t init_t:process signull;

	 	 	 	
##### end init_signull(sendmail_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(sendmail_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(sendmail_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(sendmail_t) depth: 4
 	
	
	


	dontaudit sendmail_t security_t:dir search;
	dontaudit sendmail_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(sendmail_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(sendmail_t) depth: 4
 	
	
	


	dontaudit sendmail_t selinux_config_t:dir search;
	dontaudit sendmail_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(sendmail_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(sendmail_t,sendmail_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(sendmail_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(sendmail_exec_t) depth: 5
 	
	
	


	allow sendmail_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sendmail_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sendmail_exec_t) depth: 5
 	
	
	


	allow sendmail_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sendmail_exec_t) depth: 4
 	
	typeattribute sendmail_exec_t file_type;

	 	 	 	
##### end files_type(sendmail_exec_t) depth: 3
 	

	allow sendmail_t sendmail_exec_t:file entrypoint;
	allow sendmail_t sendmail_exec_t:file { read getattr lock execute ioctl };

	typeattribute sendmail_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(sendmail_t,sendmail_exec_t) depth: 2
 	

	role system_r types sendmail_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,sendmail_exec_t,sendmail_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,sendmail_exec_t,sendmail_t) depth: 4
 	
	allow initrc_t sendmail_exec_t:file { getattr read execute };
	allow initrc_t sendmail_t:process transition;
	dontaudit initrc_t sendmail_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,sendmail_exec_t,sendmail_t) depth: 3
 	
	type_transition initrc_t sendmail_exec_t:process sendmail_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,sendmail_exec_t,sendmail_t) depth: 2
 	

	allow initrc_t sendmail_t:fd use;
	allow sendmail_t initrc_t:fd use;
	allow sendmail_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow sendmail_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(sendmail_t,sendmail_exec_t) depth: 1
 	
	typeattribute sendmail_t mailserver_domain;

	 	 	 	
##### end mta_sendmail_mailserver(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin mta_mailserver_delivery(sendmail_t) depth: 1
 	
	
	


	typeattribute sendmail_t mailserver_delivery;

	allow sendmail_t mail_spool_t:dir { read getattr lock search ioctl add_name write };
	allow sendmail_t mail_spool_t:file { create ioctl read getattr lock append };
	allow sendmail_t mail_spool_t:lnk_file { create read getattr };

	
	
		
	


	
	
		
	


	 	 	 	
##### end mta_mailserver_delivery(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin mta_mailserver_sender(sendmail_t) depth: 1
 	
	
	


	typeattribute sendmail_t mailserver_sender;

	 	 	 	
##### end mta_mailserver_sender(sendmail_t) depth: 0
 	

########################################
#
# Sendmail local policy
#

allow sendmail_t self:capability { setuid setgid net_bind_service sys_nice chown sys_tty_config };
allow sendmail_t self:process signal;
allow sendmail_t self:fifo_file { getattr read write append ioctl lock };
allow sendmail_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow sendmail_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow sendmail_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow sendmail_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow sendmail_t sendmail_log_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow sendmail_t sendmail_log_t:dir { { read getattr lock search ioctl add_name remove_name write } setattr };
 	 	 	 	
##### begin logging_log_filetrans(sendmail_t,sendmail_log_t,{ file dir }) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(sendmail_t) depth: 1
 	
	allow sendmail_t var_log_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition sendmail_t var_log_t:{ file dir } sendmail_log_t;

	 	 	 	
##### end logging_log_filetrans(sendmail_t,sendmail_log_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t proc_t:dir search;
	allow sendmail_t sysctl_t:dir { read getattr lock search ioctl };
	allow sendmail_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow sendmail_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(sendmail_t) depth: 0
 	
# for piping mail to a command
 	 	 	 	
##### begin kernel_read_system_state(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t proc_t:dir { read getattr lock search ioctl };
	allow sendmail_t proc_t:lnk_file { getattr read };
	allow sendmail_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow sendmail_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(sendmail_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(sendmail_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(sendmail_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(sendmail_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(sendmail_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(sendmail_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_smtp_port(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t smtp_port_t:tcp_socket name_bind;
	allow sendmail_t self:capability net_bind_service;

	 	 	 	
##### end corenet_tcp_bind_smtp_port(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_urand(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin dev_read_sysfs(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t sysfs_t:dir { read getattr lock search ioctl };
	allow sendmail_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(sendmail_t) depth: 1
 	
	
	


	dontaudit sendmail_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(sendmail_t) depth: 0
 	

# for piping mail to a command
 	 	 	 	
##### begin corecmd_exec_shell(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t bin_t:dir { read getattr lock search ioctl };
	allow sendmail_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow sendmail_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_search_sbin(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t etc_t:dir { read getattr lock search ioctl };
	allow sendmail_t etc_t:file { read getattr lock ioctl };
	allow sendmail_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin files_search_spool(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t var_t:dir { getattr search };
	allow sendmail_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(sendmail_t) depth: 0
 	
# for piping mail to a command
 	 	 	 	
##### begin files_read_etc_runtime_files(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t etc_t:dir { read getattr lock search ioctl };
	allow sendmail_t etc_runtime_t:file { read getattr lock ioctl };
	allow sendmail_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t init_t:fd use;

	 	 	 	
##### end init_use_fds(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(sendmail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sendmail_t) depth: 2
 	
	allow sendmail_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(sendmail_t) depth: 1
 	
	allow sendmail_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(sendmail_t) depth: 0
 	
# sendmail wants to read /var/run/utmp if the controlling tty is /dev/console
 	 	 	 	
##### begin init_read_utmp(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t var_t:dir { getattr search };
	allow sendmail_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(sendmail_t) depth: 1
 	
	allow sendmail_t initrc_var_run_t:file { read getattr lock ioctl };

	 	 	 	
##### end init_read_utmp(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_write_utmp(sendmail_t) depth: 1
 	
	
	


	dontaudit sendmail_t initrc_var_run_t:file { write lock };

	 	 	 	
##### end init_dontaudit_write_utmp(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(sendmail_t) depth: 1
 	
	allow sendmail_t lib_t:dir { read getattr lock search ioctl };
	allow sendmail_t lib_t:lnk_file { read getattr lock ioctl };
	allow sendmail_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow sendmail_t ld_so_t:file { read getattr lock execute ioctl };
	allow sendmail_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(sendmail_t) depth: 1
 	
	allow sendmail_t lib_t:dir { read getattr lock search ioctl };
	allow sendmail_t lib_t:lnk_file { read getattr lock ioctl };
	allow sendmail_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow sendmail_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow sendmail_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(sendmail_t) depth: 0
 	
# Read /usr/lib/sasl2/.*
 	 	 	 	
##### begin libs_read_lib_files(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(sendmail_t) depth: 1
 	
	allow sendmail_t lib_t:dir { read getattr lock search ioctl };
	allow sendmail_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t devlog_t:lnk_file read;
	allow sendmail_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow sendmail_t syslogd_t:unix_dgram_socket sendto;
	allow sendmail_t syslogd_t:unix_stream_socket connectto;
	allow sendmail_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow sendmail_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(sendmail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sendmail_t) depth: 2
 	
	allow sendmail_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(sendmail_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sendmail_t) depth: 1
 	
	# FIXME: sendmail_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(sendmail_t) depth: 1
 	
	allow sendmail_t locale_t:dir { read getattr lock search ioctl };
	allow sendmail_t locale_t:lnk_file { read getattr lock ioctl };
	allow sendmail_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(sendmail_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(sendmail_t) depth: 2
 	
	allow sendmail_t lib_t:dir { read getattr lock search ioctl };
	allow sendmail_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(sendmail_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sendmail_t) depth: 1
 	
	allow sendmail_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_use_unpriv_user_fds(sendmail_t) depth: 1
 	
	
	


	dontaudit sendmail_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_dontaudit_use_unpriv_user_fds(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(sendmail_t) depth: 1
 	
	
		
	


		dontaudit sendmail_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(sendmail_t) depth: 0
 	

 	 	 	 	
##### begin mta_read_config(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sendmail_t) depth: 1
 	
	allow sendmail_t etc_mail_t:dir { getattr search read lock ioctl };
	allow sendmail_t etc_mail_t:file { read getattr lock ioctl };
	allow sendmail_t etc_mail_t:lnk_file { getattr read };

	 	 	 	
##### end mta_read_config(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin mta_etc_filetrans_aliases(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_etc_filetrans(sendmail_t,etc_aliases_t,file) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition sendmail_t etc_t:file etc_aliases_t;

	 	 	 	
##### end files_etc_filetrans(sendmail_t,etc_aliases_t,file) depth: 1
 	

	 	 	 	
##### end mta_etc_filetrans_aliases(sendmail_t) depth: 0
 	
# Write to /etc/aliases and /etc/mail.
 	 	 	 	
##### begin mta_rw_aliases(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sendmail_t) depth: 1
 	
	allow sendmail_t etc_aliases_t:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end mta_rw_aliases(sendmail_t) depth: 0
 	
# Write to /var/spool/mail and /var/spool/mqueue.
 	 	 	 	
##### begin mta_manage_queue(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_spool(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t var_t:dir { getattr search };
	allow sendmail_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(sendmail_t) depth: 1
 	
	allow sendmail_t mqueue_spool_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow sendmail_t mqueue_spool_t:file { create ioctl read getattr lock write setattr append link unlink rename };

	 	 	 	
##### end mta_manage_queue(sendmail_t) depth: 0
 	
 	 	 	 	
##### begin mta_manage_spool(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_spool(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t var_t:dir { getattr search };
	allow sendmail_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(sendmail_t) depth: 1
 	
	allow sendmail_t mail_spool_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };
	allow sendmail_t mail_spool_t:lnk_file { create read getattr setattr link unlink rename };
	allow sendmail_t mail_spool_t:file { create getattr setattr read write append rename link unlink ioctl lock };

	 	 	 	
##### end mta_manage_spool(sendmail_t) depth: 0
 	


	 	 	 	 	
##### begin unconfined_domain(sendmail_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(sendmail_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow sendmail_t self:capability *;
	allow sendmail_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow sendmail_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow sendmail_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow sendmail_t self:nscd *;
	allow sendmail_t self:dbus *;
	allow sendmail_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t proc_type:{ dir file } *;

	allow sendmail_t sysctl_t:{ dir file } *;

	allow sendmail_t kernel_t:system *;

	allow sendmail_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow sendmail_t unlabeled_t:filesystem *;
	allow sendmail_t unlabeled_t:association *;

	typeattribute sendmail_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute sendmail_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(sendmail_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow sendmail_t { proc_t proc_net_t }:dir search;

	allow sendmail_t sysctl_type:dir { read getattr lock search ioctl };
	allow sendmail_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(sendmail_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t node_type:node *;
	allow sendmail_t netif_type:netif *;
	allow sendmail_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow sendmail_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow sendmail_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow sendmail_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(sendmail_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(sendmail_t) depth: 5
 	
	
	


	allow sendmail_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(sendmail_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(sendmail_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t device_node:{ chr_file blk_file } *;
	allow sendmail_t mtrr_device_t:{ dir file } *;

	allow sendmail_t self:capability sys_rawio;
	typeattribute sendmail_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(sendmail_t) depth: 3
 	
	
	


	typeattribute sendmail_t unconfined_domain_type;

	# pass all constraints
	typeattribute sendmail_t can_change_process_identity;
	typeattribute sendmail_t can_change_process_role;
	typeattribute sendmail_t can_change_object_identity;
	typeattribute sendmail_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow sendmail_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow sendmail_t domain:fd use;
	allow sendmail_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow sendmail_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow sendmail_t domain:{ sem msgq shm } *;
	allow sendmail_t domain:msg { send receive };

	# For /proc/pid
	allow sendmail_t domain:dir { read getattr lock search ioctl };
	allow sendmail_t domain:file { read getattr lock ioctl };
	allow sendmail_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(sendmail_t) depth: 3
 	
	
	


	dontaudit sendmail_t domain:dir { read getattr lock search ioctl };
	dontaudit sendmail_t domain:lnk_file { read getattr lock ioctl };
	dontaudit sendmail_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit sendmail_t domain:sock_file { read getattr lock ioctl };
	dontaudit sendmail_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(sendmail_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow sendmail_t file_type:{ file chr_file } ~execmod;
	allow sendmail_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow sendmail_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow sendmail_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow sendmail_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow sendmail_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(sendmail_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow sendmail_t security_t:dir { getattr search read };
	allow sendmail_t security_t:file { getattr read write };

	typeattribute sendmail_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow sendmail_t security_t:security *;
		auditallow sendmail_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(sendmail_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow sendmail_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow sendmail_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow sendmail_t self:process execstack;
		auditallow sendmail_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit sendmail_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(sendmail_t) depth: 3
 	
	
	


	typeattribute sendmail_t can_read_shadow_passwords;
	typeattribute sendmail_t can_write_shadow_passwords;
	typeattribute sendmail_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(sendmail_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(sendmail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(sendmail_t) depth: 3
 	
	allow sendmail_t lib_t:dir { read getattr lock search ioctl };
	allow sendmail_t lib_t:lnk_file { read getattr lock ioctl };
	allow sendmail_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow sendmail_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow sendmail_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(sendmail_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(sendmail_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sendmail_t) depth: 4
 	
	
	


	allow sendmail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sendmail_t) depth: 3
 	
	allow sendmail_t selinux_config_t:dir search;
	allow sendmail_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow sendmail_t policy_config_t:file { getattr create write };
#	typeattribute sendmail_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(sendmail_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t policy_config_t:file relabelto;
	typeattribute sendmail_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(sendmail_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(sendmail_t) depth: 3
 	
	
	


	allow sendmail_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow sendmail_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute sendmail_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute sendmail_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(sendmail_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(sendmail_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow sendmail_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow sendmail_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(sendmail_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(sendmail_t) depth: 1
 	
	
	


	dontaudit sendmail_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(sendmail_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(sendmail_t) depth: 1
 	
	
	


	dontaudit sendmail_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(sendmail_t) depth: 0
 	
	 	 	 	 	
##### begin files_dontaudit_read_root_files(sendmail_t) depth: 1
 	
	
	


	dontaudit sendmail_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(sendmail_t) depth: 0
 	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin postfix_read_config(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t postfix_etc_t:dir { getattr read search };
	allow sendmail_t postfix_etc_t:file { read getattr };
	allow sendmail_t postfix_etc_t:lnk_file { getattr read };
	 	 	 	 	
##### begin files_search_etc(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sendmail_t) depth: 1
 	

	 	 	 	
##### end postfix_read_config(sendmail_t) depth: 0
 	
	 	 	 	 	
##### begin postfix_search_spool(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t postfix_spool_t:dir { getattr search };
	 	 	 	 	
##### begin files_search_spool(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t var_t:dir { getattr search };
	allow sendmail_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(sendmail_t) depth: 1
 	

	 	 	 	
##### end postfix_search_spool(sendmail_t) depth: 0
 	

	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(sendmail_t) depth: 1
 	
	
	


	allow sendmail_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(sendmail_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(sendmail_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sendmail_t) depth: 2
 	
	
	


	allow sendmail_t device_t:dir { read getattr lock search ioctl };
	allow sendmail_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sendmail_t) depth: 1
 	
	allow sendmail_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(sendmail_t) depth: 0
 	

	


 

	


########################################
#
# Declarations
#


# ssh client executable.
 	 	 	 	
##### begin files_type(ssh_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(ssh_exec_t) depth: 2
 	
	
	


	allow ssh_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ssh_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ssh_exec_t) depth: 2
 	
	
	


	allow ssh_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ssh_exec_t) depth: 1
 	
	typeattribute ssh_exec_t file_type;

	 	 	 	
##### end files_type(ssh_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(ssh_keygen_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(ssh_keygen_exec_t) depth: 2
 	
	
	


	allow ssh_keygen_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ssh_keygen_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ssh_keygen_exec_t) depth: 2
 	
	
	


	allow ssh_keygen_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ssh_keygen_exec_t) depth: 1
 	
	typeattribute ssh_keygen_exec_t file_type;

	 	 	 	
##### end files_type(ssh_keygen_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(ssh_keysign_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(ssh_keysign_exec_t) depth: 2
 	
	
	


	allow ssh_keysign_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ssh_keysign_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ssh_keysign_exec_t) depth: 2
 	
	
	


	allow ssh_keysign_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ssh_keysign_exec_t) depth: 1
 	
	typeattribute ssh_keysign_exec_t file_type;

	 	 	 	
##### end files_type(ssh_keysign_exec_t) depth: 0
 	

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin files_type(sshd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sshd_exec_t) depth: 2
 	
	
	


	allow sshd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sshd_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sshd_exec_t) depth: 2
 	
	
	


	allow sshd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sshd_exec_t) depth: 1
 	
	typeattribute sshd_exec_t file_type;

	 	 	 	
##### end files_type(sshd_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_type(sshd_key_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sshd_key_t) depth: 2
 	
	
	


	allow sshd_key_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sshd_key_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sshd_key_t) depth: 2
 	
	
	


	allow sshd_key_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sshd_key_t) depth: 1
 	
	typeattribute sshd_key_t file_type;

	 	 	 	
##### end files_type(sshd_key_t) depth: 0
 	


	 	 	 	 	
##### begin unconfined_alias_domain(sshd_t) depth: 1
 	
	
		
	


		typealias unconfined_t alias sshd_t;
	

	 	 	 	
##### end unconfined_alias_domain(sshd_t) depth: 0
 	
	 	 	 	 	
##### begin init_system_domain(sshd_t,sshd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(sshd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(sshd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute sshd_t domain;

	# allow the domain to read its /proc/pid entries
	allow sshd_t self:dir { read getattr lock search ioctl };
	allow sshd_t self:lnk_file { read getattr lock ioctl };
	allow sshd_t self:file { getattr read write append ioctl lock };

	# allow sshd_t to create child processes in this domain
	allow sshd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types sshd_t;
		role sysadm_r types sshd_t;
		role user_r types sshd_t;
		role staff_r types sshd_t;
	

	 	 	 	
##### end domain_base_type(sshd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(sshd_t) depth: 3
 	
	
	


	allow sshd_t device_t:dir { read getattr lock search ioctl };
	allow sshd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(sshd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(sshd_t) depth: 3
 	
	
	


	allow sshd_t device_t:dir { read getattr lock search ioctl };
	allow sshd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(sshd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(sshd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sshd_t) depth: 4
 	
	
	


	allow sshd_t device_t:dir { read getattr lock search ioctl };
	allow sshd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sshd_t) depth: 3
 	
	allow sshd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(sshd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(sshd_t) depth: 3
 	
	
	


	allow sshd_t root_t:dir { read getattr lock search ioctl };
	allow sshd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(sshd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(sshd_t) depth: 3
 	
	
	


	allow sshd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(sshd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(sshd_t) depth: 3
 	
	
	


	allow sshd_t init_t:process signull;

	 	 	 	
##### end init_signull(sshd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(sshd_t) depth: 3
 	
	
	


	allow sshd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(sshd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(sshd_t) depth: 3
 	
	
	


	allow sshd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(sshd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(sshd_t) depth: 3
 	
	
	


	dontaudit sshd_t security_t:dir search;
	dontaudit sshd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(sshd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(sshd_t) depth: 3
 	
	
	


	dontaudit sshd_t selinux_config_t:dir search;
	dontaudit sshd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(sshd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(sshd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(sshd_t,sshd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(sshd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(sshd_exec_t) depth: 4
 	
	
	


	allow sshd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sshd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sshd_exec_t) depth: 4
 	
	
	


	allow sshd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sshd_exec_t) depth: 3
 	
	typeattribute sshd_exec_t file_type;

	 	 	 	
##### end files_type(sshd_exec_t) depth: 2
 	

	allow sshd_t sshd_exec_t:file entrypoint;
	allow sshd_t sshd_exec_t:file { read getattr lock execute ioctl };

	typeattribute sshd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(sshd_t,sshd_exec_t) depth: 1
 	

	role system_r types sshd_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,sshd_exec_t,sshd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,sshd_exec_t,sshd_t) depth: 3
 	
	allow initrc_t sshd_exec_t:file { getattr read execute };
	allow initrc_t sshd_t:process transition;
	dontaudit initrc_t sshd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,sshd_exec_t,sshd_t) depth: 2
 	
	type_transition initrc_t sshd_exec_t:process sshd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,sshd_exec_t,sshd_t) depth: 1
 	

	allow initrc_t sshd_t:fd use;
	allow sshd_t initrc_t:fd use;
	allow sshd_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow sshd_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(sshd_t,sshd_exec_t) depth: 0
 	

	type sshd_var_run_t;
	 	 	 	 	
##### begin files_type(sshd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sshd_var_run_t) depth: 2
 	
	
	


	allow sshd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sshd_var_run_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sshd_var_run_t) depth: 2
 	
	
	


	allow sshd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sshd_var_run_t) depth: 1
 	
	typeattribute sshd_var_run_t file_type;

	 	 	 	
##### end files_type(sshd_var_run_t) depth: 0
 	

	# FIXME
	typeattribute ssh_exec_t entry_type;
	typeattribute ssh_keygen_exec_t entry_type;
	typeattribute ssh_keysign_exec_t entry_type;


#################################
#
# sshd local policy
#
# sshd_t is the domain for the sshd program.
#



#################################
#
# sshd_extern local policy
#
# sshd_extern_t is the domain for ssh from outside our network
#



########################################
#
# ssh_keygen local policy
#




	


########################################
#
# Declarations
#


#
# fixed_disk_device_t is the type of 
# /dev/hd* and /dev/sd*.
#
 	 	 	 	
##### begin dev_node(fixed_disk_device_t) depth: 1
 	
	
	


	typeattribute fixed_disk_device_t device_node;

	 	 	 	 	
##### begin fs_associate(fixed_disk_device_t) depth: 2
 	
	
	


	allow fixed_disk_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(fixed_disk_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(fixed_disk_device_t) depth: 2
 	
	
	


	allow fixed_disk_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(fixed_disk_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(fixed_disk_device_t) depth: 2
 	
	
	


	allow fixed_disk_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(fixed_disk_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(fixed_disk_device_t) depth: 0
 	

neverallow ~fixed_disk_raw_read fixed_disk_device_t:{ chr_file blk_file } read;
neverallow ~fixed_disk_raw_write fixed_disk_device_t:{ chr_file blk_file } { append write };

#
# scsi_generic_device_t is the type of /dev/sg*
# it gives access to ALL SCSI devices (both fixed and removable)
#
 	 	 	 	
##### begin dev_node(scsi_generic_device_t) depth: 1
 	
	
	


	typeattribute scsi_generic_device_t device_node;

	 	 	 	 	
##### begin fs_associate(scsi_generic_device_t) depth: 2
 	
	
	


	allow scsi_generic_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(scsi_generic_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(scsi_generic_device_t) depth: 2
 	
	
	


	allow scsi_generic_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(scsi_generic_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(scsi_generic_device_t) depth: 2
 	
	
	


	allow scsi_generic_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(scsi_generic_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(scsi_generic_device_t) depth: 0
 	

neverallow ~scsi_generic_read scsi_generic_device_t:{ chr_file blk_file } read;
neverallow ~scsi_generic_write scsi_generic_device_t:{ chr_file blk_file } { append write };

#
# removable_device_t is the type of
# /dev/scd* and /dev/fd*.
#
 	 	 	 	
##### begin dev_node(removable_device_t) depth: 1
 	
	
	


	typeattribute removable_device_t device_node;

	 	 	 	 	
##### begin fs_associate(removable_device_t) depth: 2
 	
	
	


	allow removable_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(removable_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(removable_device_t) depth: 2
 	
	
	


	allow removable_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(removable_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(removable_device_t) depth: 2
 	
	
	


	allow removable_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(removable_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(removable_device_t) depth: 0
 	

#
# tape_device_t is the type of
#
 	 	 	 	
##### begin dev_node(tape_device_t) depth: 1
 	
	
	


	typeattribute tape_device_t device_node;

	 	 	 	 	
##### begin fs_associate(tape_device_t) depth: 2
 	
	
	


	allow tape_device_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tape_device_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(tape_device_t) depth: 2
 	
	
	


	allow tape_device_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(tape_device_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(tape_device_t) depth: 2
 	
	
	


	allow tape_device_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(tape_device_t) depth: 1
 	

	 	 	 	
##### end dev_node(tape_device_t) depth: 0
 	





	


########################################
#
# Declarations
#

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin files_type(su_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(su_exec_t) depth: 2
 	
	
	


	allow su_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(su_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(su_exec_t) depth: 2
 	
	
	


	allow su_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(su_exec_t) depth: 1
 	
	typeattribute su_exec_t file_type;

	 	 	 	
##### end files_type(su_exec_t) depth: 0
 	

# Remaining policy in the per-user domain template


	


########################################
#
# Declarations

 	 	 	 	
##### begin files_type(sudo_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(sudo_exec_t) depth: 2
 	
	
	


	allow sudo_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sudo_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sudo_exec_t) depth: 2
 	
	
	


	allow sudo_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sudo_exec_t) depth: 1
 	
	typeattribute sudo_exec_t file_type;

	 	 	 	
##### end files_type(sudo_exec_t) depth: 0
 	

# Remaining policy in per user domain template.


	


########################################
#
# Declarations
#

# this is shared between dhcpc and dhcpd:
typealias dhcp_etc_t alias { etc_dhcp_t etc_dhcpc_t etc_dhcpd_t };
 	 	 	 	
##### begin files_config_file(dhcp_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(dhcp_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcp_etc_t) depth: 3
 	
	
	


	allow dhcp_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcp_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcp_etc_t) depth: 3
 	
	
	


	allow dhcp_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcp_etc_t) depth: 2
 	
	typeattribute dhcp_etc_t file_type;

	 	 	 	
##### end files_type(dhcp_etc_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute dhcp_etc_t usercanread;

	 	 	 	
##### end files_config_file(dhcp_etc_t) depth: 0
 	

# this is shared between dhcpc and dhcpd:
 	 	 	 	
##### begin files_type(dhcp_state_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcp_state_t) depth: 2
 	
	
	


	allow dhcp_state_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcp_state_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcp_state_t) depth: 2
 	
	
	


	allow dhcp_state_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcp_state_t) depth: 1
 	
	typeattribute dhcp_state_t file_type;

	 	 	 	
##### end files_type(dhcp_state_t) depth: 0
 	

 	 	 	 	
##### begin init_daemon_domain(dhcpc_t,dhcpc_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(dhcpc_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(dhcpc_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute dhcpc_t domain;

	# allow the domain to read its /proc/pid entries
	allow dhcpc_t self:dir { read getattr lock search ioctl };
	allow dhcpc_t self:lnk_file { read getattr lock ioctl };
	allow dhcpc_t self:file { getattr read write append ioctl lock };

	# allow dhcpc_t to create child processes in this domain
	allow dhcpc_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types dhcpc_t;
		role sysadm_r types dhcpc_t;
		role user_r types dhcpc_t;
		role staff_r types dhcpc_t;
	

	 	 	 	
##### end domain_base_type(dhcpc_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(dhcpc_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(dhcpc_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(dhcpc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpc_t) depth: 4
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpc_t) depth: 3
 	
	allow dhcpc_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(dhcpc_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t root_t:dir { read getattr lock search ioctl };
	allow dhcpc_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(dhcpc_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(dhcpc_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t init_t:process signull;

	 	 	 	
##### end init_signull(dhcpc_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(dhcpc_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(dhcpc_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(dhcpc_t) depth: 3
 	
	
	


	dontaudit dhcpc_t security_t:dir search;
	dontaudit dhcpc_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(dhcpc_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(dhcpc_t) depth: 3
 	
	
	


	dontaudit dhcpc_t selinux_config_t:dir search;
	dontaudit dhcpc_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(dhcpc_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(dhcpc_t,dhcpc_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpc_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpc_exec_t) depth: 4
 	
	
	


	allow dhcpc_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpc_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpc_exec_t) depth: 4
 	
	
	


	allow dhcpc_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpc_exec_t) depth: 3
 	
	typeattribute dhcpc_exec_t file_type;

	 	 	 	
##### end files_type(dhcpc_exec_t) depth: 2
 	

	allow dhcpc_t dhcpc_exec_t:file entrypoint;
	allow dhcpc_t dhcpc_exec_t:file { read getattr lock execute ioctl };

	typeattribute dhcpc_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(dhcpc_t,dhcpc_exec_t) depth: 1
 	

	role system_r types dhcpc_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool dhcpc_disable_trans false;
			
		
		if(dhcpc_disable_trans ) {
			
	
	


	allow initrc_t dhcpc_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init dhcpc_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,dhcpc_exec_t,dhcpc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,dhcpc_exec_t,dhcpc_t) depth: 3
 	
	allow initrc_t dhcpc_exec_t:file { getattr read execute };
	allow initrc_t dhcpc_t:process transition;
	dontaudit initrc_t dhcpc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,dhcpc_exec_t,dhcpc_t) depth: 2
 	
	type_transition initrc_t dhcpc_exec_t:process dhcpc_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,dhcpc_exec_t,dhcpc_t) depth: 1
 	
			allow initrc_t dhcpc_t:fd use;
			allow dhcpc_t initrc_t:fd use;
			allow dhcpc_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow dhcpc_t initrc_t:process sigchld;
			allow initrc_t dhcpc_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow dhcpc_t dhcpc_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(dhcpc_t,dhcpc_exec_t) depth: 0
 	
role system_r types dhcpc_t;

 	 	 	 	
##### begin files_type(dhcpc_state_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpc_state_t) depth: 2
 	
	
	


	allow dhcpc_state_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpc_state_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpc_state_t) depth: 2
 	
	
	


	allow dhcpc_state_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpc_state_t) depth: 1
 	
	typeattribute dhcpc_state_t file_type;

	 	 	 	
##### end files_type(dhcpc_state_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(dhcpc_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpc_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpc_tmp_t) depth: 3
 	
	
	


	allow dhcpc_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpc_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpc_tmp_t) depth: 3
 	
	
	


	allow dhcpc_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpc_tmp_t) depth: 2
 	
	typeattribute dhcpc_tmp_t file_type;

	 	 	 	
##### end files_type(dhcpc_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(dhcpc_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpc_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpc_tmp_t) depth: 4
 	
	
	


	allow dhcpc_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpc_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpc_tmp_t) depth: 4
 	
	
	


	allow dhcpc_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpc_tmp_t) depth: 3
 	
	typeattribute dhcpc_tmp_t file_type;

	 	 	 	
##### end files_type(dhcpc_tmp_t) depth: 2
 	
	typeattribute dhcpc_tmp_t polymember;

	 	 	 	
##### end files_poly_member(dhcpc_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(dhcpc_tmp_t) depth: 2
 	
	
	


	allow dhcpc_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(dhcpc_tmp_t) depth: 1
 	
	typeattribute dhcpc_tmp_t tmpfile;
	allow dhcpc_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(dhcpc_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(dhcpc_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(dhcpc_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(dhcpc_var_run_t) depth: 3
 	
	
	


	allow dhcpc_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(dhcpc_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(dhcpc_var_run_t) depth: 3
 	
	
	


	allow dhcpc_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(dhcpc_var_run_t) depth: 2
 	
	typeattribute dhcpc_var_run_t file_type;

	 	 	 	
##### end files_type(dhcpc_var_run_t) depth: 1
 	
	typeattribute dhcpc_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(dhcpc_var_run_t) depth: 0
 	

 	 	 	 	
##### begin init_system_domain(ifconfig_t,ifconfig_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(ifconfig_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(ifconfig_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute ifconfig_t domain;

	# allow the domain to read its /proc/pid entries
	allow ifconfig_t self:dir { read getattr lock search ioctl };
	allow ifconfig_t self:lnk_file { read getattr lock ioctl };
	allow ifconfig_t self:file { getattr read write append ioctl lock };

	# allow ifconfig_t to create child processes in this domain
	allow ifconfig_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types ifconfig_t;
		role sysadm_r types ifconfig_t;
		role user_r types ifconfig_t;
		role staff_r types ifconfig_t;
	

	 	 	 	
##### end domain_base_type(ifconfig_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(ifconfig_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(ifconfig_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(ifconfig_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ifconfig_t) depth: 4
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ifconfig_t) depth: 3
 	
	allow ifconfig_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(ifconfig_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t root_t:dir { read getattr lock search ioctl };
	allow ifconfig_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(ifconfig_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(ifconfig_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t init_t:process signull;

	 	 	 	
##### end init_signull(ifconfig_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(ifconfig_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(ifconfig_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(ifconfig_t) depth: 3
 	
	
	


	dontaudit ifconfig_t security_t:dir search;
	dontaudit ifconfig_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(ifconfig_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(ifconfig_t) depth: 3
 	
	
	


	dontaudit ifconfig_t selinux_config_t:dir search;
	dontaudit ifconfig_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(ifconfig_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(ifconfig_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(ifconfig_t,ifconfig_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(ifconfig_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(ifconfig_exec_t) depth: 4
 	
	
	


	allow ifconfig_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(ifconfig_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(ifconfig_exec_t) depth: 4
 	
	
	


	allow ifconfig_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(ifconfig_exec_t) depth: 3
 	
	typeattribute ifconfig_exec_t file_type;

	 	 	 	
##### end files_type(ifconfig_exec_t) depth: 2
 	

	allow ifconfig_t ifconfig_exec_t:file entrypoint;
	allow ifconfig_t ifconfig_exec_t:file { read getattr lock execute ioctl };

	typeattribute ifconfig_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(ifconfig_t,ifconfig_exec_t) depth: 1
 	

	role system_r types ifconfig_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,ifconfig_exec_t,ifconfig_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,ifconfig_exec_t,ifconfig_t) depth: 3
 	
	allow initrc_t ifconfig_exec_t:file { getattr read execute };
	allow initrc_t ifconfig_t:process transition;
	dontaudit initrc_t ifconfig_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,ifconfig_exec_t,ifconfig_t) depth: 2
 	
	type_transition initrc_t ifconfig_exec_t:process ifconfig_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,ifconfig_exec_t,ifconfig_t) depth: 1
 	

	allow initrc_t ifconfig_t:fd use;
	allow ifconfig_t initrc_t:fd use;
	allow ifconfig_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow ifconfig_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(ifconfig_t,ifconfig_exec_t) depth: 0
 	
role system_r types ifconfig_t;

 	 	 	 	
##### begin files_type(net_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(net_conf_t) depth: 2
 	
	
	


	allow net_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(net_conf_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(net_conf_t) depth: 2
 	
	
	


	allow net_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(net_conf_t) depth: 1
 	
	typeattribute net_conf_t file_type;

	 	 	 	
##### end files_type(net_conf_t) depth: 0
 	

########################################
#
# DHCP client local policy
#
allow dhcpc_t self:capability { dac_override fsetid net_admin net_raw net_bind_service sys_resource sys_tty_config };
dontaudit dhcpc_t self:capability sys_tty_config;
# for access("/etc/bashrc", X_OK) on Red Hat
dontaudit dhcpc_t self:capability { dac_read_search sys_module };
allow dhcpc_t self:process { sigchld sigkill sigstop signull signal };
allow dhcpc_t self:fifo_file { getattr read write append ioctl lock };
allow dhcpc_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow dhcpc_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow dhcpc_t self:packet_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow dhcpc_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };

allow dhcpc_t dhcp_etc_t:dir { read getattr lock search ioctl };
allow dhcpc_t dhcp_etc_t:lnk_file { read getattr lock ioctl };
allow dhcpc_t dhcp_etc_t:file { { read getattr lock ioctl } execute execute_no_trans };

allow dhcpc_t dhcp_state_t:dir { read getattr lock search ioctl add_name remove_name write };
allow dhcpc_t dhcp_state_t:file { getattr read };
allow dhcpc_t dhcpc_state_t:dir { read getattr lock search ioctl add_name remove_name write };
allow dhcpc_t dhcpc_state_t:file { create ioctl read getattr lock write setattr append link unlink rename };
type_transition dhcpc_t dhcp_state_t:file dhcpc_state_t;

# create pid file
allow dhcpc_t dhcpc_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow dhcpc_t dhcpc_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(dhcpc_t,dhcpc_var_run_t,file) depth: 1
 	
	
	


	allow dhcpc_t var_t:dir { getattr search };
	allow dhcpc_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition dhcpc_t var_run_t:file dhcpc_var_run_t;

	 	 	 	
##### end files_pid_filetrans(dhcpc_t,dhcpc_var_run_t,file) depth: 0
 	

# Allow read/write to /etc/resolv.conf and /etc/ntp.conf. Note that any files
# in /etc created by dhcpcd will be labelled net_conf_t.
allow dhcpc_t net_conf_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_etc_filetrans(dhcpc_t,net_conf_t,file) depth: 1
 	
	
	


	allow dhcpc_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition dhcpc_t etc_t:file net_conf_t;

	 	 	 	
##### end files_etc_filetrans(dhcpc_t,net_conf_t,file) depth: 0
 	

# create temp files
allow dhcpc_t dhcpc_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow dhcpc_t dhcpc_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(dhcpc_t,dhcpc_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow dhcpc_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition dhcpc_t tmp_t:{ file dir } dhcpc_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(dhcpc_t,dhcpc_tmp_t,{ file dir }) depth: 0
 	


	
	


	allow dhcpc_t dhcpc_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


# transition to ifconfig
 	 	 	 	
##### begin domain_auto_trans(dhcpc_t,ifconfig_exec_t,ifconfig_t) depth: 1
 	
	 	 	 	 	
##### begin domain_trans(dhcpc_t,ifconfig_exec_t,ifconfig_t) depth: 2
 	
	allow dhcpc_t ifconfig_exec_t:file { getattr read execute };
	allow dhcpc_t ifconfig_t:process transition;
	dontaudit dhcpc_t ifconfig_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(dhcpc_t,ifconfig_exec_t,ifconfig_t) depth: 1
 	
	type_transition dhcpc_t ifconfig_exec_t:process ifconfig_t;
 	 	 	 	
##### end domain_auto_trans(dhcpc_t,ifconfig_exec_t,ifconfig_t) depth: 0
 	
allow dhcpc_t ifconfig_t:fd use;
allow ifconfig_t dhcpc_t:fd use;
allow ifconfig_t dhcpc_t:fifo_file { getattr read write append ioctl lock };
allow ifconfig_t dhcpc_t:process sigchld;

 	 	 	 	
##### begin kernel_read_system_state(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t proc_t:dir { read getattr lock search ioctl };
	allow dhcpc_t proc_t:lnk_file { getattr read };
	allow dhcpc_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t proc_t:dir search;
	allow dhcpc_t proc_net_t:dir { read getattr lock search ioctl };
	allow dhcpc_t proc_net_t:file { read getattr lock ioctl };
	allow dhcpc_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t proc_t:dir search;
	allow dhcpc_t sysctl_t:dir { read getattr lock search ioctl };
	allow dhcpc_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow dhcpc_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin kernel_use_fds(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t kernel_t:fd use;

	 	 	 	
##### end kernel_use_fds(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow dhcpc_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(dhcpc_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(dhcpc_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(dhcpc_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(dhcpc_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(dhcpc_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(dhcpc_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_dhcpc_port(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t dhcpc_port_t:udp_socket name_bind;
	allow dhcpc_t self:capability net_bind_service;

	 	 	 	
##### end corenet_udp_bind_dhcpc_port(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_connect_all_ports(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t port_type:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_all_ports(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t sysfs_t:dir { read getattr lock search ioctl };
	allow dhcpc_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(dhcpc_t) depth: 0
 	
# for SSP:
 	 	 	 	
##### begin dev_read_urand(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_console(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_dontaudit_use_console(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_all_user_ttys(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t ttynode:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_all_user_ttys(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_all_user_ptys(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_dontaudit_use_all_user_ptys(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t bin_t:dir { read getattr lock search ioctl };
	allow dhcpc_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow dhcpc_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t sbin_t:dir { read getattr lock search ioctl };
	allow dhcpc_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow dhcpc_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t bin_t:dir { read getattr lock search ioctl };
	allow dhcpc_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow dhcpc_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin domain_dontaudit_list_all_domains_state(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t domain:dir { read getattr lock search ioctl };

	 	 	 	
##### end domain_dontaudit_list_all_domains_state(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t etc_t:dir { read getattr lock search ioctl };
	allow dhcpc_t etc_t:file { read getattr lock ioctl };
	allow dhcpc_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t etc_t:dir { read getattr lock search ioctl };
	allow dhcpc_t etc_runtime_t:file { read getattr lock ioctl };
	allow dhcpc_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin files_search_home(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin files_search_var_lib(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_locks(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t var_lock_t:dir search;

	 	 	 	
##### end files_dontaudit_search_locks(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t init_t:fd use;

	 	 	 	
##### end init_use_fds(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(dhcpc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpc_t) depth: 2
 	
	allow dhcpc_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(dhcpc_t) depth: 1
 	
	allow dhcpc_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin init_rw_utmp(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t var_t:dir { getattr search };
	allow dhcpc_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(dhcpc_t) depth: 1
 	
	allow dhcpc_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t devlog_t:lnk_file read;
	allow dhcpc_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow dhcpc_t syslogd_t:unix_dgram_socket sendto;
	allow dhcpc_t syslogd_t:unix_stream_socket connectto;
	allow dhcpc_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow dhcpc_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(dhcpc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpc_t) depth: 2
 	
	allow dhcpc_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(dhcpc_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(dhcpc_t) depth: 1
 	
	allow dhcpc_t lib_t:dir { read getattr lock search ioctl };
	allow dhcpc_t lib_t:lnk_file { read getattr lock ioctl };
	allow dhcpc_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow dhcpc_t ld_so_t:file { read getattr lock execute ioctl };
	allow dhcpc_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(dhcpc_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(dhcpc_t) depth: 1
 	
	allow dhcpc_t lib_t:dir { read getattr lock search ioctl };
	allow dhcpc_t lib_t:lnk_file { read getattr lock ioctl };
	allow dhcpc_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow dhcpc_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow dhcpc_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(dhcpc_t) depth: 1
 	
	# FIXME: dhcpc_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(dhcpc_t) depth: 1
 	
	allow dhcpc_t locale_t:dir { read getattr lock search ioctl };
	allow dhcpc_t locale_t:lnk_file { read getattr lock ioctl };
	allow dhcpc_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(dhcpc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(dhcpc_t) depth: 3
 	
	
	


	allow dhcpc_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(dhcpc_t) depth: 2
 	
	allow dhcpc_t lib_t:dir { read getattr lock search ioctl };
	allow dhcpc_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(dhcpc_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin modutils_domtrans_insmod(dhcpc_t) depth: 1
 	
	
	


#	if (!secure_mode_insmod) {
#		modutils_domtrans_insmod_uncond(dhcpc_t)
#	}

	 	 	 	
##### end modutils_domtrans_insmod(dhcpc_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_search_staff_home_dirs(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t staff_home_dir_t:dir search;

	 	 	 	
##### end userdom_dontaudit_search_staff_home_dirs(dhcpc_t) depth: 0
 	




	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(dhcpc_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(dhcpc_t) depth: 0
 	

	 	 	 	 	
##### begin files_dontaudit_read_root_files(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(dhcpc_t) depth: 0
 	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin hostname_domtrans(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_bin(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(dhcpc_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(dhcpc_t,hostname_exec_t,hostname_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(dhcpc_t,hostname_exec_t,hostname_t) depth: 3
 	
	allow dhcpc_t hostname_exec_t:file { getattr read execute };
	allow dhcpc_t hostname_t:process transition;
	dontaudit dhcpc_t hostname_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(dhcpc_t,hostname_exec_t,hostname_t) depth: 2
 	
	type_transition dhcpc_t hostname_exec_t:process hostname_t;
 	 	 	 	
##### end domain_auto_trans(dhcpc_t,hostname_exec_t,hostname_t) depth: 1
 	

	allow dhcpc_t hostname_t:fd use;
	allow hostname_t dhcpc_t:fd use;
	allow hostname_t dhcpc_t:fifo_file { getattr read write append ioctl lock };
	allow hostname_t dhcpc_t:process sigchld;

	 	 	 	
##### end hostname_domtrans(dhcpc_t) depth: 0
 	

	



	
		
	


# for the dhcp client to run ping to check IP addresses

	
		
	allow dhcpc_t self:capability setuid;
	allow dhcpc_t self:rawip_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin seutil_sigchld_newrole(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t newrole_t:process sigchld;

	 	 	 	
##### end seutil_sigchld_newrole(dhcpc_t) depth: 0
 	
	 	 	 	 	
##### begin seutil_dontaudit_search_config(dhcpc_t) depth: 1
 	
	
	


	dontaudit dhcpc_t selinux_config_t:dir search;

	 	 	 	
##### end seutil_dontaudit_search_config(dhcpc_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin udev_read_db(dhcpc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(dhcpc_t) depth: 2
 	
	
	


	allow dhcpc_t device_t:dir { read getattr lock search ioctl };
	allow dhcpc_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(dhcpc_t) depth: 1
 	
	allow dhcpc_t udev_tdb_t:file { read getattr lock ioctl };

	 	 	 	
##### end udev_read_db(dhcpc_t) depth: 0
 	

	



	
		
	 	 	 	 	
##### begin userdom_use_all_users_fds(dhcpc_t) depth: 1
 	
	
	


	allow dhcpc_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(dhcpc_t) depth: 0
 	

	


########################################
#
# Ifconfig local policy
#

allow ifconfig_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execheap execstack };
allow ifconfig_t self:capability { net_raw net_admin sys_tty_config };
dontaudit ifconfig_t self:capability sys_module;

allow ifconfig_t self:fd use;
allow ifconfig_t self:fifo_file { getattr read write append ioctl lock };
allow ifconfig_t self:sock_file { read getattr lock ioctl };
allow ifconfig_t self:socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow ifconfig_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow ifconfig_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow ifconfig_t self:unix_dgram_socket sendto;
allow ifconfig_t self:unix_stream_socket connectto;
allow ifconfig_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow ifconfig_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow ifconfig_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow ifconfig_t self:msg { send receive };

# Create UDP sockets, necessary when called from dhcpc
allow ifconfig_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

# for /sbin/ip
allow ifconfig_t self:packet_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow ifconfig_t self:netlink_route_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write };
allow ifconfig_t self:tcp_socket { create ioctl };
 	 	 	 	
##### begin files_read_etc_files(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t etc_t:dir { read getattr lock search ioctl };
	allow ifconfig_t etc_t:file { read getattr lock ioctl };
	allow ifconfig_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(ifconfig_t) depth: 0
 	;

 	 	 	 	
##### begin kernel_use_fds(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t kernel_t:fd use;

	 	 	 	
##### end kernel_use_fds(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t proc_t:dir { read getattr lock search ioctl };
	allow ifconfig_t proc_t:lnk_file { getattr read };
	allow ifconfig_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t proc_t:dir search;
	allow ifconfig_t proc_net_t:dir { read getattr lock search ioctl };
	allow ifconfig_t proc_net_t:file { read getattr lock ioctl };
	allow ifconfig_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin kernel_search_network_sysctl(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t { proc_t sysctl_t sysctl_net_t }:dir search;

	 	 	 	
##### end kernel_search_network_sysctl(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin corenet_rw_tun_tap_dev(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ifconfig_t) depth: 1
 	
	allow ifconfig_t tun_tap_device_t:chr_file { getattr read write ioctl  lock append };

	 	 	 	
##### end corenet_rw_tun_tap_dev(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_sysfs(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t sysfs_t:dir { read getattr lock search ioctl };
	allow ifconfig_t sysfs_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end dev_read_sysfs(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin term_dontaudit_use_all_user_ttys(ifconfig_t) depth: 1
 	
	
	


	dontaudit ifconfig_t ttynode:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_all_user_ttys(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin term_dontaudit_use_all_user_ptys(ifconfig_t) depth: 1
 	
	
	


	dontaudit ifconfig_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_dontaudit_use_all_user_ptys(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin files_dontaudit_read_root_files(ifconfig_t) depth: 1
 	
	
	


	dontaudit ifconfig_t root_t:file { getattr read };

	 	 	 	
##### end files_dontaudit_read_root_files(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t init_t:fd use;

	 	 	 	
##### end init_use_fds(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin init_use_script_ptys(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_list_ptys(ifconfig_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ifconfig_t) depth: 2
 	
	allow ifconfig_t devpts_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end term_list_ptys(ifconfig_t) depth: 1
 	
	allow ifconfig_t initrc_devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end init_use_script_ptys(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(ifconfig_t) depth: 1
 	
	allow ifconfig_t lib_t:dir { read getattr lock search ioctl };
	allow ifconfig_t lib_t:lnk_file { read getattr lock ioctl };
	allow ifconfig_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow ifconfig_t ld_so_t:file { read getattr lock execute ioctl };
	allow ifconfig_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(ifconfig_t) depth: 1
 	
	allow ifconfig_t lib_t:dir { read getattr lock search ioctl };
	allow ifconfig_t lib_t:lnk_file { read getattr lock ioctl };
	allow ifconfig_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow ifconfig_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow ifconfig_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(ifconfig_t) depth: 0
 	
 	 	 	 	
##### begin libs_read_lib_files(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(ifconfig_t) depth: 1
 	
	allow ifconfig_t lib_t:dir { read getattr lock search ioctl };
	allow ifconfig_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t devlog_t:lnk_file read;
	allow ifconfig_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow ifconfig_t syslogd_t:unix_dgram_socket sendto;
	allow ifconfig_t syslogd_t:unix_stream_socket connectto;
	allow ifconfig_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow ifconfig_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(ifconfig_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ifconfig_t) depth: 2
 	
	allow ifconfig_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(ifconfig_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(ifconfig_t) depth: 1
 	
	# FIXME: ifconfig_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(ifconfig_t) depth: 1
 	
	allow ifconfig_t locale_t:dir { read getattr lock search ioctl };
	allow ifconfig_t locale_t:lnk_file { read getattr lock ioctl };
	allow ifconfig_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(ifconfig_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(ifconfig_t) depth: 3
 	
	
	


	allow ifconfig_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(ifconfig_t) depth: 2
 	
	allow ifconfig_t lib_t:dir { read getattr lock search ioctl };
	allow ifconfig_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(ifconfig_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin modutils_domtrans_insmod(ifconfig_t) depth: 1
 	
	
	


#	if (!secure_mode_insmod) {
#		modutils_domtrans_insmod_uncond(ifconfig_t)
#	}

	 	 	 	
##### end modutils_domtrans_insmod(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin seutil_use_runinit_fds(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t run_init_t:fd use;

	 	 	 	
##### end seutil_use_runinit_fds(ifconfig_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_all_users_fds(ifconfig_t) depth: 1
 	
	
	


	allow ifconfig_t userdomain:fd use;

	 	 	 	
##### end userdom_use_all_users_fds(ifconfig_t) depth: 0
 	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin udev_dontaudit_rw_dgram_sockets(ifconfig_t) depth: 1
 	
	
	


	dontaudit ifconfig_t udev_t:unix_dgram_socket { read write };

	 	 	 	
##### end udev_dontaudit_rw_dgram_sockets(ifconfig_t) depth: 0
 	
	
	




	 	 	 	 	
##### begin term_use_generic_ptys(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ifconfig_t) depth: 1
 	
	allow ifconfig_t devpts_t:dir { getattr search read lock ioctl };
	allow ifconfig_t devpts_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_generic_ptys(ifconfig_t) depth: 0
 	
	 	 	 	 	
##### begin term_use_unallocated_ttys(ifconfig_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(ifconfig_t) depth: 2
 	
	
	


	allow ifconfig_t device_t:dir { read getattr lock search ioctl };
	allow ifconfig_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(ifconfig_t) depth: 1
 	
	allow ifconfig_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(ifconfig_t) depth: 0
 	



	
		
	



	
		
	



	
		
	



	


########################################
#
# Declarations
#
 	 	 	 	
##### begin inetd_tcp_service_domain(tcpd_t,tcpd_exec_t) depth: 1
 	

	
	


	 	 	 	 	
##### begin inetd_core_service_domain(tcpd_t,tcpd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin domain_type(tcpd_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(tcpd_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute tcpd_t domain;

	# allow the domain to read its /proc/pid entries
	allow tcpd_t self:dir { read getattr lock search ioctl };
	allow tcpd_t self:lnk_file { read getattr lock ioctl };
	allow tcpd_t self:file { getattr read write append ioctl lock };

	# allow tcpd_t to create child processes in this domain
	allow tcpd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types tcpd_t;
		role sysadm_r types tcpd_t;
		role user_r types tcpd_t;
		role staff_r types tcpd_t;
	

	 	 	 	
##### end domain_base_type(tcpd_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t device_t:dir { read getattr lock search ioctl };
	allow tcpd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(tcpd_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t device_t:dir { read getattr lock search ioctl };
	allow tcpd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(tcpd_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(tcpd_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(tcpd_t) depth: 5
 	
	
	


	allow tcpd_t device_t:dir { read getattr lock search ioctl };
	allow tcpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(tcpd_t) depth: 4
 	
	allow tcpd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(tcpd_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t root_t:dir { read getattr lock search ioctl };
	allow tcpd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(tcpd_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(tcpd_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t init_t:process signull;

	 	 	 	
##### end init_signull(tcpd_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(tcpd_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(tcpd_t) depth: 4
 	
	
	


	allow tcpd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(tcpd_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(tcpd_t) depth: 4
 	
	
	


	dontaudit tcpd_t security_t:dir search;
	dontaudit tcpd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(tcpd_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(tcpd_t) depth: 4
 	
	
	


	dontaudit tcpd_t selinux_config_t:dir search;
	dontaudit tcpd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(tcpd_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(tcpd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(tcpd_t,tcpd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(tcpd_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(tcpd_exec_t) depth: 5
 	
	
	


	allow tcpd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tcpd_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tcpd_exec_t) depth: 5
 	
	
	


	allow tcpd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tcpd_exec_t) depth: 4
 	
	typeattribute tcpd_exec_t file_type;

	 	 	 	
##### end files_type(tcpd_exec_t) depth: 3
 	

	allow tcpd_t tcpd_exec_t:file entrypoint;
	allow tcpd_t tcpd_exec_t:file { read getattr lock execute ioctl };

	typeattribute tcpd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(tcpd_t,tcpd_exec_t) depth: 2
 	

	role system_r types tcpd_t;

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool tcpd_disable_trans false;
			
		
		if(tcpd_disable_trans ) {
#			can_exec(inetd_t,tcpd_exec_t)
			# cjp: this must be wrong
			
	

			
	
	


	allow { unconfined_t initrc_t } tcpd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(inetd_t,tcpd_exec_t,tcpd_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(inetd_t,tcpd_exec_t,tcpd_t) depth: 4
 	
	allow inetd_t tcpd_exec_t:file { getattr read execute };
	allow inetd_t tcpd_t:process transition;
	dontaudit inetd_t tcpd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(inetd_t,tcpd_exec_t,tcpd_t) depth: 3
 	
	type_transition inetd_t tcpd_exec_t:process tcpd_t;
 	 	 	 	
##### end domain_auto_trans(inetd_t,tcpd_exec_t,tcpd_t) depth: 2
 	
			allow inetd_t tcpd_t:fd use;
			allow tcpd_t inetd_t:fd use;
			allow tcpd_t inetd_t:fifo_file { getattr read write append ioctl lock };
			allow tcpd_t inetd_t:process sigchld;
			dontaudit inetd_t tcpd_t:process { noatsecure siginh rlimitinh };

			allow inetd_t tcpd_t:process sigkill;

			# make sediff happy
			allow tcpd_t tcpd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	 	 	 	
##### end inetd_core_service_domain(tcpd_t,tcpd_exec_t) depth: 1
 	

	allow tcpd_t inetd_t:tcp_socket { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept };

	 	 	 	
##### end inetd_tcp_service_domain(tcpd_t,tcpd_exec_t) depth: 0
 	
role system_r types tcpd_t;

 	 	 	 	
##### begin files_tmp_file(tcpd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(tcpd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(tcpd_tmp_t) depth: 3
 	
	
	


	allow tcpd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tcpd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tcpd_tmp_t) depth: 3
 	
	
	


	allow tcpd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tcpd_tmp_t) depth: 2
 	
	typeattribute tcpd_tmp_t file_type;

	 	 	 	
##### end files_type(tcpd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(tcpd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(tcpd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(tcpd_tmp_t) depth: 4
 	
	
	


	allow tcpd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tcpd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tcpd_tmp_t) depth: 4
 	
	
	


	allow tcpd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tcpd_tmp_t) depth: 3
 	
	typeattribute tcpd_tmp_t file_type;

	 	 	 	
##### end files_type(tcpd_tmp_t) depth: 2
 	
	typeattribute tcpd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(tcpd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(tcpd_tmp_t) depth: 2
 	
	
	


	allow tcpd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(tcpd_tmp_t) depth: 1
 	
	typeattribute tcpd_tmp_t tmpfile;
	allow tcpd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(tcpd_tmp_t) depth: 0
 	

########################################
#
# Local policy
#
allow tcpd_t self:tcp_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };

allow tcpd_t tcpd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow tcpd_t tcpd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(tcpd_t,tcpd_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow tcpd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition tcpd_t tmp_t:{ file dir } tcpd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(tcpd_t,tcpd_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(tcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow tcpd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(tcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(tcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(tcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(tcpd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(tcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(tcpd_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(tcpd_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(tcpd_t) depth: 0
 	

# Run other daemons in the inetd child domain.
 	 	 	 	
##### begin corecmd_search_bin(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_search_sbin(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t etc_t:dir { read getattr lock search ioctl };
	allow tcpd_t etc_t:file { read getattr lock ioctl };
	allow tcpd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(tcpd_t) depth: 0
 	
# no good reason for files_dontaudit_search_var, probably nscd
 	 	 	 	
##### begin files_dontaudit_search_var(tcpd_t) depth: 1
 	
	
	


	dontaudit tcpd_t var_t:dir search;

	 	 	 	
##### end files_dontaudit_search_var(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(tcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(tcpd_t) depth: 1
 	
	allow tcpd_t lib_t:dir { read getattr lock search ioctl };
	allow tcpd_t lib_t:lnk_file { read getattr lock ioctl };
	allow tcpd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow tcpd_t ld_so_t:file { read getattr lock execute ioctl };
	allow tcpd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(tcpd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(tcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(tcpd_t) depth: 1
 	
	allow tcpd_t lib_t:dir { read getattr lock search ioctl };
	allow tcpd_t lib_t:lnk_file { read getattr lock ioctl };
	allow tcpd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow tcpd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow tcpd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(tcpd_t) depth: 1
 	
	
	


	allow tcpd_t devlog_t:lnk_file read;
	allow tcpd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow tcpd_t syslogd_t:unix_dgram_socket sendto;
	allow tcpd_t syslogd_t:unix_stream_socket connectto;
	allow tcpd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow tcpd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(tcpd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(tcpd_t) depth: 3
 	
	
	


	allow tcpd_t device_t:dir { read getattr lock search ioctl };
	allow tcpd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(tcpd_t) depth: 2
 	
	allow tcpd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(tcpd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(tcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(tcpd_t) depth: 1
 	
	# FIXME: tcpd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(tcpd_t) depth: 1
 	
	allow tcpd_t locale_t:dir { read getattr lock search ioctl };
	allow tcpd_t locale_t:lnk_file { read getattr lock ioctl };
	allow tcpd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(tcpd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(tcpd_t) depth: 3
 	
	
	


	allow tcpd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(tcpd_t) depth: 2
 	
	allow tcpd_t lib_t:dir { read getattr lock search ioctl };
	allow tcpd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(tcpd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(tcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(tcpd_t) depth: 1
 	
	allow tcpd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(tcpd_t) depth: 0
 	

 	 	 	 	
##### begin inetd_domtrans_child(tcpd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(tcpd_t) depth: 2
 	
	
	


	allow tcpd_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(tcpd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(tcpd_t,inetd_child_exec_t,inetd_child_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(tcpd_t,inetd_child_exec_t,inetd_child_t) depth: 3
 	
	allow tcpd_t inetd_child_exec_t:file { getattr read execute };
	allow tcpd_t inetd_child_t:process transition;
	dontaudit tcpd_t inetd_child_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(tcpd_t,inetd_child_exec_t,inetd_child_t) depth: 2
 	
	type_transition tcpd_t inetd_child_exec_t:process inetd_child_t;
 	 	 	 	
##### end domain_auto_trans(tcpd_t,inetd_child_exec_t,inetd_child_t) depth: 1
 	

	allow tcpd_t inetd_child_t:fd use;
	allow inetd_child_t tcpd_t:fd use;
	allow inetd_child_t tcpd_t:fifo_file { getattr read write append ioctl lock };
	allow inetd_child_t tcpd_t:process sigchld;

	 	 	 	
##### end inetd_domtrans_child(tcpd_t) depth: 0
 	


	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	


########################################
#
# Declarations
#

 	 	 	 	
##### begin inetd_service_domain(telnetd_t,telnetd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin inetd_core_service_domain(telnetd_t,telnetd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin domain_type(telnetd_t) depth: 3
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(telnetd_t) depth: 4
 	
	
	


	# mark as a domain
	typeattribute telnetd_t domain;

	# allow the domain to read its /proc/pid entries
	allow telnetd_t self:dir { read getattr lock search ioctl };
	allow telnetd_t self:lnk_file { read getattr lock ioctl };
	allow telnetd_t self:file { getattr read write append ioctl lock };

	# allow telnetd_t to create child processes in this domain
	allow telnetd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types telnetd_t;
		role sysadm_r types telnetd_t;
		role user_r types telnetd_t;
		role staff_r types telnetd_t;
	

	 	 	 	
##### end domain_base_type(telnetd_t) depth: 3
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t device_t:dir { read getattr lock search ioctl };
	allow telnetd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(telnetd_t) depth: 3
 	
	 	 	 	 	
##### begin dev_rw_zero(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t device_t:dir { read getattr lock search ioctl };
	allow telnetd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(telnetd_t) depth: 3
 	
	 	 	 	 	
##### begin term_use_controlling_term(telnetd_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(telnetd_t) depth: 5
 	
	
	


	allow telnetd_t device_t:dir { read getattr lock search ioctl };
	allow telnetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(telnetd_t) depth: 4
 	
	allow telnetd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(telnetd_t) depth: 3
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t root_t:dir { read getattr lock search ioctl };
	allow telnetd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(telnetd_t) depth: 3
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(telnetd_t) depth: 3
 	
	 	 	 	 	
##### begin init_signull(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t init_t:process signull;

	 	 	 	
##### end init_signull(telnetd_t) depth: 3
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(telnetd_t) depth: 3
 	
		 	 	 	 	
##### begin unconfined_sigchld(telnetd_t) depth: 4
 	
	
	


	allow telnetd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(telnetd_t) depth: 3
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(telnetd_t) depth: 4
 	
	
	


	dontaudit telnetd_t security_t:dir search;
	dontaudit telnetd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(telnetd_t) depth: 3
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(telnetd_t) depth: 4
 	
	
	


	dontaudit telnetd_t selinux_config_t:dir search;
	dontaudit telnetd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(telnetd_t) depth: 3
 	
	
	


	 	 	 	
##### end domain_type(telnetd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_entry_file(telnetd_t,telnetd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_type(telnetd_exec_t) depth: 4
 	
	
	


	 	 	 	 	
##### begin fs_associate(telnetd_exec_t) depth: 5
 	
	
	


	allow telnetd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(telnetd_exec_t) depth: 4
 	
	 	 	 	 	
##### begin fs_associate_noxattr(telnetd_exec_t) depth: 5
 	
	
	


	allow telnetd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(telnetd_exec_t) depth: 4
 	
	typeattribute telnetd_exec_t file_type;

	 	 	 	
##### end files_type(telnetd_exec_t) depth: 3
 	

	allow telnetd_t telnetd_exec_t:file entrypoint;
	allow telnetd_t telnetd_exec_t:file { read getattr lock execute ioctl };

	typeattribute telnetd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(telnetd_t,telnetd_exec_t) depth: 2
 	

	role system_r types telnetd_t;

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool telnetd_disable_trans false;
			
		
		if(telnetd_disable_trans ) {
#			can_exec(inetd_t,telnetd_exec_t)
			# cjp: this must be wrong
			
	

			
	
	


	allow { unconfined_t initrc_t } telnetd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(inetd_t,telnetd_exec_t,telnetd_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(inetd_t,telnetd_exec_t,telnetd_t) depth: 4
 	
	allow inetd_t telnetd_exec_t:file { getattr read execute };
	allow inetd_t telnetd_t:process transition;
	dontaudit inetd_t telnetd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(inetd_t,telnetd_exec_t,telnetd_t) depth: 3
 	
	type_transition inetd_t telnetd_exec_t:process telnetd_t;
 	 	 	 	
##### end domain_auto_trans(inetd_t,telnetd_exec_t,telnetd_t) depth: 2
 	
			allow inetd_t telnetd_t:fd use;
			allow telnetd_t inetd_t:fd use;
			allow telnetd_t inetd_t:fifo_file { getattr read write append ioctl lock };
			allow telnetd_t inetd_t:process sigchld;
			dontaudit inetd_t telnetd_t:process { noatsecure siginh rlimitinh };

			allow inetd_t telnetd_t:process sigkill;

			# make sediff happy
			allow telnetd_t telnetd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	 	 	 	
##### end inetd_core_service_domain(telnetd_t,telnetd_exec_t) depth: 1
 	

	allow telnetd_t inetd_t:tcp_socket { { ioctl read getattr write setattr append bind connect getopt setopt shutdown } listen accept };
	allow telnetd_t inetd_t:udp_socket { ioctl read getattr write setattr append bind connect getopt setopt shutdown };

	 	 	 	
##### end inetd_service_domain(telnetd_t,telnetd_exec_t) depth: 0
 	
role system_r types telnetd_t;

 	 	 	 	
##### begin term_login_pty(telnetd_devpts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin term_pty(telnetd_devpts_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(telnetd_devpts_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(telnetd_devpts_t) depth: 4
 	
	
	


	allow telnetd_devpts_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(telnetd_devpts_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(telnetd_devpts_t) depth: 4
 	
	
	


	allow telnetd_devpts_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(telnetd_devpts_t) depth: 3
 	
	typeattribute telnetd_devpts_t file_type;

	 	 	 	
##### end files_type(telnetd_devpts_t) depth: 2
 	
	allow telnetd_devpts_t devpts_t:filesystem associate;
	typeattribute telnetd_devpts_t ptynode;

	 	 	 	
##### end term_pty(telnetd_devpts_t) depth: 1
 	
	typeattribute telnetd_devpts_t server_ptynode;

	 	 	 	
##### end term_login_pty(telnetd_devpts_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(telnetd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(telnetd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(telnetd_tmp_t) depth: 3
 	
	
	


	allow telnetd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(telnetd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(telnetd_tmp_t) depth: 3
 	
	
	


	allow telnetd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(telnetd_tmp_t) depth: 2
 	
	typeattribute telnetd_tmp_t file_type;

	 	 	 	
##### end files_type(telnetd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(telnetd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(telnetd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(telnetd_tmp_t) depth: 4
 	
	
	


	allow telnetd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(telnetd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(telnetd_tmp_t) depth: 4
 	
	
	


	allow telnetd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(telnetd_tmp_t) depth: 3
 	
	typeattribute telnetd_tmp_t file_type;

	 	 	 	
##### end files_type(telnetd_tmp_t) depth: 2
 	
	typeattribute telnetd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(telnetd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(telnetd_tmp_t) depth: 2
 	
	
	


	allow telnetd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(telnetd_tmp_t) depth: 1
 	
	typeattribute telnetd_tmp_t tmpfile;
	allow telnetd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(telnetd_tmp_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(telnetd_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(telnetd_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(telnetd_var_run_t) depth: 3
 	
	
	


	allow telnetd_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(telnetd_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(telnetd_var_run_t) depth: 3
 	
	
	


	allow telnetd_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(telnetd_var_run_t) depth: 2
 	
	typeattribute telnetd_var_run_t file_type;

	 	 	 	
##### end files_type(telnetd_var_run_t) depth: 1
 	
	typeattribute telnetd_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(telnetd_var_run_t) depth: 0
 	

########################################
#
# Local policy
#

allow telnetd_t self:capability { fsetid chown fowner sys_tty_config dac_override };
allow telnetd_t self:process { sigchld sigkill sigstop signull signal };
allow telnetd_t self:fifo_file { getattr read write append ioctl lock };
allow telnetd_t self:tcp_socket { { create ioctl read getattr write setattr append bind getopt setopt shutdown } listen accept };
allow telnetd_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
# for identd; cjp: this should probably only be inetd_child rules?
allow telnetd_t self:netlink_tcpdiag_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read };
allow telnetd_t self:capability { setuid setgid };

allow telnetd_t telnetd_devpts_t:chr_file { { getattr read write append ioctl lock } setattr };
 	 	 	 	
##### begin term_create_pty(telnetd_t,telnetd_devpts_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t device_t:dir { read getattr lock search ioctl };
	allow telnetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(telnetd_t) depth: 1
 	
	allow telnetd_t ptmx_t:chr_file { getattr read write append ioctl lock };

	allow telnetd_t devpts_t:dir { read getattr lock search ioctl };
	allow telnetd_t devpts_t:filesystem getattr;
	dontaudit telnetd_t bsdpty_device_t:chr_file { getattr read write };
	type_transition telnetd_t devpts_t:chr_file telnetd_devpts_t;

	 	 	 	
##### end term_create_pty(telnetd_t,telnetd_devpts_t) depth: 0
 	

allow telnetd_t telnetd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow telnetd_t telnetd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(telnetd_t,telnetd_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow telnetd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition telnetd_t tmp_t:{ file dir } telnetd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(telnetd_t,telnetd_tmp_t,{ file dir }) depth: 0
 	

allow telnetd_t telnetd_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow telnetd_t telnetd_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(telnetd_t,telnetd_var_run_t,file) depth: 1
 	
	
	


	allow telnetd_t var_t:dir { getattr search };
	allow telnetd_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition telnetd_t var_run_t:file telnetd_var_run_t;

	 	 	 	
##### end files_pid_filetrans(telnetd_t,telnetd_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t proc_t:dir search;
	allow telnetd_t sysctl_t:dir { read getattr lock search ioctl };
	allow telnetd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow telnetd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_system_state(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t proc_t:dir { read getattr lock search ioctl };
	allow telnetd_t proc_t:lnk_file { getattr read };
	allow telnetd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_network_state(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t proc_t:dir search;
	allow telnetd_t proc_net_t:dir { read getattr lock search ioctl };
	allow telnetd_t proc_net_t:file { read getattr lock ioctl };
	allow telnetd_t proc_net_t:lnk_file { getattr read };

	 	 	 	
##### end kernel_read_network_state(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(telnetd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow telnetd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(telnetd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(telnetd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(telnetd_t) depth: 1
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_sendrecv_all_ports(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t port_type:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_all_ports(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_sendrecv_all_ports(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_send_all_ports(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t port_type:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_all_ports(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_ports(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t port_type:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_all_ports(telnetd_t) depth: 1
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_ports(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(telnetd_t) depth: 1
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(telnetd_t) depth: 1
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin corenet_udp_bind_all_nodes(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin dev_read_urand(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t device_t:dir { read getattr lock search ioctl };
	allow telnetd_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin auth_rw_login_records(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t wtmp_t:file { getattr read write append ioctl lock };
	 	 	 	 	
##### begin logging_search_logs(telnetd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(telnetd_t) depth: 3
 	
	
	


	allow telnetd_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(telnetd_t) depth: 2
 	
	allow telnetd_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(telnetd_t) depth: 1
 	

	 	 	 	
##### end auth_rw_login_records(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_search_sbin(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t etc_t:dir { read getattr lock search ioctl };
	allow telnetd_t etc_t:file { read getattr lock ioctl };
	allow telnetd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t etc_t:dir { read getattr lock search ioctl };
	allow telnetd_t etc_runtime_t:file { read getattr lock ioctl };
	allow telnetd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(telnetd_t) depth: 0
 	
# for identd; cjp: this should probably only be inetd_child rules?
 	 	 	 	
##### begin files_search_home(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin init_rw_utmp(telnetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t var_t:dir { getattr search };
	allow telnetd_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(telnetd_t) depth: 1
 	
	allow telnetd_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(telnetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(telnetd_t) depth: 1
 	
	allow telnetd_t lib_t:dir { read getattr lock search ioctl };
	allow telnetd_t lib_t:lnk_file { read getattr lock ioctl };
	allow telnetd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow telnetd_t ld_so_t:file { read getattr lock execute ioctl };
	allow telnetd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(telnetd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(telnetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(telnetd_t) depth: 1
 	
	allow telnetd_t lib_t:dir { read getattr lock search ioctl };
	allow telnetd_t lib_t:lnk_file { read getattr lock ioctl };
	allow telnetd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow telnetd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow telnetd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(telnetd_t) depth: 1
 	
	
	


	allow telnetd_t devlog_t:lnk_file read;
	allow telnetd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow telnetd_t syslogd_t:unix_dgram_socket sendto;
	allow telnetd_t syslogd_t:unix_stream_socket connectto;
	allow telnetd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow telnetd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(telnetd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(telnetd_t) depth: 3
 	
	
	


	allow telnetd_t device_t:dir { read getattr lock search ioctl };
	allow telnetd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(telnetd_t) depth: 2
 	
	allow telnetd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(telnetd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(telnetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(telnetd_t) depth: 1
 	
	# FIXME: telnetd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(telnetd_t) depth: 1
 	
	allow telnetd_t locale_t:dir { read getattr lock search ioctl };
	allow telnetd_t locale_t:lnk_file { read getattr lock ioctl };
	allow telnetd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(telnetd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(telnetd_t) depth: 3
 	
	
	


	allow telnetd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(telnetd_t) depth: 2
 	
	allow telnetd_t lib_t:dir { read getattr lock search ioctl };
	allow telnetd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(telnetd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin seutil_dontaudit_search_config(telnetd_t) depth: 1
 	
	
	


	dontaudit telnetd_t selinux_config_t:dir search;

	 	 	 	
##### end seutil_dontaudit_search_config(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_read_config(telnetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(telnetd_t) depth: 2
 	
	
	


	allow telnetd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(telnetd_t) depth: 1
 	
	allow telnetd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_read_config(telnetd_t) depth: 0
 	

 	 	 	 	
##### begin remotelogin_domtrans(telnetd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin auth_domtrans_login_program(telnetd_t,remote_login_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin corecmd_search_bin(telnetd_t) depth: 3
 	
	
	


	allow telnetd_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(telnetd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_auto_trans(telnetd_t,login_exec_t,remote_login_t) depth: 3
 	
	 	 	 	 	
##### begin domain_trans(telnetd_t,login_exec_t,remote_login_t) depth: 4
 	
	allow telnetd_t login_exec_t:file { getattr read execute };
	allow telnetd_t remote_login_t:process transition;
	dontaudit telnetd_t remote_login_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(telnetd_t,login_exec_t,remote_login_t) depth: 3
 	
	type_transition telnetd_t login_exec_t:process remote_login_t;
 	 	 	 	
##### end domain_auto_trans(telnetd_t,login_exec_t,remote_login_t) depth: 2
 	

	allow telnetd_t remote_login_t:fd use;
	allow remote_login_t telnetd_t:fd use;
	allow remote_login_t telnetd_t:fifo_file { getattr read write append ioctl lock };
	allow remote_login_t telnetd_t:process sigchld;

	 	 	 	
##### end auth_domtrans_login_program(telnetd_t,remote_login_t) depth: 1
 	

	 	 	 	
##### end remotelogin_domtrans(telnetd_t) depth: 0
 	

# for identd; cjp: this should probably only be inetd_child rules?

	
		
	



	
		
	



	
		
	





	


########################################
#
# Declarations
#

role system_r types tmpreaper_t;
 	 	 	 	
##### begin domain_type(tmpreaper_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(tmpreaper_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute tmpreaper_t domain;

	# allow the domain to read its /proc/pid entries
	allow tmpreaper_t self:dir { read getattr lock search ioctl };
	allow tmpreaper_t self:lnk_file { read getattr lock ioctl };
	allow tmpreaper_t self:file { getattr read write append ioctl lock };

	# allow tmpreaper_t to create child processes in this domain
	allow tmpreaper_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types tmpreaper_t;
		role sysadm_r types tmpreaper_t;
		role user_r types tmpreaper_t;
		role staff_r types tmpreaper_t;
	

	 	 	 	
##### end domain_base_type(tmpreaper_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t device_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(tmpreaper_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t device_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(tmpreaper_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(tmpreaper_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(tmpreaper_t) depth: 3
 	
	
	


	allow tmpreaper_t device_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(tmpreaper_t) depth: 2
 	
	allow tmpreaper_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(tmpreaper_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t root_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(tmpreaper_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(tmpreaper_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t init_t:process signull;

	 	 	 	
##### end init_signull(tmpreaper_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(tmpreaper_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(tmpreaper_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(tmpreaper_t) depth: 2
 	
	
	


	dontaudit tmpreaper_t security_t:dir search;
	dontaudit tmpreaper_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(tmpreaper_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(tmpreaper_t) depth: 2
 	
	
	


	dontaudit tmpreaper_t selinux_config_t:dir search;
	dontaudit tmpreaper_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(tmpreaper_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin domain_entry_file(tmpreaper_t,tmpreaper_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(tmpreaper_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(tmpreaper_exec_t) depth: 3
 	
	
	


	allow tmpreaper_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(tmpreaper_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(tmpreaper_exec_t) depth: 3
 	
	
	


	allow tmpreaper_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(tmpreaper_exec_t) depth: 2
 	
	typeattribute tmpreaper_exec_t file_type;

	 	 	 	
##### end files_type(tmpreaper_exec_t) depth: 1
 	

	allow tmpreaper_t tmpreaper_exec_t:file entrypoint;
	allow tmpreaper_t tmpreaper_exec_t:file { read getattr lock execute ioctl };

	typeattribute tmpreaper_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(tmpreaper_t,tmpreaper_exec_t) depth: 0
 	

########################################
#
# Local Policy
#

allow tmpreaper_t self:process { fork sigchld };
allow tmpreaper_t self:capability { dac_override dac_read_search fowner };

 	 	 	 	
##### begin dev_read_urand(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t device_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t etc_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t etc_t:file { read getattr lock ioctl };
	allow tmpreaper_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(tmpreaper_t) depth: 0
 	
 	 	 	 	
##### begin files_read_var_lib_files(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t { var_t var_lib_t }:dir { getattr search };
	allow tmpreaper_t var_lib_t:file { read getattr lock ioctl };

	 	 	 	
##### end files_read_var_lib_files(tmpreaper_t) depth: 0
 	
 	 	 	 	
##### begin files_purge_tmp(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t tmpfile:dir { { read getattr lock search ioctl add_name remove_name write } rmdir };
	allow tmpreaper_t tmpfile:{ file lnk_file sock_file fifo_file } { getattr unlink };

	 	 	 	
##### end files_purge_tmp(tmpreaper_t) depth: 0
 	
# why does it need setattr?
 	 	 	 	
##### begin files_setattr_all_tmp_dirs(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t tmpfile:dir { search setattr };

	 	 	 	
##### end files_setattr_all_tmp_dirs(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(tmpreaper_t) depth: 1
 	
	
	


	typeattribute tmpreaper_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(tmpreaper_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(tmpreaper_t) depth: 1
 	
	
	


	typeattribute tmpreaper_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(tmpreaper_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(tmpreaper_t) depth: 1
 	
	allow tmpreaper_t lib_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t lib_t:lnk_file { read getattr lock ioctl };
	allow tmpreaper_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow tmpreaper_t ld_so_t:file { read getattr lock execute ioctl };
	allow tmpreaper_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(tmpreaper_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(tmpreaper_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(tmpreaper_t) depth: 1
 	
	allow tmpreaper_t lib_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t lib_t:lnk_file { read getattr lock ioctl };
	allow tmpreaper_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow tmpreaper_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow tmpreaper_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(tmpreaper_t) depth: 1
 	
	
	


	allow tmpreaper_t devlog_t:lnk_file read;
	allow tmpreaper_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow tmpreaper_t syslogd_t:unix_dgram_socket sendto;
	allow tmpreaper_t syslogd_t:unix_stream_socket connectto;
	allow tmpreaper_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow tmpreaper_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(tmpreaper_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(tmpreaper_t) depth: 3
 	
	
	


	allow tmpreaper_t device_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(tmpreaper_t) depth: 2
 	
	allow tmpreaper_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(tmpreaper_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(tmpreaper_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(tmpreaper_t) depth: 1
 	
	# FIXME: tmpreaper_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(tmpreaper_t) depth: 1
 	
	allow tmpreaper_t locale_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t locale_t:lnk_file { read getattr lock ioctl };
	allow tmpreaper_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(tmpreaper_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(tmpreaper_t) depth: 3
 	
	
	


	allow tmpreaper_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(tmpreaper_t) depth: 2
 	
	allow tmpreaper_t lib_t:dir { read getattr lock search ioctl };
	allow tmpreaper_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(tmpreaper_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(tmpreaper_t) depth: 0
 	
 	 	 	 	
##### begin miscfiles_delete_man_pages(tmpreaper_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(tmpreaper_t) depth: 2
 	
	
	


	allow tmpreaper_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(tmpreaper_t) depth: 1
 	
	allow tmpreaper_t man_t:dir { setattr { read getattr lock search ioctl add_name remove_name write } rmdir };
	allow tmpreaper_t man_t:file { getattr unlink };
	allow tmpreaper_t man_t:lnk_file { getattr unlink };

	 	 	 	
##### end miscfiles_delete_man_pages(tmpreaper_t) depth: 0
 	

 	 	 	 	
##### begin cron_system_entry(tmpreaper_t,tmpreaper_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(system_crond_t,tmpreaper_exec_t,tmpreaper_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(system_crond_t,tmpreaper_exec_t,tmpreaper_t) depth: 3
 	
	allow system_crond_t tmpreaper_exec_t:file { getattr read execute };
	allow system_crond_t tmpreaper_t:process transition;
	dontaudit system_crond_t tmpreaper_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(system_crond_t,tmpreaper_exec_t,tmpreaper_t) depth: 2
 	
	type_transition system_crond_t tmpreaper_exec_t:process tmpreaper_t;
 	 	 	 	
##### end domain_auto_trans(system_crond_t,tmpreaper_exec_t,tmpreaper_t) depth: 1
 	

	# cjp: perhaps these four rules from the old
	# domain_auto_trans are not needed?
	allow system_crond_t tmpreaper_t:fd use;
	allow tmpreaper_t system_crond_t:fd use;
	allow tmpreaper_t system_crond_t:fifo_file { getattr read write append ioctl lock };
	allow tmpreaper_t system_crond_t:process sigchld;

	allow tmpreaper_t crond_t:fifo_file { getattr read write append ioctl lock };
	allow tmpreaper_t crond_t:fd use;
	allow tmpreaper_t crond_t:process sigchld;

	 	 	 	
##### end cron_system_entry(tmpreaper_t,tmpreaper_exec_t) depth: 0
 	


	
		
	





	


########################################
#
# Declarations
#

# real declaration moved to mls until
# range_transition works in loadable modules

	


 	 	 	 	
##### begin kernel_domtrans_to(udev_t,udev_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(kernel_t,udev_exec_t,udev_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(kernel_t,udev_exec_t,udev_t) depth: 3
 	
	allow kernel_t udev_exec_t:file { getattr read execute };
	allow kernel_t udev_t:process transition;
	dontaudit kernel_t udev_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(kernel_t,udev_exec_t,udev_t) depth: 2
 	
	type_transition kernel_t udev_exec_t:process udev_t;
 	 	 	 	
##### end domain_auto_trans(kernel_t,udev_exec_t,udev_t) depth: 1
 	

	allow kernel_t udev_t:fd use;
	allow udev_t kernel_t:fd use;
	allow udev_t kernel_t:fifo_file { getattr read write append ioctl lock };
	allow udev_t kernel_t:process sigchld;

	

	 	 	 	
##### end kernel_domtrans_to(udev_t,udev_exec_t) depth: 0
 	
 	 	 	 	
##### begin domain_obj_id_change_exemption(udev_t) depth: 1
 	
	
	


	typeattribute udev_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(udev_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(udev_t,udev_helper_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(udev_helper_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(udev_helper_exec_t) depth: 3
 	
	
	


	allow udev_helper_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(udev_helper_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(udev_helper_exec_t) depth: 3
 	
	
	


	allow udev_helper_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(udev_helper_exec_t) depth: 2
 	
	typeattribute udev_helper_exec_t file_type;

	 	 	 	
##### end files_type(udev_helper_exec_t) depth: 1
 	

	allow udev_t udev_helper_exec_t:file entrypoint;
	allow udev_t udev_helper_exec_t:file { read getattr lock execute ioctl };

	typeattribute udev_helper_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(udev_t,udev_helper_exec_t) depth: 0
 	
 	 	 	 	
##### begin domain_interactive_fd(udev_t) depth: 1
 	
	
	


	typeattribute udev_t privfd;

	 	 	 	
##### end domain_interactive_fd(udev_t) depth: 0
 	
 	 	 	 	
##### begin init_daemon_domain(udev_t,udev_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(udev_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(udev_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute udev_t domain;

	# allow the domain to read its /proc/pid entries
	allow udev_t self:dir { read getattr lock search ioctl };
	allow udev_t self:lnk_file { read getattr lock ioctl };
	allow udev_t self:file { getattr read write append ioctl lock };

	# allow udev_t to create child processes in this domain
	allow udev_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types udev_t;
		role sysadm_r types udev_t;
		role user_r types udev_t;
		role staff_r types udev_t;
	

	 	 	 	
##### end domain_base_type(udev_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(udev_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(udev_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(udev_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 3
 	
	allow udev_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(udev_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(udev_t) depth: 3
 	
	
	


	allow udev_t root_t:dir { read getattr lock search ioctl };
	allow udev_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(udev_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(udev_t) depth: 3
 	
	
	


	allow udev_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(udev_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(udev_t) depth: 3
 	
	
	


	allow udev_t init_t:process signull;

	 	 	 	
##### end init_signull(udev_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(udev_t) depth: 3
 	
	
	


	allow udev_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(udev_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(udev_t) depth: 3
 	
	
	


	allow udev_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(udev_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(udev_t) depth: 3
 	
	
	


	dontaudit udev_t security_t:dir search;
	dontaudit udev_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(udev_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(udev_t) depth: 3
 	
	
	


	dontaudit udev_t selinux_config_t:dir search;
	dontaudit udev_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(udev_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(udev_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(udev_t,udev_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(udev_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(udev_exec_t) depth: 4
 	
	
	


	allow udev_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(udev_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(udev_exec_t) depth: 4
 	
	
	


	allow udev_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(udev_exec_t) depth: 3
 	
	typeattribute udev_exec_t file_type;

	 	 	 	
##### end files_type(udev_exec_t) depth: 2
 	

	allow udev_t udev_exec_t:file entrypoint;
	allow udev_t udev_exec_t:file { read getattr lock execute ioctl };

	typeattribute udev_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(udev_t,udev_exec_t) depth: 1
 	

	role system_r types udev_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool udev_disable_trans false;
			
		
		if(udev_disable_trans ) {
			
	
	


	allow initrc_t udev_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init udev_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,udev_exec_t,udev_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,udev_exec_t,udev_t) depth: 3
 	
	allow initrc_t udev_exec_t:file { getattr read execute };
	allow initrc_t udev_t:process transition;
	dontaudit initrc_t udev_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,udev_exec_t,udev_t) depth: 2
 	
	type_transition initrc_t udev_exec_t:process udev_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,udev_exec_t,udev_t) depth: 1
 	
			allow initrc_t udev_t:fd use;
			allow udev_t initrc_t:fd use;
			allow udev_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow udev_t initrc_t:process sigchld;
			allow initrc_t udev_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow udev_t udev_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(udev_t,udev_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_config_file(udev_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(udev_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(udev_etc_t) depth: 3
 	
	
	


	allow udev_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(udev_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(udev_etc_t) depth: 3
 	
	
	


	allow udev_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(udev_etc_t) depth: 2
 	
	typeattribute udev_etc_t file_type;

	 	 	 	
##### end files_type(udev_etc_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute udev_etc_t usercanread;

	 	 	 	
##### end files_config_file(udev_etc_t) depth: 0
 	

# udev_runtime_t is the type of the udev table file
# cjp: this is probably a copy of udev_tbl_t and can be removed
 	 	 	 	
##### begin files_type(udev_runtime_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(udev_runtime_t) depth: 2
 	
	
	


	allow udev_runtime_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(udev_runtime_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(udev_runtime_t) depth: 2
 	
	
	


	allow udev_runtime_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(udev_runtime_t) depth: 1
 	
	typeattribute udev_runtime_t file_type;

	 	 	 	
##### end files_type(udev_runtime_t) depth: 0
 	

 	 	 	 	
##### begin files_type(udev_tbl_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(udev_tbl_t) depth: 2
 	
	
	


	allow udev_tbl_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(udev_tbl_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(udev_tbl_t) depth: 2
 	
	
	


	allow udev_tbl_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(udev_tbl_t) depth: 1
 	
	typeattribute udev_tbl_t file_type;

	 	 	 	
##### end files_type(udev_tbl_t) depth: 0
 	

 	 	 	 	
##### begin files_pid_file(udev_var_run_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(udev_var_run_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(udev_var_run_t) depth: 3
 	
	
	


	allow udev_var_run_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(udev_var_run_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(udev_var_run_t) depth: 3
 	
	
	


	allow udev_var_run_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(udev_var_run_t) depth: 2
 	
	typeattribute udev_var_run_t file_type;

	 	 	 	
##### end files_type(udev_var_run_t) depth: 1
 	
	typeattribute udev_var_run_t pidfile;

	 	 	 	
##### end files_pid_file(udev_var_run_t) depth: 0
 	

########################################
#
# Local policy
#

allow udev_t self:capability { chown dac_override dac_read_search fowner fsetid sys_admin mknod net_raw net_admin sys_nice sys_rawio sys_resource sys_nice };
dontaudit udev_t self:capability sys_tty_config;
allow udev_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow udev_t self:process { execmem setfscreate };
allow udev_t self:fd use;
allow udev_t self:fifo_file { getattr read write append ioctl lock };
allow udev_t self:sock_file { read getattr lock ioctl };
allow udev_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow udev_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow udev_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow udev_t self:msg { send receive };
allow udev_t self:unix_stream_socket { listen accept };
allow udev_t self:unix_dgram_socket sendto;
allow udev_t self:unix_stream_socket connectto;
allow udev_t self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow udev_t self:rawip_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

allow udev_t udev_exec_t:file write;

	
	


	allow udev_t udev_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


allow udev_t udev_helper_exec_t:dir { read getattr lock search ioctl };

# read udev config
allow udev_t udev_etc_t:file { read getattr lock ioctl };

# create udev database in /dev/.udevdb
allow udev_t udev_tbl_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin dev_filetrans(udev_t,udev_tbl_t,file) depth: 1
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition udev_t device_t:file udev_tbl_t;

	 	 	 	 	
##### begin fs_associate_tmpfs(udev_tbl_t) depth: 2
 	
	
	


	allow udev_tbl_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(udev_tbl_t) depth: 1
 	
	 	 	 	 	
##### begin files_associate_tmp(udev_tbl_t) depth: 2
 	
	
	


	allow udev_tbl_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(udev_tbl_t) depth: 1
 	

	 	 	 	
##### end dev_filetrans(udev_t,udev_tbl_t,file) depth: 0
 	

allow udev_t udev_var_run_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow udev_t udev_var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
 	 	 	 	
##### begin files_pid_filetrans(udev_t,udev_var_run_t,file) depth: 1
 	
	
	


	allow udev_t var_t:dir { getattr search };
	allow udev_t var_run_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition udev_t var_run_t:file udev_var_run_t;

	 	 	 	
##### end files_pid_filetrans(udev_t,udev_var_run_t,file) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir { read getattr lock search ioctl };
	allow udev_t proc_t:lnk_file { getattr read };
	allow udev_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_getattr_core_if(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir { read getattr lock search ioctl };
	allow udev_t proc_kcore_t:file getattr;

	 	 	 	
##### end kernel_getattr_core_if(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_use_fds(udev_t) depth: 1
 	
	
	


	allow udev_t kernel_t:fd use;

	 	 	 	
##### end kernel_use_fds(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_device_sysctls(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir search;
	allow udev_t sysctl_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_dev_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_dev_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_device_sysctls(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_hotplug_sysctls(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir search;
	allow udev_t sysctl_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_hotplug_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_hotplug_sysctls(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_modprobe_sysctls(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir search;
	allow udev_t sysctl_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_modprobe_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_modprobe_sysctls(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir search;
	allow udev_t sysctl_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rw_hotplug_sysctls(udev_t) depth: 1
 	
	
	


	allow udev_t proc_t:dir search;
	allow udev_t sysctl_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow udev_t sysctl_hotplug_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end kernel_rw_hotplug_sysctls(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_rw_unix_dgram_sockets(udev_t) depth: 1
 	
	
	


	allow udev_t kernel_t:unix_dgram_socket { read write ioctl };

	 	 	 	
##### end kernel_rw_unix_dgram_sockets(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_dgram_send(udev_t) depth: 1
 	
	
	


	allow udev_t kernel_t:unix_dgram_socket sendto;

	 	 	 	
##### end kernel_dgram_send(udev_t) depth: 0
 	
 	 	 	 	
##### begin kernel_signal(udev_t) depth: 1
 	
	
	


	allow kernel_t udev_t:process signal;

	 	 	 	
##### end kernel_signal(udev_t) depth: 0
 	

 	 	 	 	
##### begin dev_rw_sysfs(udev_t) depth: 1
 	
	
	


	allow udev_t sysfs_t:dir { read getattr lock search ioctl };
	allow udev_t sysfs_t:lnk_file { read getattr lock ioctl };
	allow udev_t sysfs_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_sysfs(udev_t) depth: 0
 	
 	 	 	 	
##### begin dev_manage_all_dev_nodes(udev_t) depth: 1
 	
	
	


	allow udev_t device_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir relabelfrom relabelto };
	allow udev_t device_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow udev_t device_t:lnk_file { create read getattr setattr link unlink rename };
	allow udev_t device_t:{ chr_file blk_file } { create ioctl read getattr lock write setattr append link unlink rename relabelfrom relabelto };
	allow udev_t device_node:{ chr_file blk_file } { create ioctl read getattr lock write setattr append link unlink rename relabelfrom relabelto };

	# these next rules are to satisfy assertions broken by the above lines.
	# the permissions hopefully can be cut back a lot
	 	 	 	 	
##### begin storage_raw_read_fixed_disk(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 2
 	
	allow udev_t fixed_disk_device_t:chr_file { read getattr lock ioctl };
	#ifdef(`distro_sebsd', `
	#	allow udev_t fixed_disk_device_t:chr_file r_file_perms;
	#')
	typeattribute udev_t fixed_disk_raw_read;

	 	 	 	
##### end storage_raw_read_fixed_disk(udev_t) depth: 1
 	
	 	 	 	 	
##### begin storage_raw_write_fixed_disk(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 2
 	
	allow udev_t fixed_disk_device_t:blk_file { getattr write append ioctl };
	typeattribute udev_t fixed_disk_raw_write;

	 	 	 	
##### end storage_raw_write_fixed_disk(udev_t) depth: 1
 	
	 	 	 	 	
##### begin storage_read_scsi_generic(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 2
 	
	allow udev_t scsi_generic_device_t:chr_file { read getattr lock ioctl };
	typeattribute udev_t scsi_generic_read;

	 	 	 	
##### end storage_read_scsi_generic(udev_t) depth: 1
 	
	 	 	 	 	
##### begin storage_write_scsi_generic(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 2
 	
	allow udev_t scsi_generic_device_t:chr_file { getattr write ioctl };
	typeattribute udev_t scsi_generic_write;

	 	 	 	
##### end storage_write_scsi_generic(udev_t) depth: 1
 	

	typeattribute udev_t memory_raw_read;
	typeattribute udev_t memory_raw_write;

	 	 	 	
##### end dev_manage_all_dev_nodes(udev_t) depth: 0
 	
 	 	 	 	
##### begin dev_rw_generic_files(udev_t) depth: 1
 	
	
	


	allow udev_t device_t:dir search;
	allow udev_t device_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_generic_files(udev_t) depth: 0
 	
 	 	 	 	
##### begin dev_delete_generic_files(udev_t) depth: 1
 	
	
	


	allow udev_t device_t:dir { search write remove_name };
	allow udev_t device_t:file unlink;

	 	 	 	
##### end dev_delete_generic_files(udev_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_all_fs(udev_t) depth: 1
 	
	
	


	allow udev_t filesystem_type:filesystem getattr;

	 	 	 	
##### end fs_getattr_all_fs(udev_t) depth: 0
 	
 	 	 	 	
##### begin fs_list_inotifyfs(udev_t) depth: 1
 	
	
	


	allow udev_t inotifyfs_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end fs_list_inotifyfs(udev_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(udev_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(udev_t) depth: 2
 	
	
	


	allow udev_t proc_t:dir { read getattr lock search ioctl };
	allow udev_t proc_t:lnk_file { getattr read };
	allow udev_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(udev_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(udev_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(udev_t) depth: 1
 	
	
	


	allow udev_t security_t:dir { read search getattr };
	allow udev_t security_t:file { getattr read write };
	allow udev_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(udev_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(udev_t) depth: 1
 	
	
	


	allow udev_t security_t:dir { read search getattr };
	allow udev_t security_t:file { getattr read write };
	allow udev_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(udev_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(udev_t) depth: 1
 	
	
	


	allow udev_t security_t:dir { read search getattr };
	allow udev_t security_t:file { getattr read write };
	allow udev_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(udev_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(udev_t) depth: 1
 	
	
	


	allow udev_t security_t:dir { read search getattr };
	allow udev_t security_t:file { getattr read write };
	allow udev_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(udev_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(udev_t) depth: 1
 	
	
	


	allow udev_t security_t:dir { read search getattr };
	allow udev_t security_t:file { getattr read write };
	allow udev_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(udev_t) depth: 0
 	

 	 	 	 	
##### begin auth_use_nsswitch(udev_t) depth: 1
 	
	
	


	allow udev_t var_auth_t:dir { read getattr lock search ioctl };
	allow udev_t var_auth_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_list_var_lib(udev_t) depth: 2
 	
	
	


	allow udev_t var_t:dir { getattr search };
	allow udev_t var_lib_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_var_lib(udev_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(udev_t) depth: 2
 	
	
	


	allow udev_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow udev_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(udev_t) depth: 3
 	
	
	


	allow udev_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(udev_t) depth: 4
 	
	
	


	allow udev_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(udev_t) depth: 4
 	
	
	


	allow udev_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(udev_t) depth: 4
 	
	
	


	allow udev_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow udev_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(udev_t) depth: 4
 	
	
	


	allow udev_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(udev_t) depth: 3
 	
	
	


	allow udev_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(udev_t) depth: 4
 	
	
	


	allow udev_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(udev_t) depth: 4
 	
	
	


	allow udev_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(udev_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(udev_t) depth: 4
 	
	
	


	allow udev_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(udev_t) depth: 3
 	
	
	


	allow udev_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(udev_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 3
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 2
 	
	allow udev_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(udev_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(udev_t) depth: 2
 	
	
	
		

	allow udev_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(udev_t) depth: 3
 	
	
	


	allow udev_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(udev_t) depth: 4
 	
	
	


	allow udev_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow udev_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(udev_t) depth: 4
 	
	
	


	allow udev_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(udev_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(udev_t) depth: 4
 	
	
	


	allow udev_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(udev_t) depth: 3
 	
	
	


	allow udev_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(udev_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(udev_t) depth: 4
 	
	
	


	allow udev_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(udev_t) depth: 3
 	
	
	


	allow udev_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(udev_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 3
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 2
 	
	allow udev_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(udev_t) depth: 1
 	

	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_use_nsswitch(udev_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(udev_t) depth: 1
 	
	
	


	allow udev_t bin_t:dir { read getattr lock search ioctl };
	allow udev_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow udev_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(udev_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(udev_t) depth: 1
 	
	
	


	allow udev_t sbin_t:dir { read getattr lock search ioctl };
	allow udev_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow udev_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(udev_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(udev_t) depth: 1
 	
	
	


	allow udev_t bin_t:dir { read getattr lock search ioctl };
	allow udev_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow udev_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(udev_t) depth: 0
 	

 	 	 	 	
##### begin domain_exec_all_entry_files(udev_t) depth: 1
 	
	
	


	
	
	


	allow udev_t entry_type:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end domain_exec_all_entry_files(udev_t) depth: 0
 	
 	 	 	 	
##### begin domain_read_all_domains_state(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin kernel_search_proc(udev_t) depth: 2
 	
	
	


	allow udev_t proc_t:dir search;

	 	 	 	
##### end kernel_search_proc(udev_t) depth: 1
 	
	allow udev_t domain:dir { read getattr lock search ioctl };
	allow udev_t domain:lnk_file { read getattr lock ioctl };
	allow udev_t domain:file { read getattr lock ioctl };

	 	 	 	
##### end domain_read_all_domains_state(udev_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(udev_t) depth: 1
 	
	
	


	allow udev_t etc_t:dir { read getattr lock search ioctl };
	allow udev_t etc_runtime_t:file { read getattr lock ioctl };
	allow udev_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(udev_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_files(udev_t) depth: 1
 	
	
	


	allow udev_t etc_t:dir { read getattr lock search ioctl };
	allow udev_t etc_t:file { read getattr lock ioctl };
	allow udev_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(udev_t) depth: 0
 	
 	 	 	 	
##### begin files_exec_etc_files(udev_t) depth: 1
 	
	
	


	allow udev_t etc_t:dir { read getattr lock search ioctl };
	allow udev_t etc_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow udev_t etc_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end files_exec_etc_files(udev_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_isid_type_dirs(udev_t) depth: 1
 	
	
	


	dontaudit udev_t file_t:dir { getattr search };

	 	 	 	
##### end files_dontaudit_search_isid_type_dirs(udev_t) depth: 0
 	
 	 	 	 	
##### begin files_getattr_generic_locks(udev_t) depth: 1
 	
	
	


	allow udev_t var_t:dir { getattr search };
	allow udev_t var_lock_t:dir { read getattr lock search ioctl };
	allow udev_t var_lock_t:file getattr;

	 	 	 	
##### end files_getattr_generic_locks(udev_t) depth: 0
 	
 	 	 	 	
##### begin files_search_mnt(udev_t) depth: 1
 	
	
	


	allow udev_t mnt_t:dir { getattr search };

	 	 	 	
##### end files_search_mnt(udev_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(udev_t) depth: 1
 	
	
	


	allow udev_t init_t:fd use;

	 	 	 	
##### end init_use_fds(udev_t) depth: 0
 	
 	 	 	 	
##### begin init_read_utmp(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(udev_t) depth: 2
 	
	
	


	allow udev_t var_t:dir { getattr search };
	allow udev_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(udev_t) depth: 1
 	
	allow udev_t initrc_var_run_t:file { read getattr lock ioctl };

	 	 	 	
##### end init_read_utmp(udev_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_write_utmp(udev_t) depth: 1
 	
	
	


	dontaudit udev_t initrc_var_run_t:file { write lock };

	 	 	 	
##### end init_dontaudit_write_utmp(udev_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(udev_t) depth: 2
 	
	
	


	allow udev_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(udev_t) depth: 1
 	
	allow udev_t lib_t:dir { read getattr lock search ioctl };
	allow udev_t lib_t:lnk_file { read getattr lock ioctl };
	allow udev_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow udev_t ld_so_t:file { read getattr lock execute ioctl };
	allow udev_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(udev_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(udev_t) depth: 2
 	
	
	


	allow udev_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(udev_t) depth: 1
 	
	allow udev_t lib_t:dir { read getattr lock search ioctl };
	allow udev_t lib_t:lnk_file { read getattr lock ioctl };
	allow udev_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow udev_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow udev_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(udev_t) depth: 0
 	

 	 	 	 	
##### begin logging_search_logs(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(udev_t) depth: 2
 	
	
	


	allow udev_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(udev_t) depth: 1
 	
	allow udev_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(udev_t) depth: 0
 	
 	 	 	 	
##### begin logging_send_syslog_msg(udev_t) depth: 1
 	
	
	


	allow udev_t devlog_t:lnk_file read;
	allow udev_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow udev_t syslogd_t:unix_dgram_socket sendto;
	allow udev_t syslogd_t:unix_stream_socket connectto;
	allow udev_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow udev_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 2
 	
	allow udev_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(udev_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(udev_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 2
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 1
 	
	# FIXME: udev_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(udev_t) depth: 2
 	
	
	


	allow udev_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(udev_t) depth: 1
 	
	allow udev_t locale_t:dir { read getattr lock search ioctl };
	allow udev_t locale_t:lnk_file { read getattr lock ioctl };
	allow udev_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(udev_t) depth: 3
 	
	
	


	allow udev_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(udev_t) depth: 2
 	
	allow udev_t lib_t:dir { read getattr lock search ioctl };
	allow udev_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(udev_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(udev_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_read_up(udev_t) depth: 1
 	
	
	


	typeattribute udev_t mlsfileread;

	 	 	 	
##### end mls_file_read_up(udev_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_write_down(udev_t) depth: 1
 	
	
	


	typeattribute udev_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(udev_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_upgrade(udev_t) depth: 1
 	
	
	


	typeattribute udev_t mlsfileupgrade;

	 	 	 	
##### end mls_file_upgrade(udev_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(udev_t) depth: 1
 	
	
	


	typeattribute udev_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(udev_t) depth: 0
 	
 	 	 	 	
##### begin mls_process_write_down(udev_t) depth: 1
 	
	
	


	typeattribute udev_t mlsprocwrite;

	 	 	 	
##### end mls_process_write_down(udev_t) depth: 0
 	

 	 	 	 	
##### begin modutils_domtrans_insmod(udev_t) depth: 1
 	
	
	


#	if (!secure_mode_insmod) {
#		modutils_domtrans_insmod_uncond(udev_t)
#	}

	 	 	 	
##### end modutils_domtrans_insmod(udev_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 2
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 1
 	
	allow udev_t selinux_config_t:dir { read getattr lock search ioctl };
	allow udev_t selinux_config_t:file { read getattr lock ioctl };
	allow udev_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(udev_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_default_contexts(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 2
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 1
 	
	allow udev_t selinux_config_t:dir search;
	allow udev_t default_context_t:dir { read getattr lock search ioctl };
	allow udev_t default_context_t:file { read getattr lock ioctl };
	allow udev_t default_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_default_contexts(udev_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_file_contexts(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 2
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 1
 	
	allow udev_t selinux_config_t:dir search;
	allow udev_t file_context_t:dir { read getattr lock search ioctl };
	allow udev_t file_context_t:file { read getattr lock ioctl };
	allow udev_t file_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_file_contexts(udev_t) depth: 0
 	
 	 	 	 	
##### begin seutil_domtrans_restorecon(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(udev_t) depth: 2
 	
	
	


	allow udev_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(udev_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(udev_t,restorecon_exec_t,restorecon_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(udev_t,restorecon_exec_t,restorecon_t) depth: 3
 	
	allow udev_t restorecon_exec_t:file { getattr read execute };
	allow udev_t restorecon_t:process transition;
	dontaudit udev_t restorecon_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(udev_t,restorecon_exec_t,restorecon_t) depth: 2
 	
	type_transition udev_t restorecon_exec_t:process restorecon_t;
 	 	 	 	
##### end domain_auto_trans(udev_t,restorecon_exec_t,restorecon_t) depth: 1
 	

	allow udev_t restorecon_t:fd use;
	allow restorecon_t udev_t:fd use;
	allow restorecon_t udev_t:fifo_file { getattr read write append ioctl lock };
	allow restorecon_t udev_t:process sigchld;

	 	 	 	
##### end seutil_domtrans_restorecon(udev_t) depth: 0
 	

 	 	 	 	
##### begin sysnet_domtrans_ifconfig(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(udev_t) depth: 2
 	
	
	


	allow udev_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(udev_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(udev_t,ifconfig_exec_t,ifconfig_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(udev_t,ifconfig_exec_t,ifconfig_t) depth: 3
 	
	allow udev_t ifconfig_exec_t:file { getattr read execute };
	allow udev_t ifconfig_t:process transition;
	dontaudit udev_t ifconfig_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(udev_t,ifconfig_exec_t,ifconfig_t) depth: 2
 	
	type_transition udev_t ifconfig_exec_t:process ifconfig_t;
 	 	 	 	
##### end domain_auto_trans(udev_t,ifconfig_exec_t,ifconfig_t) depth: 1
 	

	allow udev_t ifconfig_t:fd use;
	allow ifconfig_t udev_t:fd use;
	allow ifconfig_t udev_t:fifo_file { getattr read write append ioctl lock };
	allow ifconfig_t udev_t:process sigchld;

	 	 	 	
##### end sysnet_domtrans_ifconfig(udev_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_sysadm_ttys(udev_t) depth: 1
 	
	
		 	 	 	 	
##### begin term_use_unallocated_ttys(udev_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(udev_t) depth: 3
 	
	
	


	allow udev_t device_t:dir { read getattr lock search ioctl };
	allow udev_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(udev_t) depth: 2
 	
	allow udev_t tty_device_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_unallocated_ttys(udev_t) depth: 1
 	
	

	 	 	 	
##### end userdom_use_sysadm_ttys(udev_t) depth: 0
 	
 	 	 	 	
##### begin userdom_dontaudit_search_all_users_home_content(udev_t) depth: 1
 	
	
	


	dontaudit udev_t { home_dir_type home_type }:dir { getattr search };

	 	 	 	
##### end userdom_dontaudit_search_all_users_home_content(udev_t) depth: 0
 	




	 	 	 	 	
##### begin term_dontaudit_use_unallocated_ttys(udev_t) depth: 1
 	
	
	


	dontaudit udev_t tty_device_t:chr_file { read write };

	 	 	 	
##### end term_dontaudit_use_unallocated_ttys(udev_t) depth: 0
 	
	 	 	 	 	
##### begin term_dontaudit_use_generic_ptys(udev_t) depth: 1
 	
	
	


	dontaudit udev_t devpts_t:chr_file { getattr read write };

	 	 	 	
##### end term_dontaudit_use_generic_ptys(udev_t) depth: 0
 	

	 	 	 	 	
##### begin unconfined_domain(udev_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(udev_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow udev_t self:capability *;
	allow udev_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow udev_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow udev_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow udev_t self:nscd *;
	allow udev_t self:dbus *;
	allow udev_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(udev_t) depth: 3
 	
	
	


	allow udev_t proc_type:{ dir file } *;

	allow udev_t sysctl_t:{ dir file } *;

	allow udev_t kernel_t:system *;

	allow udev_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow udev_t unlabeled_t:filesystem *;
	allow udev_t unlabeled_t:association *;

	typeattribute udev_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute udev_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(udev_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow udev_t { proc_t proc_net_t }:dir search;

	allow udev_t sysctl_type:dir { read getattr lock search ioctl };
	allow udev_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(udev_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(udev_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(udev_t) depth: 3
 	
	
	


	allow udev_t node_type:node *;
	allow udev_t netif_type:netif *;
	allow udev_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow udev_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow udev_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow udev_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(udev_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(udev_t) depth: 5
 	
	
	


	allow udev_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(udev_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(udev_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(udev_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(udev_t) depth: 3
 	
	
	


	allow udev_t device_node:{ chr_file blk_file } *;
	allow udev_t mtrr_device_t:{ dir file } *;

	allow udev_t self:capability sys_rawio;
	typeattribute udev_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(udev_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(udev_t) depth: 3
 	
	
	


	typeattribute udev_t unconfined_domain_type;

	# pass all constraints
	typeattribute udev_t can_change_process_identity;
	typeattribute udev_t can_change_process_role;
	typeattribute udev_t can_change_object_identity;
	typeattribute udev_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow udev_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow udev_t domain:fd use;
	allow udev_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow udev_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow udev_t domain:{ sem msgq shm } *;
	allow udev_t domain:msg { send receive };

	# For /proc/pid
	allow udev_t domain:dir { read getattr lock search ioctl };
	allow udev_t domain:file { read getattr lock ioctl };
	allow udev_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(udev_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(udev_t) depth: 3
 	
	
	


	dontaudit udev_t domain:dir { read getattr lock search ioctl };
	dontaudit udev_t domain:lnk_file { read getattr lock ioctl };
	dontaudit udev_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit udev_t domain:sock_file { read getattr lock ioctl };
	dontaudit udev_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(udev_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(udev_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow udev_t file_type:{ file chr_file } ~execmod;
	allow udev_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow udev_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow udev_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow udev_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(udev_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(udev_t) depth: 3
 	
	
	


	allow udev_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow udev_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(udev_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(udev_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow udev_t security_t:dir { getattr search read };
	allow udev_t security_t:file { getattr read write };

	typeattribute udev_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow udev_t security_t:security *;
		auditallow udev_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(udev_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow udev_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow udev_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow udev_t self:process execstack;
		auditallow udev_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit udev_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(udev_t) depth: 3
 	
	
	


	typeattribute udev_t can_read_shadow_passwords;
	typeattribute udev_t can_write_shadow_passwords;
	typeattribute udev_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(udev_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(udev_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(udev_t) depth: 4
 	
	
	


	allow udev_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(udev_t) depth: 3
 	
	allow udev_t lib_t:dir { read getattr lock search ioctl };
	allow udev_t lib_t:lnk_file { read getattr lock ioctl };
	allow udev_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow udev_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow udev_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(udev_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(udev_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(udev_t) depth: 4
 	
	
	


	allow udev_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(udev_t) depth: 3
 	
	allow udev_t selinux_config_t:dir search;
	allow udev_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow udev_t policy_config_t:file { getattr create write };
#	typeattribute udev_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(udev_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(udev_t) depth: 3
 	
	
	


	allow udev_t policy_config_t:file relabelto;
	typeattribute udev_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(udev_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(udev_t) depth: 3
 	
	
	


	allow udev_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow udev_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute udev_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute udev_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(udev_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(udev_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow udev_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow udev_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(udev_t) depth: 0
 	



	
		
	 	 	 	 	
##### begin auth_read_pam_console_data(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_var(udev_t) depth: 2
 	
	
	


	allow udev_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(udev_t) depth: 1
 	
	 	 	 	 	
##### begin files_search_pids(udev_t) depth: 2
 	
	
	


	allow udev_t var_t:dir { getattr search };
	allow udev_t var_run_t:dir { getattr search };

	 	 	 	
##### end files_search_pids(udev_t) depth: 1
 	
	allow udev_t pam_var_console_t:dir { read getattr lock search ioctl };
	allow udev_t pam_var_console_t:file { read getattr lock ioctl };

	 	 	 	
##### end auth_read_pam_console_data(udev_t) depth: 0
 	
	 	 	 	 	
##### begin auth_domtrans_pam_console(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(udev_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(udev_t,pam_console_exec_t,pam_console_t) depth: 3
 	
	allow udev_t pam_console_exec_t:file { getattr read execute };
	allow udev_t pam_console_t:process transition;
	dontaudit udev_t pam_console_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(udev_t,pam_console_exec_t,pam_console_t) depth: 2
 	
	type_transition udev_t pam_console_exec_t:process pam_console_t;
 	 	 	 	
##### end domain_auto_trans(udev_t,pam_console_exec_t,pam_console_t) depth: 1
 	

	allow udev_t pam_console_t:fd use;
	allow pam_console_t udev_t:fd use;
	allow pam_console_t udev_t:fifo_file { getattr read write append ioctl lock };
	allow pam_console_t udev_t:process sigchld;

	 	 	 	
##### end auth_domtrans_pam_console(udev_t) depth: 0
 	

	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	



	
		
	 	 	 	 	
##### begin sysnet_domtrans_dhcpc(udev_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(udev_t) depth: 2
 	
	
	


	allow udev_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(udev_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(udev_t,dhcpc_exec_t,dhcpc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(udev_t,dhcpc_exec_t,dhcpc_t) depth: 3
 	
	allow udev_t dhcpc_exec_t:file { getattr read execute };
	allow udev_t dhcpc_t:process transition;
	dontaudit udev_t dhcpc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(udev_t,dhcpc_exec_t,dhcpc_t) depth: 2
 	
	type_transition udev_t dhcpc_exec_t:process dhcpc_t;
 	 	 	 	
##### end domain_auto_trans(udev_t,dhcpc_exec_t,dhcpc_t) depth: 1
 	

	allow udev_t dhcpc_t:fd use;
	allow dhcpc_t udev_t:fd use;
	allow dhcpc_t udev_t:fifo_file { getattr read write append ioctl lock };
	allow dhcpc_t udev_t:process sigchld;

	 	 	 	
##### end sysnet_domtrans_dhcpc(udev_t) depth: 0
 	

	


#optional_policy(`xdm',`
#	xdm_read_pid(udev_t)
#')

 

	


########################################
#
# Declarations
#

# real declaration moved to mls until
# range_transition works in loadable modules

	

 	 	 	 	
##### begin init_system_domain(unconfined_t,unconfined_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(unconfined_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(unconfined_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute unconfined_t domain;

	# allow the domain to read its /proc/pid entries
	allow unconfined_t self:dir { read getattr lock search ioctl };
	allow unconfined_t self:lnk_file { read getattr lock ioctl };
	allow unconfined_t self:file { getattr read write append ioctl lock };

	# allow unconfined_t to create child processes in this domain
	allow unconfined_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types unconfined_t;
		role sysadm_r types unconfined_t;
		role user_r types unconfined_t;
		role staff_r types unconfined_t;
	

	 	 	 	
##### end domain_base_type(unconfined_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t device_t:dir { read getattr lock search ioctl };
	allow unconfined_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t device_t:dir { read getattr lock search ioctl };
	allow unconfined_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(unconfined_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(unconfined_t) depth: 4
 	
	
	


	allow unconfined_t device_t:dir { read getattr lock search ioctl };
	allow unconfined_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(unconfined_t) depth: 3
 	
	allow unconfined_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(unconfined_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t root_t:dir { read getattr lock search ioctl };
	allow unconfined_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(unconfined_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t init_t:process signull;

	 	 	 	
##### end init_signull(unconfined_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(unconfined_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(unconfined_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(unconfined_t) depth: 3
 	
	
	


	dontaudit unconfined_t security_t:dir search;
	dontaudit unconfined_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(unconfined_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(unconfined_t) depth: 3
 	
	
	


	dontaudit unconfined_t selinux_config_t:dir search;
	dontaudit unconfined_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(unconfined_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(unconfined_t,unconfined_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(unconfined_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(unconfined_exec_t) depth: 4
 	
	
	


	allow unconfined_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(unconfined_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(unconfined_exec_t) depth: 4
 	
	
	


	allow unconfined_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(unconfined_exec_t) depth: 3
 	
	typeattribute unconfined_exec_t file_type;

	 	 	 	
##### end files_type(unconfined_exec_t) depth: 2
 	

	allow unconfined_t unconfined_exec_t:file entrypoint;
	allow unconfined_t unconfined_exec_t:file { read getattr lock execute ioctl };

	typeattribute unconfined_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(unconfined_t,unconfined_exec_t) depth: 1
 	

	role system_r types unconfined_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,unconfined_exec_t,unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,unconfined_exec_t,unconfined_t) depth: 3
 	
	allow initrc_t unconfined_exec_t:file { getattr read execute };
	allow initrc_t unconfined_t:process transition;
	dontaudit initrc_t unconfined_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,unconfined_exec_t,unconfined_t) depth: 2
 	
	type_transition initrc_t unconfined_exec_t:process unconfined_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,unconfined_exec_t,unconfined_t) depth: 1
 	

	allow initrc_t unconfined_t:fd use;
	allow unconfined_t initrc_t:fd use;
	allow unconfined_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow unconfined_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(unconfined_t,unconfined_exec_t) depth: 0
 	
role system_r types unconfined_t;

########################################
#
# Local policy
#

 	 	 	 	
##### begin unconfined_domain(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin unconfined_domain_noaudit(unconfined_t) depth: 2
 	
	
	


	# Use any Linux capability.
	allow unconfined_t self:capability *;
	allow unconfined_t self:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };

	# Transition to myself, to make get_ordered_context_list happy.
	allow unconfined_t self:process transition;

	# Write access is for setting attributes under /proc/self/attr.
	allow unconfined_t self:file { getattr read write append ioctl lock };

	# Userland object managers
	allow unconfined_t self:nscd *;
	allow unconfined_t self:dbus *;
	allow unconfined_t self:passwd *;

	 	 	 	 	
##### begin kernel_unconfined(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t proc_type:{ dir file } *;

	allow unconfined_t sysctl_t:{ dir file } *;

	allow unconfined_t kernel_t:system *;

	allow unconfined_t unlabeled_t:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;
	allow unconfined_t unlabeled_t:filesystem *;
	allow unconfined_t unlabeled_t:association *;

	typeattribute unconfined_t can_load_kernmodule, can_receive_kernel_messages;
	typeattribute unconfined_t kern_unconfined;

	 	 	 	 	
##### begin kernel_rw_all_sysctls(unconfined_t) depth: 4
 	
	
	


	# proc_net_t for /proc/net/rpc sysctls
	allow unconfined_t { proc_t proc_net_t }:dir search;

	allow unconfined_t sysctl_type:dir { read getattr lock search ioctl };
	allow unconfined_t sysctl_type:file { { getattr read write append ioctl lock } setattr };

	 	 	 	
##### end kernel_rw_all_sysctls(unconfined_t) depth: 3
 	

	 	 	 	
##### end kernel_unconfined(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_unconfined(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t node_type:node *;
	allow unconfined_t netif_type:netif *;
	allow unconfined_t port_type:tcp_socket { send_msg recv_msg name_connect };
	allow unconfined_t port_type:udp_socket { send_msg recv_msg };

	# Bind to any network address.
	# cjp: rawip_socket doesnt make any sense
	allow unconfined_t port_type:{ tcp_socket udp_socket rawip_socket } name_bind;
	allow unconfined_t node_type:{ tcp_socket udp_socket rawip_socket } node_bind;

	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(unconfined_t) depth: 4
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(unconfined_t) depth: 5
 	
	
	


	allow unconfined_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(unconfined_t) depth: 4
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(unconfined_t) depth: 3
 	

	 	 	 	
##### end corenet_unconfined(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin dev_unconfined(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t device_node:{ chr_file blk_file } *;
	allow unconfined_t mtrr_device_t:{ dir file } *;

	allow unconfined_t self:capability sys_rawio;
	typeattribute unconfined_t memory_raw_write, memory_raw_read;

	 	 	 	
##### end dev_unconfined(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin domain_unconfined(unconfined_t) depth: 3
 	
	
	


	typeattribute unconfined_t unconfined_domain_type;

	# pass all constraints
	typeattribute unconfined_t can_change_process_identity;
	typeattribute unconfined_t can_change_process_role;
	typeattribute unconfined_t can_change_object_identity;
	typeattribute unconfined_t set_curr_context;

	# Use/sendto/connectto sockets created by any domain.
	allow unconfined_t domain:{ { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } socket key_socket } *;

	# Use descriptors and pipes created by any domain.
	allow unconfined_t domain:fd use;
	allow unconfined_t domain:fifo_file { getattr read write append ioctl lock };

	# Act upon any other process.
	allow unconfined_t domain:process ~{ transition dyntransition execmem execstack execheap };

	# Create/access any System V IPC objects.
	allow unconfined_t domain:{ sem msgq shm } *;
	allow unconfined_t domain:msg { send receive };

	# For /proc/pid
	allow unconfined_t domain:dir { read getattr lock search ioctl };
	allow unconfined_t domain:file { read getattr lock ioctl };
	allow unconfined_t domain:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end domain_unconfined(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin domain_dontaudit_read_all_domains_state(unconfined_t) depth: 3
 	
	
	


	dontaudit unconfined_t domain:dir { read getattr lock search ioctl };
	dontaudit unconfined_t domain:lnk_file { read getattr lock ioctl };
	dontaudit unconfined_t domain:file { read getattr lock ioctl };

	# cjp: these should be removed:
	dontaudit unconfined_t domain:sock_file { read getattr lock ioctl };
	dontaudit unconfined_t domain:fifo_file { read getattr lock ioctl };

	 	 	 	
##### end domain_dontaudit_read_all_domains_state(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin files_unconfined(unconfined_t) depth: 3
 	
	
	


	# Create/access any file in a labeled filesystem;
	allow unconfined_t file_type:{ file chr_file } ~execmod;
	allow unconfined_t file_type:{ dir lnk_file sock_file fifo_file blk_file } *;

	# Mount/unmount any filesystem with the context= option. 
	allow unconfined_t file_type:filesystem *;

	# Bind to any network address.
	# cjp: need to check this, I dont think this has any effect.
	allow unconfined_t file_type:{ unix_stream_socket unix_dgram_socket } name_bind;

	
		
	
		if (allow_execmod) {
			
			allow unconfined_t file_type:file execmod;
		
		
		}
	

	

	 	 	 	
##### end files_unconfined(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin fs_unconfined(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t filesystem_type:filesystem *;

	# Create/access other files.  fs_type is to pick up various
	# pseudo filesystem types that are applied to both the filesystem
	# and its files.
	allow unconfined_t filesystem_type:{ dir file lnk_file sock_file fifo_file chr_file blk_file } *;

	 	 	 	
##### end fs_unconfined(unconfined_t) depth: 2
 	
	 	 	 	 	
##### begin selinux_unconfined(unconfined_t) depth: 3
 	
	
	


	# use SELinuxfs
	allow unconfined_t security_t:dir { getattr search read };
	allow unconfined_t security_t:file { getattr read write };

	typeattribute unconfined_t can_load_policy, can_setenforce, can_setsecparam;

	if(!secure_mode_policyload) {
		# Access the security API.
		allow unconfined_t security_t:security *;
		auditallow unconfined_t security_t:security { load_policy setenforce setbool };
	}

	 	 	 	
##### end selinux_unconfined(unconfined_t) depth: 2
 	

	
	
		if (allow_execheap) {
			
		# Allow making the stack executable via mprotect.
		allow unconfined_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		# Allow making anonymous memory executable, e.g. 
		# for runtime-code generation or executable stack.
		allow unconfined_t self:process execmem;
	
		
		}
	


	
	
		if (allow_execmem && allow_execstack) {
			
		# Allow making the stack executable via mprotect.
		allow unconfined_t self:process execstack;
		auditallow unconfined_t self:process execstack;
	
		
		} else {
			
		# These are fairly common but seem to be harmless
		# caused by using shared libraries built with old tool chains
		#dontaudit unconfined_t self:process execstack;
	
		
		}
	



	
	
		
		 	 	 	 	
##### begin auth_unconfined(unconfined_t) depth: 3
 	
	
	


	typeattribute unconfined_t can_read_shadow_passwords;
	typeattribute unconfined_t can_write_shadow_passwords;
	typeattribute unconfined_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_unconfined(unconfined_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin libs_use_shared_libs(unconfined_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_list_usr(unconfined_t) depth: 4
 	
	
	


	allow unconfined_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(unconfined_t) depth: 3
 	
	allow unconfined_t lib_t:dir { read getattr lock search ioctl };
	allow unconfined_t lib_t:lnk_file { read getattr lock ioctl };
	allow unconfined_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow unconfined_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow unconfined_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(unconfined_t) depth: 2
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin seutil_create_bin_policy(unconfined_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin files_search_etc(unconfined_t) depth: 4
 	
	
	


	allow unconfined_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(unconfined_t) depth: 3
 	
	allow unconfined_t selinux_config_t:dir search;
	allow unconfined_t policy_config_t:dir { read getattr lock search ioctl add_name write };
	allow unconfined_t policy_config_t:file { getattr create write };
#	typeattribute unconfined_t can_write_binary_policy;

	 	 	 	
##### end seutil_create_bin_policy(unconfined_t) depth: 2
 	
		 	 	 	 	
##### begin seutil_relabelto_bin_policy(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t policy_config_t:file relabelto;
	typeattribute unconfined_t can_relabelto_binary_policy;

	 	 	 	
##### end seutil_relabelto_bin_policy(unconfined_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin storage_unconfined(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t { fixed_disk_device_t removable_device_t }:blk_file *;
	allow unconfined_t { scsi_generic_device_t tape_device_t }:chr_file *;

	typeattribute unconfined_t fixed_disk_raw_read, fixed_disk_raw_write;
	typeattribute unconfined_t scsi_generic_read, scsi_generic_write;

	 	 	 	
##### end storage_unconfined(unconfined_t) depth: 2
 	
	
	


	 
	 	 	 	
##### end unconfined_domain_noaudit(unconfined_t) depth: 1
 	

	
	
		if (allow_execheap) {
			
		auditallow unconfined_t self:process execheap;
	
		
		}
	


	
	
		if (allow_execmem) {
			
		auditallow unconfined_t self:process execmem;
	
		
		}
	


	 	 	 	
##### end unconfined_domain(unconfined_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(unconfined_t) depth: 1
 	
	
	


	allow unconfined_t devlog_t:lnk_file read;
	allow unconfined_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow unconfined_t syslogd_t:unix_dgram_socket sendto;
	allow unconfined_t syslogd_t:unix_stream_socket connectto;
	allow unconfined_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow unconfined_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(unconfined_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(unconfined_t) depth: 3
 	
	
	


	allow unconfined_t device_t:dir { read getattr lock search ioctl };
	allow unconfined_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(unconfined_t) depth: 2
 	
	allow unconfined_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(unconfined_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(unconfined_t) depth: 0
 	


	allow unconfined_t self:system syslog_read;
	dontaudit unconfined_t self:capability sys_module;

	 	 	 	 	
##### begin files_create_boot_flag(unconfined_t) depth: 1
 	
	
	


	allow unconfined_t root_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow unconfined_t etc_runtime_t:file { create read write setattr unlink };
	type_transition unconfined_t root_t:file etc_runtime_t;

	 	 	 	
##### end files_create_boot_flag(unconfined_t) depth: 0
 	

	 	 	 	 	
##### begin init_domtrans_script(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,initrc_exec_t,initrc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,initrc_exec_t,initrc_t) depth: 3
 	
	allow unconfined_t initrc_exec_t:file { getattr read execute };
	allow unconfined_t initrc_t:process transition;
	dontaudit unconfined_t initrc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,initrc_exec_t,initrc_t) depth: 2
 	
	type_transition unconfined_t initrc_exec_t:process initrc_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,initrc_exec_t,initrc_t) depth: 1
 	

	allow unconfined_t initrc_t:fd use;
	allow initrc_t unconfined_t:fd use;
	allow initrc_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow initrc_t unconfined_t:process sigchld;

	 	 	 	
##### end init_domtrans_script(unconfined_t) depth: 0
 	

	 	 	 	 	
##### begin libs_domtrans_ldconfig(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,ldconfig_exec_t,ldconfig_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,ldconfig_exec_t,ldconfig_t) depth: 3
 	
	allow unconfined_t ldconfig_exec_t:file { getattr read execute };
	allow unconfined_t ldconfig_t:process transition;
	dontaudit unconfined_t ldconfig_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,ldconfig_exec_t,ldconfig_t) depth: 2
 	
	type_transition unconfined_t ldconfig_exec_t:process ldconfig_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,ldconfig_exec_t,ldconfig_t) depth: 1
 	

	allow unconfined_t ldconfig_t:fd use;
	allow ldconfig_t unconfined_t:fd use;
	allow ldconfig_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow ldconfig_t unconfined_t:process sigchld;

	 	 	 	
##### end libs_domtrans_ldconfig(unconfined_t) depth: 0
 	

	 	 	 	 	
##### begin logging_domtrans_auditctl(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,auditctl_exec_t,auditctl_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,auditctl_exec_t,auditctl_t) depth: 3
 	
	allow unconfined_t auditctl_exec_t:file { getattr read execute };
	allow unconfined_t auditctl_t:process transition;
	dontaudit unconfined_t auditctl_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,auditctl_exec_t,auditctl_t) depth: 2
 	
	type_transition unconfined_t auditctl_exec_t:process auditctl_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,auditctl_exec_t,auditctl_t) depth: 1
 	

	allow unconfined_t auditctl_t:fd use;
	allow auditctl_t unconfined_t:fd use;
	allow auditctl_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow auditctl_t unconfined_t:process sigchld;

	 	 	 	
##### end logging_domtrans_auditctl(unconfined_t) depth: 0
 	

	 	 	 	 	
##### begin seutil_domtrans_restorecon(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,restorecon_exec_t,restorecon_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,restorecon_exec_t,restorecon_t) depth: 3
 	
	allow unconfined_t restorecon_exec_t:file { getattr read execute };
	allow unconfined_t restorecon_t:process transition;
	dontaudit unconfined_t restorecon_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,restorecon_exec_t,restorecon_t) depth: 2
 	
	type_transition unconfined_t restorecon_exec_t:process restorecon_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,restorecon_exec_t,restorecon_t) depth: 1
 	

	allow unconfined_t restorecon_t:fd use;
	allow restorecon_t unconfined_t:fd use;
	allow restorecon_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow restorecon_t unconfined_t:process sigchld;

	 	 	 	
##### end seutil_domtrans_restorecon(unconfined_t) depth: 0
 	

	 	 	 	 	
##### begin userdom_unconfined(unconfined_t) depth: 1
 	
	
	


	allow unconfined_t user_home_dir_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
	 	 	 	 	
##### begin files_home_filetrans(unconfined_t,user_home_dir_t,dir) depth: 2
 	
	
	


	allow unconfined_t home_root_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition unconfined_t home_root_t:dir user_home_dir_t;

	 	 	 	
##### end files_home_filetrans(unconfined_t,user_home_dir_t,dir) depth: 1
 	

	 	 	 	
##### end userdom_unconfined(unconfined_t) depth: 0
 	
	 	 	 	 	
##### begin userdom_priveleged_home_dir_manager(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_home(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t home_root_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_home(unconfined_t) depth: 1
 	
	typeattribute unconfined_t privhome;

	 	 	 	
##### end userdom_priveleged_home_dir_manager(unconfined_t) depth: 0
 	

	
	
		
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin bind_domtrans_ndc(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,ndc_exec_t,ndc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,ndc_exec_t,ndc_t) depth: 3
 	
	allow unconfined_t ndc_exec_t:file { getattr read execute };
	allow unconfined_t ndc_t:process transition;
	dontaudit unconfined_t ndc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,ndc_exec_t,ndc_t) depth: 2
 	
	type_transition unconfined_t ndc_exec_t:process ndc_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,ndc_exec_t,ndc_t) depth: 1
 	

	allow unconfined_t ndc_t:fd use;
	allow ndc_t unconfined_t:fd use;
	allow ndc_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow ndc_t unconfined_t:process sigchld;

	 	 	 	
##### end bind_domtrans_ndc(unconfined_t) depth: 0
 	
	
	


	
	
		
	


	
	
		
	


	
	
		
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin fstools_domtrans(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,fsadm_exec_t,fsadm_t) depth: 3
 	
	allow unconfined_t fsadm_exec_t:file { getattr read execute };
	allow unconfined_t fsadm_t:process transition;
	dontaudit unconfined_t fsadm_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,fsadm_exec_t,fsadm_t) depth: 2
 	
	type_transition unconfined_t fsadm_exec_t:process fsadm_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,fsadm_exec_t,fsadm_t) depth: 1
 	

	allow unconfined_t fsadm_t:fd use;
	allow fsadm_t unconfined_t:fd use;
	allow fsadm_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow fsadm_t unconfined_t:process sigchld;

	 	 	 	
##### end fstools_domtrans(unconfined_t) depth: 0
 	
	
	


	
	
		
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin modutils_domtrans_update_mods(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,update_modules_exec_t,update_modules_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,update_modules_exec_t,update_modules_t) depth: 3
 	
	allow unconfined_t update_modules_exec_t:file { getattr read execute };
	allow unconfined_t update_modules_t:process transition;
	dontaudit unconfined_t update_modules_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,update_modules_exec_t,update_modules_t) depth: 2
 	
	type_transition unconfined_t update_modules_exec_t:process update_modules_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,update_modules_exec_t,update_modules_t) depth: 1
 	

	allow unconfined_t update_modules_t:fd use;
	allow update_modules_t unconfined_t:fd use;
	allow update_modules_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	#allow update_modules_t unconfined_t:process sigchld;

	 	 	 	
##### end modutils_domtrans_update_mods(unconfined_t) depth: 0
 	
	
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin mount_domtrans(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,mount_exec_t,mount_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,mount_exec_t,mount_t) depth: 3
 	
	allow unconfined_t mount_exec_t:file { getattr read execute };
	allow unconfined_t mount_t:process transition;
	dontaudit unconfined_t mount_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,mount_exec_t,mount_t) depth: 2
 	
	type_transition unconfined_t mount_exec_t:process mount_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,mount_exec_t,mount_t) depth: 1
 	

	allow unconfined_t mount_t:fd use;
	allow mount_t unconfined_t:fd use;
	allow mount_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow mount_t unconfined_t:process sigchld;

	 	 	 	
##### end mount_domtrans(unconfined_t) depth: 0
 	
	
	


	
	
		
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin postfix_domtrans_map(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,postfix_map_exec_t,postfix_map_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,postfix_map_exec_t,postfix_map_t) depth: 3
 	
	allow unconfined_t postfix_map_exec_t:file { getattr read execute };
	allow unconfined_t postfix_map_t:process transition;
	dontaudit unconfined_t postfix_map_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,postfix_map_exec_t,postfix_map_t) depth: 2
 	
	type_transition unconfined_t postfix_map_exec_t:process postfix_map_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,postfix_map_exec_t,postfix_map_t) depth: 1
 	

	allow unconfined_t postfix_map_t:fd use;
	allow postfix_map_t unconfined_t:fd use;
	allow postfix_map_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_map_t unconfined_t:process sigchld;

	 	 	 	
##### end postfix_domtrans_map(unconfined_t) depth: 0
 	
		# cjp: this should probably be removed:
		 	 	 	 	
##### begin postfix_domtrans_master(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,postfix_master_exec_t,postfix_master_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,postfix_master_exec_t,postfix_master_t) depth: 3
 	
	allow unconfined_t postfix_master_exec_t:file { getattr read execute };
	allow unconfined_t postfix_master_t:process transition;
	dontaudit unconfined_t postfix_master_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,postfix_master_exec_t,postfix_master_t) depth: 2
 	
	type_transition unconfined_t postfix_master_exec_t:process postfix_master_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,postfix_master_exec_t,postfix_master_t) depth: 1
 	

	allow unconfined_t postfix_master_t:fd use;
	allow postfix_master_t unconfined_t:fd use;
	allow postfix_master_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow postfix_master_t unconfined_t:process sigchld;

	 	 	 	
##### end postfix_domtrans_master(unconfined_t) depth: 0
 	
	
	


	
	
		
	


	
	
		
	


	
	
		
	


	
	
		
		 	 	 	 	
##### begin sendmail_domtrans(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_search_sbin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,sendmail_exec_t,sendmail_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,sendmail_exec_t,sendmail_t) depth: 3
 	
	allow unconfined_t sendmail_exec_t:file { getattr read execute };
	allow unconfined_t sendmail_t:process transition;
	dontaudit unconfined_t sendmail_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,sendmail_exec_t,sendmail_t) depth: 2
 	
	type_transition unconfined_t sendmail_exec_t:process sendmail_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,sendmail_exec_t,sendmail_t) depth: 1
 	

	allow unconfined_t sendmail_t:fd use;
	allow sendmail_t unconfined_t:fd use;
	allow sendmail_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow sendmail_t unconfined_t:process sigchld;

	 	 	 	
##### end sendmail_domtrans(unconfined_t) depth: 0
 	
	
	


	
	
		
		 	 	 	 	
##### begin sysnet_domtrans_dhcpc(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,dhcpc_exec_t,dhcpc_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,dhcpc_exec_t,dhcpc_t) depth: 3
 	
	allow unconfined_t dhcpc_exec_t:file { getattr read execute };
	allow unconfined_t dhcpc_t:process transition;
	dontaudit unconfined_t dhcpc_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,dhcpc_exec_t,dhcpc_t) depth: 2
 	
	type_transition unconfined_t dhcpc_exec_t:process dhcpc_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,dhcpc_exec_t,dhcpc_t) depth: 1
 	

	allow unconfined_t dhcpc_t:fd use;
	allow dhcpc_t unconfined_t:fd use;
	allow dhcpc_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow dhcpc_t unconfined_t:process sigchld;

	 	 	 	
##### end sysnet_domtrans_dhcpc(unconfined_t) depth: 0
 	
	
	


	
	
		
		 	 	 	 	
##### begin usermanage_domtrans_admin_passwd(unconfined_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_usr(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin corecmd_search_bin(unconfined_t) depth: 2
 	
	
	


	allow unconfined_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(unconfined_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(unconfined_t,admin_passwd_exec_t,sysadm_passwd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(unconfined_t,admin_passwd_exec_t,sysadm_passwd_t) depth: 3
 	
	allow unconfined_t admin_passwd_exec_t:file { getattr read execute };
	allow unconfined_t sysadm_passwd_t:process transition;
	dontaudit unconfined_t sysadm_passwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(unconfined_t,admin_passwd_exec_t,sysadm_passwd_t) depth: 2
 	
	type_transition unconfined_t admin_passwd_exec_t:process sysadm_passwd_t;
 	 	 	 	
##### end domain_auto_trans(unconfined_t,admin_passwd_exec_t,sysadm_passwd_t) depth: 1
 	

	allow unconfined_t sysadm_passwd_t:fd use;
	allow sysadm_passwd_t unconfined_t:fd use;
	allow sysadm_passwd_t unconfined_t:fifo_file { getattr read write append ioctl lock };
	allow sysadm_passwd_t unconfined_t:process sigchld;

	 	 	 	
##### end usermanage_domtrans_admin_passwd(unconfined_t) depth: 0
 	
	
	


	
	
		
	


	
	
		
	


	
	
		
	


	
	
		
	



	


########################################
#
# Declarations
#
    
#kernel_domtrans_to(usbd_t, usbd_exec_t)
 	 	 	 	
##### begin init_daemon_domain(usbd_t,usbd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(usbd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(usbd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute usbd_t domain;

	# allow the domain to read its /proc/pid entries
	allow usbd_t self:dir { read getattr lock search ioctl };
	allow usbd_t self:lnk_file { read getattr lock ioctl };
	allow usbd_t self:file { getattr read write append ioctl lock };

	# allow usbd_t to create child processes in this domain
	allow usbd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types usbd_t;
		role sysadm_r types usbd_t;
		role user_r types usbd_t;
		role staff_r types usbd_t;
	

	 	 	 	
##### end domain_base_type(usbd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(usbd_t) depth: 3
 	
	
	


	allow usbd_t device_t:dir { read getattr lock search ioctl };
	allow usbd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(usbd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(usbd_t) depth: 3
 	
	
	


	allow usbd_t device_t:dir { read getattr lock search ioctl };
	allow usbd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(usbd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(usbd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(usbd_t) depth: 4
 	
	
	


	allow usbd_t device_t:dir { read getattr lock search ioctl };
	allow usbd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(usbd_t) depth: 3
 	
	allow usbd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(usbd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(usbd_t) depth: 3
 	
	
	


	allow usbd_t root_t:dir { read getattr lock search ioctl };
	allow usbd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(usbd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(usbd_t) depth: 3
 	
	
	


	allow usbd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(usbd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(usbd_t) depth: 3
 	
	
	


	allow usbd_t init_t:process signull;

	 	 	 	
##### end init_signull(usbd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(usbd_t) depth: 3
 	
	
	


	allow usbd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(usbd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(usbd_t) depth: 3
 	
	
	


	allow usbd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(usbd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(usbd_t) depth: 3
 	
	
	


	dontaudit usbd_t security_t:dir search;
	dontaudit usbd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(usbd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(usbd_t) depth: 3
 	
	
	


	dontaudit usbd_t selinux_config_t:dir search;
	dontaudit usbd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(usbd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(usbd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(usbd_t,usbd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(usbd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(usbd_exec_t) depth: 4
 	
	
	


	allow usbd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usbd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(usbd_exec_t) depth: 4
 	
	
	


	allow usbd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(usbd_exec_t) depth: 3
 	
	typeattribute usbd_exec_t file_type;

	 	 	 	
##### end files_type(usbd_exec_t) depth: 2
 	

	allow usbd_t usbd_exec_t:file entrypoint;
	allow usbd_t usbd_exec_t:file { read getattr lock execute ioctl };

	typeattribute usbd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(usbd_t,usbd_exec_t) depth: 1
 	

	role system_r types usbd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
			bool usbd_disable_trans false;
			
		
		if(usbd_disable_trans ) {
			
	
	


	allow initrc_t usbd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init usbd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,usbd_exec_t,usbd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,usbd_exec_t,usbd_t) depth: 3
 	
	allow initrc_t usbd_exec_t:file { getattr read execute };
	allow initrc_t usbd_t:process transition;
	dontaudit initrc_t usbd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,usbd_exec_t,usbd_t) depth: 2
 	
	type_transition initrc_t usbd_exec_t:process usbd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,usbd_exec_t,usbd_t) depth: 1
 	
			allow initrc_t usbd_t:fd use;
			allow usbd_t initrc_t:fd use;
			allow usbd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow usbd_t initrc_t:process sigchld;
			allow initrc_t usbd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow usbd_t usbd_exec_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(usbd_t,usbd_exec_t) depth: 0
 	


 	 	 	 	
##### begin files_config_file(usbd_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(usbd_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(usbd_etc_t) depth: 3
 	
	
	


	allow usbd_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usbd_etc_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(usbd_etc_t) depth: 3
 	
	
	


	allow usbd_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(usbd_etc_t) depth: 2
 	
	typeattribute usbd_etc_t file_type;

	 	 	 	
##### end files_type(usbd_etc_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute usbd_etc_t usercanread;

	 	 	 	
##### end files_config_file(usbd_etc_t) depth: 0
 	
 	 	 	 	
##### begin init_daemon_domain(usbd_t,usbd_etc_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(usbd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(usbd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute usbd_t domain;

	# allow the domain to read its /proc/pid entries
	allow usbd_t self:dir { read getattr lock search ioctl };
	allow usbd_t self:lnk_file { read getattr lock ioctl };
	allow usbd_t self:file { getattr read write append ioctl lock };

	# allow usbd_t to create child processes in this domain
	allow usbd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types usbd_t;
		role sysadm_r types usbd_t;
		role user_r types usbd_t;
		role staff_r types usbd_t;
	

	 	 	 	
##### end domain_base_type(usbd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(usbd_t) depth: 3
 	
	
	


	allow usbd_t device_t:dir { read getattr lock search ioctl };
	allow usbd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(usbd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(usbd_t) depth: 3
 	
	
	


	allow usbd_t device_t:dir { read getattr lock search ioctl };
	allow usbd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(usbd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(usbd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(usbd_t) depth: 4
 	
	
	


	allow usbd_t device_t:dir { read getattr lock search ioctl };
	allow usbd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(usbd_t) depth: 3
 	
	allow usbd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(usbd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(usbd_t) depth: 3
 	
	
	


	allow usbd_t root_t:dir { read getattr lock search ioctl };
	allow usbd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(usbd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(usbd_t) depth: 3
 	
	
	


	allow usbd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(usbd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(usbd_t) depth: 3
 	
	
	


	allow usbd_t init_t:process signull;

	 	 	 	
##### end init_signull(usbd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(usbd_t) depth: 3
 	
	
	


	allow usbd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(usbd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(usbd_t) depth: 3
 	
	
	


	allow usbd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(usbd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(usbd_t) depth: 3
 	
	
	


	dontaudit usbd_t security_t:dir search;
	dontaudit usbd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(usbd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(usbd_t) depth: 3
 	
	
	


	dontaudit usbd_t selinux_config_t:dir search;
	dontaudit usbd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(usbd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(usbd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(usbd_t,usbd_etc_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(usbd_etc_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(usbd_etc_t) depth: 4
 	
	
	


	allow usbd_etc_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(usbd_etc_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(usbd_etc_t) depth: 4
 	
	
	


	allow usbd_etc_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(usbd_etc_t) depth: 3
 	
	typeattribute usbd_etc_t file_type;

	 	 	 	
##### end files_type(usbd_etc_t) depth: 2
 	

	allow usbd_t usbd_etc_t:file entrypoint;
	allow usbd_t usbd_etc_t:file { read getattr lock execute ioctl };

	typeattribute usbd_etc_t entry_type;

	 	 	 	
##### end domain_entry_file(usbd_t,usbd_etc_t) depth: 1
 	

	role system_r types usbd_t;

	

	
		# this regex is a hack, since it assumes there is a
		# _t at the end of the domain type.  If there is no _t
		# at the end of the type, it returns empty!
		
		if(usbd_disable_trans ) {
			
	
	


	allow initrc_t usbd_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };

			
	
	


	allow direct_run_init usbd_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };

		} else {
			 	 	 	 	
##### begin domain_auto_trans(initrc_t,usbd_etc_t,usbd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,usbd_etc_t,usbd_t) depth: 3
 	
	allow initrc_t usbd_etc_t:file { getattr read execute };
	allow initrc_t usbd_t:process transition;
	dontaudit initrc_t usbd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,usbd_etc_t,usbd_t) depth: 2
 	
	type_transition initrc_t usbd_etc_t:process usbd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,usbd_etc_t,usbd_t) depth: 1
 	
			allow initrc_t usbd_t:fd use;
			allow usbd_t initrc_t:fd use;
			allow usbd_t initrc_t:fifo_file { getattr read write append ioctl lock };
			allow usbd_t initrc_t:process sigchld;
			allow initrc_t usbd_t:process { noatsecure siginh rlimitinh };

			# make sediff happy
			allow usbd_t usbd_etc_t:file { { read getattr lock execute ioctl } entrypoint };
		}
	

	
	
		
	


	 	 	 	
##### end init_daemon_domain(usbd_t,usbd_etc_t) depth: 0
 	

########################################
#
# Local policy
#   


allow usbd_t usbd_etc_t:file { read getattr lock ioctl };
allow usbd_t usbd_etc_t:dir { read getattr lock search ioctl };
allow usbd_t usbd_etc_t:lnk_file { read getattr lock ioctl };

	
	


	allow usbd_t usbd_etc_t:file { { read getattr lock execute ioctl } execute_no_trans };
  


	
	


	allow usbd_t usbd_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };





	



	


########################################
#
# Declarations
#

# admin users terminals (tty and pty)

# users home directory

# users home directory contents

# The privhome attribute identifies every domain that can create files under
# regular user home directories in the regular context (IE act on behalf of
# a user in writing regular files)

# all unprivileged users home directories

# all unprivileged users ptys

# all unprivileged users tmp files

# all unprivileged users ttys

# all user domains

# unprivileged user domains


########################################
#
# Local policy
#




	# Define some type aliases to help with compatibility with
	# macros and domains from the "strict" policy.
	 	 	 	 	
##### begin unconfined_alias_domain(secadm_t) depth: 1
 	
	
		
	


		typealias unconfined_t alias secadm_t;
	

	 	 	 	
##### end unconfined_alias_domain(secadm_t) depth: 0
 	
	 	 	 	 	
##### begin unconfined_alias_domain(sysadm_t) depth: 1
 	
	
		
	


		typealias unconfined_t alias sysadm_t;
	

	 	 	 	
##### end unconfined_alias_domain(sysadm_t) depth: 0
 	

	# User home directory type.
	type user_home_t alias { staff_home_t sysadm_home_t }, home_type, user_home_type;
	 	 	 	 	
##### begin files_type(user_home_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(user_home_t) depth: 2
 	
	
	


	allow user_home_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(user_home_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(user_home_t) depth: 2
 	
	
	


	allow user_home_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(user_home_t) depth: 1
 	
	typeattribute user_home_t file_type;

	 	 	 	
##### end files_type(user_home_t) depth: 0
 	
	 	 	 	 	
##### begin files_associate_tmp(user_home_t) depth: 1
 	
	
	


	allow user_home_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(user_home_t) depth: 0
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(user_home_t) depth: 1
 	
	
	


	allow user_home_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(user_home_t) depth: 0
 	

	type user_home_dir_t alias { staff_home_dir_t sysadm_home_dir_t }, home_dir_type, home_type, user_home_dir_type;
	 	 	 	 	
##### begin files_type(user_home_dir_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(user_home_dir_t) depth: 2
 	
	
	


	allow user_home_dir_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(user_home_dir_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(user_home_dir_t) depth: 2
 	
	
	


	allow user_home_dir_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(user_home_dir_t) depth: 1
 	
	typeattribute user_home_dir_t file_type;

	 	 	 	
##### end files_type(user_home_dir_t) depth: 0
 	
	 	 	 	 	
##### begin files_associate_tmp(user_home_dir_t) depth: 1
 	
	
	


	allow user_home_dir_t tmp_t:filesystem associate;

	 	 	 	
##### end files_associate_tmp(user_home_dir_t) depth: 0
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(user_home_dir_t) depth: 1
 	
	
	


	allow user_home_dir_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(user_home_dir_t) depth: 0
 	

	# compatibility for switching from strict
#	dominance { role secadm_r { role system_r; }}
#	dominance { role sysadm_r { role system_r; }}
#	dominance { role user_r { role system_r; }}
#	dominance { role staff_r { role system_r; }}

	# dont need to use the full role_change()
	allow sysadm_r system_r;
	allow sysadm_r user_r;
	allow user_r system_r;
	allow user_r sysadm_r;
	allow system_r sysadm_r;
	allow system_r sysadm_r;

	allow privhome user_home_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };
	allow privhome user_home_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow privhome user_home_t:lnk_file { create read getattr setattr link unlink rename };
	allow privhome user_home_t:fifo_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow privhome user_home_t:sock_file { create ioctl read getattr lock write setattr append link unlink rename };
	allow privhome user_home_dir_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition privhome user_home_dir_t:{ dir file lnk_file fifo_file sock_file } user_home_t;
	 	 	 	 	
##### begin files_search_home(privhome) depth: 1
 	
	
	


	allow privhome home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(privhome) depth: 0
 	

	

	
	
		
	




	


########################################
#
# Declarations
#

 	 	 	 	
##### begin files_type(userhelper_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(userhelper_conf_t) depth: 2
 	
	
	


	allow userhelper_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(userhelper_conf_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(userhelper_conf_t) depth: 2
 	
	
	


	allow userhelper_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(userhelper_conf_t) depth: 1
 	
	typeattribute userhelper_conf_t file_type;

	 	 	 	
##### end files_type(userhelper_conf_t) depth: 0
 	

 	 	 	 	
##### begin files_type(userhelper_conf_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(userhelper_conf_t) depth: 2
 	
	
	


	allow userhelper_conf_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(userhelper_conf_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(userhelper_conf_t) depth: 2
 	
	
	


	allow userhelper_conf_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(userhelper_conf_t) depth: 1
 	
	typeattribute userhelper_conf_t file_type;

	 	 	 	
##### end files_type(userhelper_conf_t) depth: 0
 	


	


########################################
#
# Declarations
#

 	 	 	 	
##### begin files_type(admin_passwd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin fs_associate(admin_passwd_exec_t) depth: 2
 	
	
	


	allow admin_passwd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(admin_passwd_exec_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_noxattr(admin_passwd_exec_t) depth: 2
 	
	
	


	allow admin_passwd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(admin_passwd_exec_t) depth: 1
 	
	typeattribute admin_passwd_exec_t file_type;

	 	 	 	
##### end files_type(admin_passwd_exec_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(chfn_t) depth: 1
 	
	
	


	typeattribute chfn_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(chfn_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(chfn_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(chfn_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute chfn_t domain;

	# allow the domain to read its /proc/pid entries
	allow chfn_t self:dir { read getattr lock search ioctl };
	allow chfn_t self:lnk_file { read getattr lock ioctl };
	allow chfn_t self:file { getattr read write append ioctl lock };

	# allow chfn_t to create child processes in this domain
	allow chfn_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types chfn_t;
		role sysadm_r types chfn_t;
		role user_r types chfn_t;
		role staff_r types chfn_t;
	

	 	 	 	
##### end domain_base_type(chfn_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(chfn_t) depth: 2
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(chfn_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(chfn_t) depth: 2
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(chfn_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(chfn_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(chfn_t) depth: 2
 	
	allow chfn_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(chfn_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(chfn_t) depth: 2
 	
	
	


	allow chfn_t root_t:dir { read getattr lock search ioctl };
	allow chfn_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(chfn_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(chfn_t) depth: 2
 	
	
	


	allow chfn_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(chfn_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(chfn_t) depth: 2
 	
	
	


	allow chfn_t init_t:process signull;

	 	 	 	
##### end init_signull(chfn_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(chfn_t) depth: 2
 	
	
	


	allow chfn_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(chfn_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(chfn_t) depth: 2
 	
	
	


	allow chfn_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(chfn_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(chfn_t) depth: 2
 	
	
	


	dontaudit chfn_t security_t:dir search;
	dontaudit chfn_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(chfn_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(chfn_t) depth: 2
 	
	
	


	dontaudit chfn_t selinux_config_t:dir search;
	dontaudit chfn_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(chfn_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(chfn_t) depth: 0
 	
role system_r types chfn_t;

 	 	 	 	
##### begin domain_entry_file(chfn_t,chfn_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(chfn_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(chfn_exec_t) depth: 3
 	
	
	


	allow chfn_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(chfn_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(chfn_exec_t) depth: 3
 	
	
	


	allow chfn_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(chfn_exec_t) depth: 2
 	
	typeattribute chfn_exec_t file_type;

	 	 	 	
##### end files_type(chfn_exec_t) depth: 1
 	

	allow chfn_t chfn_exec_t:file entrypoint;
	allow chfn_t chfn_exec_t:file { read getattr lock execute ioctl };

	typeattribute chfn_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(chfn_t,chfn_exec_t) depth: 0
 	

 	 	 	 	
##### begin domain_type(crack_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(crack_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute crack_t domain;

	# allow the domain to read its /proc/pid entries
	allow crack_t self:dir { read getattr lock search ioctl };
	allow crack_t self:lnk_file { read getattr lock ioctl };
	allow crack_t self:file { getattr read write append ioctl lock };

	# allow crack_t to create child processes in this domain
	allow crack_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types crack_t;
		role sysadm_r types crack_t;
		role user_r types crack_t;
		role staff_r types crack_t;
	

	 	 	 	
##### end domain_base_type(crack_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(crack_t) depth: 2
 	
	
	


	allow crack_t device_t:dir { read getattr lock search ioctl };
	allow crack_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(crack_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(crack_t) depth: 2
 	
	
	


	allow crack_t device_t:dir { read getattr lock search ioctl };
	allow crack_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(crack_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(crack_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(crack_t) depth: 3
 	
	
	


	allow crack_t device_t:dir { read getattr lock search ioctl };
	allow crack_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(crack_t) depth: 2
 	
	allow crack_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(crack_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(crack_t) depth: 2
 	
	
	


	allow crack_t root_t:dir { read getattr lock search ioctl };
	allow crack_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(crack_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(crack_t) depth: 2
 	
	
	


	allow crack_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(crack_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(crack_t) depth: 2
 	
	
	


	allow crack_t init_t:process signull;

	 	 	 	
##### end init_signull(crack_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(crack_t) depth: 2
 	
	
	


	allow crack_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(crack_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(crack_t) depth: 2
 	
	
	


	allow crack_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(crack_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(crack_t) depth: 2
 	
	
	


	dontaudit crack_t security_t:dir search;
	dontaudit crack_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(crack_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(crack_t) depth: 2
 	
	
	


	dontaudit crack_t selinux_config_t:dir search;
	dontaudit crack_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(crack_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(crack_t) depth: 0
 	
role system_r types crack_t;

 	 	 	 	
##### begin domain_entry_file(crack_t,crack_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(crack_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(crack_exec_t) depth: 3
 	
	
	


	allow crack_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crack_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crack_exec_t) depth: 3
 	
	
	


	allow crack_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crack_exec_t) depth: 2
 	
	typeattribute crack_exec_t file_type;

	 	 	 	
##### end files_type(crack_exec_t) depth: 1
 	

	allow crack_t crack_exec_t:file entrypoint;
	allow crack_t crack_exec_t:file { read getattr lock execute ioctl };

	typeattribute crack_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(crack_t,crack_exec_t) depth: 0
 	

 	 	 	 	
##### begin files_config_file(crack_db_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(crack_db_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(crack_db_t) depth: 3
 	
	
	


	allow crack_db_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crack_db_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crack_db_t) depth: 3
 	
	
	


	allow crack_db_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crack_db_t) depth: 2
 	
	typeattribute crack_db_t file_type;

	 	 	 	
##### end files_type(crack_db_t) depth: 1
 	

	# this is a hack and should be removed.
	typeattribute crack_db_t usercanread;

	 	 	 	
##### end files_config_file(crack_db_t) depth: 0
 	

 	 	 	 	
##### begin files_tmp_file(crack_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(crack_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(crack_tmp_t) depth: 3
 	
	
	


	allow crack_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crack_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crack_tmp_t) depth: 3
 	
	
	


	allow crack_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crack_tmp_t) depth: 2
 	
	typeattribute crack_tmp_t file_type;

	 	 	 	
##### end files_type(crack_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(crack_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(crack_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(crack_tmp_t) depth: 4
 	
	
	


	allow crack_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(crack_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(crack_tmp_t) depth: 4
 	
	
	


	allow crack_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(crack_tmp_t) depth: 3
 	
	typeattribute crack_tmp_t file_type;

	 	 	 	
##### end files_type(crack_tmp_t) depth: 2
 	
	typeattribute crack_tmp_t polymember;

	 	 	 	
##### end files_poly_member(crack_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(crack_tmp_t) depth: 2
 	
	
	


	allow crack_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(crack_tmp_t) depth: 1
 	
	typeattribute crack_tmp_t tmpfile;
	allow crack_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(crack_tmp_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(groupadd_t) depth: 1
 	
	
	


	typeattribute groupadd_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin init_system_domain(groupadd_t,groupadd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(groupadd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(groupadd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute groupadd_t domain;

	# allow the domain to read its /proc/pid entries
	allow groupadd_t self:dir { read getattr lock search ioctl };
	allow groupadd_t self:lnk_file { read getattr lock ioctl };
	allow groupadd_t self:file { getattr read write append ioctl lock };

	# allow groupadd_t to create child processes in this domain
	allow groupadd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types groupadd_t;
		role sysadm_r types groupadd_t;
		role user_r types groupadd_t;
		role staff_r types groupadd_t;
	

	 	 	 	
##### end domain_base_type(groupadd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t device_t:dir { read getattr lock search ioctl };
	allow groupadd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t device_t:dir { read getattr lock search ioctl };
	allow groupadd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(groupadd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t device_t:dir { read getattr lock search ioctl };
	allow groupadd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(groupadd_t) depth: 3
 	
	allow groupadd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(groupadd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t root_t:dir { read getattr lock search ioctl };
	allow groupadd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(groupadd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t init_t:process signull;

	 	 	 	
##### end init_signull(groupadd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(groupadd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(groupadd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(groupadd_t) depth: 3
 	
	
	


	dontaudit groupadd_t security_t:dir search;
	dontaudit groupadd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(groupadd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(groupadd_t) depth: 3
 	
	
	


	dontaudit groupadd_t selinux_config_t:dir search;
	dontaudit groupadd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(groupadd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(groupadd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(groupadd_t,groupadd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(groupadd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(groupadd_exec_t) depth: 4
 	
	
	


	allow groupadd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(groupadd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(groupadd_exec_t) depth: 4
 	
	
	


	allow groupadd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(groupadd_exec_t) depth: 3
 	
	typeattribute groupadd_exec_t file_type;

	 	 	 	
##### end files_type(groupadd_exec_t) depth: 2
 	

	allow groupadd_t groupadd_exec_t:file entrypoint;
	allow groupadd_t groupadd_exec_t:file { read getattr lock execute ioctl };

	typeattribute groupadd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(groupadd_t,groupadd_exec_t) depth: 1
 	

	role system_r types groupadd_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,groupadd_exec_t,groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,groupadd_exec_t,groupadd_t) depth: 3
 	
	allow initrc_t groupadd_exec_t:file { getattr read execute };
	allow initrc_t groupadd_t:process transition;
	dontaudit initrc_t groupadd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,groupadd_exec_t,groupadd_t) depth: 2
 	
	type_transition initrc_t groupadd_exec_t:process groupadd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,groupadd_exec_t,groupadd_t) depth: 1
 	

	allow initrc_t groupadd_t:fd use;
	allow groupadd_t initrc_t:fd use;
	allow groupadd_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow groupadd_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(groupadd_t,groupadd_exec_t) depth: 0
 	
role system_r types groupadd_t;

 	 	 	 	
##### begin domain_obj_id_change_exemption(passwd_t) depth: 1
 	
	
	


	typeattribute passwd_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(passwd_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(passwd_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(passwd_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute passwd_t domain;

	# allow the domain to read its /proc/pid entries
	allow passwd_t self:dir { read getattr lock search ioctl };
	allow passwd_t self:lnk_file { read getattr lock ioctl };
	allow passwd_t self:file { getattr read write append ioctl lock };

	# allow passwd_t to create child processes in this domain
	allow passwd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types passwd_t;
		role sysadm_r types passwd_t;
		role user_r types passwd_t;
		role staff_r types passwd_t;
	

	 	 	 	
##### end domain_base_type(passwd_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(passwd_t) depth: 2
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(passwd_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(passwd_t) depth: 2
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(passwd_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(passwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(passwd_t) depth: 3
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(passwd_t) depth: 2
 	
	allow passwd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(passwd_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(passwd_t) depth: 2
 	
	
	


	allow passwd_t root_t:dir { read getattr lock search ioctl };
	allow passwd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(passwd_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(passwd_t) depth: 2
 	
	
	


	allow passwd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(passwd_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(passwd_t) depth: 2
 	
	
	


	allow passwd_t init_t:process signull;

	 	 	 	
##### end init_signull(passwd_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(passwd_t) depth: 2
 	
	
	


	allow passwd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(passwd_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(passwd_t) depth: 2
 	
	
	


	allow passwd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(passwd_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(passwd_t) depth: 2
 	
	
	


	dontaudit passwd_t security_t:dir search;
	dontaudit passwd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(passwd_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(passwd_t) depth: 2
 	
	
	


	dontaudit passwd_t selinux_config_t:dir search;
	dontaudit passwd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(passwd_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(passwd_t) depth: 0
 	
role system_r types passwd_t;

 	 	 	 	
##### begin domain_entry_file(passwd_t,passwd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(passwd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(passwd_exec_t) depth: 3
 	
	
	


	allow passwd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(passwd_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(passwd_exec_t) depth: 3
 	
	
	


	allow passwd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(passwd_exec_t) depth: 2
 	
	typeattribute passwd_exec_t file_type;

	 	 	 	
##### end files_type(passwd_exec_t) depth: 1
 	

	allow passwd_t passwd_exec_t:file entrypoint;
	allow passwd_t passwd_exec_t:file { read getattr lock execute ioctl };

	typeattribute passwd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(passwd_t,passwd_exec_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(sysadm_passwd_t) depth: 1
 	
	
	


	typeattribute sysadm_passwd_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin domain_type(sysadm_passwd_t) depth: 1
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(sysadm_passwd_t) depth: 2
 	
	
	


	# mark as a domain
	typeattribute sysadm_passwd_t domain;

	# allow the domain to read its /proc/pid entries
	allow sysadm_passwd_t self:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t self:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t self:file { getattr read write append ioctl lock };

	# allow sysadm_passwd_t to create child processes in this domain
	allow sysadm_passwd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types sysadm_passwd_t;
		role sysadm_r types sysadm_passwd_t;
		role user_r types sysadm_passwd_t;
		role staff_r types sysadm_passwd_t;
	

	 	 	 	
##### end domain_base_type(sysadm_passwd_t) depth: 1
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(sysadm_passwd_t) depth: 1
 	
	 	 	 	 	
##### begin dev_rw_zero(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(sysadm_passwd_t) depth: 1
 	
	 	 	 	 	
##### begin term_use_controlling_term(sysadm_passwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sysadm_passwd_t) depth: 3
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sysadm_passwd_t) depth: 2
 	
	allow sysadm_passwd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(sysadm_passwd_t) depth: 1
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t root_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(sysadm_passwd_t) depth: 1
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(sysadm_passwd_t) depth: 1
 	
	 	 	 	 	
##### begin init_signull(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t init_t:process signull;

	 	 	 	
##### end init_signull(sysadm_passwd_t) depth: 1
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(sysadm_passwd_t) depth: 1
 	
		 	 	 	 	
##### begin unconfined_sigchld(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(sysadm_passwd_t) depth: 1
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(sysadm_passwd_t) depth: 2
 	
	
	


	dontaudit sysadm_passwd_t security_t:dir search;
	dontaudit sysadm_passwd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(sysadm_passwd_t) depth: 1
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(sysadm_passwd_t) depth: 2
 	
	
	


	dontaudit sysadm_passwd_t selinux_config_t:dir search;
	dontaudit sysadm_passwd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	
##### end domain_type(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin domain_entry_file(sysadm_passwd_t,admin_passwd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(admin_passwd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(admin_passwd_exec_t) depth: 3
 	
	
	


	allow admin_passwd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(admin_passwd_exec_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(admin_passwd_exec_t) depth: 3
 	
	
	


	allow admin_passwd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(admin_passwd_exec_t) depth: 2
 	
	typeattribute admin_passwd_exec_t file_type;

	 	 	 	
##### end files_type(admin_passwd_exec_t) depth: 1
 	

	allow sysadm_passwd_t admin_passwd_exec_t:file entrypoint;
	allow sysadm_passwd_t admin_passwd_exec_t:file { read getattr lock execute ioctl };

	typeattribute admin_passwd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(sysadm_passwd_t,admin_passwd_exec_t) depth: 0
 	
role system_r types sysadm_passwd_t;

 	 	 	 	
##### begin files_tmp_file(sysadm_passwd_tmp_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_type(sysadm_passwd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin fs_associate(sysadm_passwd_tmp_t) depth: 3
 	
	
	


	allow sysadm_passwd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sysadm_passwd_tmp_t) depth: 2
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sysadm_passwd_tmp_t) depth: 3
 	
	
	


	allow sysadm_passwd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sysadm_passwd_tmp_t) depth: 2
 	
	typeattribute sysadm_passwd_tmp_t file_type;

	 	 	 	
##### end files_type(sysadm_passwd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin files_poly_member(sysadm_passwd_tmp_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(sysadm_passwd_tmp_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(sysadm_passwd_tmp_t) depth: 4
 	
	
	


	allow sysadm_passwd_tmp_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(sysadm_passwd_tmp_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(sysadm_passwd_tmp_t) depth: 4
 	
	
	


	allow sysadm_passwd_tmp_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(sysadm_passwd_tmp_t) depth: 3
 	
	typeattribute sysadm_passwd_tmp_t file_type;

	 	 	 	
##### end files_type(sysadm_passwd_tmp_t) depth: 2
 	
	typeattribute sysadm_passwd_tmp_t polymember;

	 	 	 	
##### end files_poly_member(sysadm_passwd_tmp_t) depth: 1
 	
	 	 	 	 	
##### begin fs_associate_tmpfs(sysadm_passwd_tmp_t) depth: 2
 	
	
	


	allow sysadm_passwd_tmp_t tmpfs_t:filesystem associate;

	 	 	 	
##### end fs_associate_tmpfs(sysadm_passwd_tmp_t) depth: 1
 	
	typeattribute sysadm_passwd_tmp_t tmpfile;
	allow sysadm_passwd_tmp_t tmp_t:filesystem associate;

	 	 	 	
##### end files_tmp_file(sysadm_passwd_tmp_t) depth: 0
 	

 	 	 	 	
##### begin domain_obj_id_change_exemption(useradd_t) depth: 1
 	
	
	


	typeattribute useradd_t can_change_object_identity;

	 	 	 	
##### end domain_obj_id_change_exemption(useradd_t) depth: 0
 	
 	 	 	 	
##### begin init_system_domain(useradd_t,useradd_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_type(useradd_t) depth: 2
 	
	# start with basic domain
	 	 	 	 	
##### begin domain_base_type(useradd_t) depth: 3
 	
	
	


	# mark as a domain
	typeattribute useradd_t domain;

	# allow the domain to read its /proc/pid entries
	allow useradd_t self:dir { read getattr lock search ioctl };
	allow useradd_t self:lnk_file { read getattr lock ioctl };
	allow useradd_t self:file { getattr read write append ioctl lock };

	# allow useradd_t to create child processes in this domain
	allow useradd_t self:process { fork sigchld };

	
		# FIXME:
		# hack until role dominance is fixed in
		# the module compiler
		role secadm_r types useradd_t;
		role sysadm_r types useradd_t;
		role user_r types useradd_t;
		role staff_r types useradd_t;
	

	 	 	 	
##### end domain_base_type(useradd_t) depth: 2
 	

	# Use trusted objects in /dev
	 	 	 	 	
##### begin dev_rw_null(useradd_t) depth: 3
 	
	
	


	allow useradd_t device_t:dir { read getattr lock search ioctl };
	allow useradd_t null_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_null(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin dev_rw_zero(useradd_t) depth: 3
 	
	
	


	allow useradd_t device_t:dir { read getattr lock search ioctl };
	allow useradd_t zero_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end dev_rw_zero(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin term_use_controlling_term(useradd_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t device_t:dir { read getattr lock search ioctl };
	allow useradd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(useradd_t) depth: 3
 	
	allow useradd_t devtty_t:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_controlling_term(useradd_t) depth: 2
 	

	# read the root directory
	 	 	 	 	
##### begin files_list_root(useradd_t) depth: 3
 	
	
	


	allow useradd_t root_t:dir { read getattr lock search ioctl };
	allow useradd_t root_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_list_root(useradd_t) depth: 2
 	

	# send init a sigchld and signull
	 	 	 	 	
##### begin init_sigchld(useradd_t) depth: 3
 	
	
	


	allow useradd_t init_t:process sigchld;

	 	 	 	
##### end init_sigchld(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin init_signull(useradd_t) depth: 3
 	
	
	


	allow useradd_t init_t:process signull;

	 	 	 	
##### end init_signull(useradd_t) depth: 2
 	

	
		 	 	 	 	
##### begin unconfined_use_fds(useradd_t) depth: 3
 	
	
	


	allow useradd_t unconfined_t:fd use;

	 	 	 	
##### end unconfined_use_fds(useradd_t) depth: 2
 	
		 	 	 	 	
##### begin unconfined_sigchld(useradd_t) depth: 3
 	
	
	


	allow useradd_t unconfined_t:process sigchld;

	 	 	 	
##### end unconfined_sigchld(useradd_t) depth: 2
 	
	

	# allow any domain to connect to the LDAP server
	
	
		
	


	# these 3 seem highly questionable:
	
	
		
	


	
	
		
		 	 	 	 	
##### begin selinux_dontaudit_read_fs(useradd_t) depth: 3
 	
	
	


	dontaudit useradd_t security_t:dir search;
	dontaudit useradd_t security_t:file { getattr read };

	 	 	 	
##### end selinux_dontaudit_read_fs(useradd_t) depth: 2
 	
	
	


	
	
		
		 	 	 	 	
##### begin seutil_dontaudit_read_config(useradd_t) depth: 3
 	
	
	


	dontaudit useradd_t selinux_config_t:dir search;
	dontaudit useradd_t selinux_config_t:file { getattr read };

	 	 	 	
##### end seutil_dontaudit_read_config(useradd_t) depth: 2
 	
	
	


	 	 	 	
##### end domain_type(useradd_t) depth: 1
 	
	 	 	 	 	
##### begin domain_entry_file(useradd_t,useradd_exec_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_type(useradd_exec_t) depth: 3
 	
	
	


	 	 	 	 	
##### begin fs_associate(useradd_exec_t) depth: 4
 	
	
	


	allow useradd_exec_t fs_t:filesystem associate;

	 	 	 	
##### end fs_associate(useradd_exec_t) depth: 3
 	
	 	 	 	 	
##### begin fs_associate_noxattr(useradd_exec_t) depth: 4
 	
	
	


	allow useradd_exec_t noxattrfs:filesystem associate;

	 	 	 	
##### end fs_associate_noxattr(useradd_exec_t) depth: 3
 	
	typeattribute useradd_exec_t file_type;

	 	 	 	
##### end files_type(useradd_exec_t) depth: 2
 	

	allow useradd_t useradd_exec_t:file entrypoint;
	allow useradd_t useradd_exec_t:file { read getattr lock execute ioctl };

	typeattribute useradd_exec_t entry_type;

	 	 	 	
##### end domain_entry_file(useradd_t,useradd_exec_t) depth: 1
 	

	role system_r types useradd_t;

	 	 	 	 	
##### begin domain_auto_trans(initrc_t,useradd_exec_t,useradd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(initrc_t,useradd_exec_t,useradd_t) depth: 3
 	
	allow initrc_t useradd_exec_t:file { getattr read execute };
	allow initrc_t useradd_t:process transition;
	dontaudit initrc_t useradd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(initrc_t,useradd_exec_t,useradd_t) depth: 2
 	
	type_transition initrc_t useradd_exec_t:process useradd_t;
 	 	 	 	
##### end domain_auto_trans(initrc_t,useradd_exec_t,useradd_t) depth: 1
 	

	allow initrc_t useradd_t:fd use;
	allow useradd_t initrc_t:fd use;
	allow useradd_t initrc_t:fifo_file { getattr read write append ioctl lock };
	allow useradd_t initrc_t:process sigchld;

	 	 	 	
##### end init_system_domain(useradd_t,useradd_exec_t) depth: 0
 	
role system_r types useradd_t;

########################################
#
# Chfn local policy
#

allow chfn_t self:capability { chown dac_override fsetid setuid setgid sys_resource };
allow chfn_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execheap execstack };
allow chfn_t self:process { setrlimit setfscreate };
allow chfn_t self:fd use;
allow chfn_t self:fifo_file { getattr read write append ioctl lock };
allow chfn_t self:sock_file { read getattr lock ioctl };
allow chfn_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow chfn_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow chfn_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow chfn_t self:msg { send receive };
allow chfn_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow chfn_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow chfn_t self:unix_dgram_socket sendto;
allow chfn_t self:unix_stream_socket connectto;

 	 	 	 	
##### begin kernel_read_system_state(chfn_t) depth: 1
 	
	
	


	allow chfn_t proc_t:dir { read getattr lock search ioctl };
	allow chfn_t proc_t:lnk_file { getattr read };
	allow chfn_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(chfn_t) depth: 0
 	
 	 	 	 	
##### begin kernel_read_kernel_sysctls(chfn_t) depth: 1
 	
	
	


	allow chfn_t proc_t:dir search;
	allow chfn_t sysctl_t:dir { read getattr lock search ioctl };
	allow chfn_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow chfn_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(chfn_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(chfn_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(chfn_t) depth: 2
 	
	
	


	allow chfn_t proc_t:dir { read getattr lock search ioctl };
	allow chfn_t proc_t:lnk_file { getattr read };
	allow chfn_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(chfn_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(chfn_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(chfn_t) depth: 1
 	
	
	


	allow chfn_t security_t:dir { read search getattr };
	allow chfn_t security_t:file { getattr read write };
	allow chfn_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(chfn_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(chfn_t) depth: 1
 	
	
	


	allow chfn_t security_t:dir { read search getattr };
	allow chfn_t security_t:file { getattr read write };
	allow chfn_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(chfn_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(chfn_t) depth: 1
 	
	
	


	allow chfn_t security_t:dir { read search getattr };
	allow chfn_t security_t:file { getattr read write };
	allow chfn_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(chfn_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(chfn_t) depth: 1
 	
	
	


	allow chfn_t security_t:dir { read search getattr };
	allow chfn_t security_t:file { getattr read write };
	allow chfn_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(chfn_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(chfn_t) depth: 1
 	
	
	


	allow chfn_t security_t:dir { read search getattr };
	allow chfn_t security_t:file { getattr read write };
	allow chfn_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(chfn_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(chfn_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(chfn_t) depth: 2
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(chfn_t) depth: 1
 	
	allow chfn_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(chfn_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(chfn_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(chfn_t) depth: 2
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(chfn_t) depth: 1
 	
	allow chfn_t devpts_t:dir { read getattr lock search ioctl };
	allow chfn_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(chfn_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(chfn_t) depth: 1
 	
	
	


	allow chfn_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(chfn_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(chfn_t) depth: 1
 	
	
	


	allow chfn_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(chfn_t) depth: 0
 	

# for SSP
 	 	 	 	
##### begin dev_read_urand(chfn_t) depth: 1
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(chfn_t) depth: 0
 	

 	 	 	 	
##### begin auth_domtrans_chk_passwd(chfn_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin corecmd_search_sbin(chfn_t) depth: 2
 	
	
	


	allow chfn_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(chfn_t) depth: 1
 	
	 	 	 	 	
##### begin domain_auto_trans(chfn_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(chfn_t,chkpwd_exec_t,system_chkpwd_t) depth: 3
 	
	allow chfn_t chkpwd_exec_t:file { getattr read execute };
	allow chfn_t system_chkpwd_t:process transition;
	dontaudit chfn_t system_chkpwd_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(chfn_t,chkpwd_exec_t,system_chkpwd_t) depth: 2
 	
	type_transition chfn_t chkpwd_exec_t:process system_chkpwd_t;
 	 	 	 	
##### end domain_auto_trans(chfn_t,chkpwd_exec_t,system_chkpwd_t) depth: 1
 	

	allow chfn_t self:capability { audit_write audit_control };
	allow chfn_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

	allow chfn_t system_chkpwd_t:fd use;
	allow system_chkpwd_t chfn_t:fd use;
	allow system_chkpwd_t chfn_t:fifo_file { getattr read write append ioctl lock };
	allow system_chkpwd_t chfn_t:process sigchld;

	dontaudit chfn_t shadow_t:file { getattr read };

	 	 	 	 	
##### begin dev_read_rand(chfn_t) depth: 2
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t random_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_rand(chfn_t) depth: 1
 	
	 	 	 	 	
##### begin dev_read_urand(chfn_t) depth: 2
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(chfn_t) depth: 1
 	

	 	 	 	 	
##### begin miscfiles_read_certs(chfn_t) depth: 2
 	
	
	


	allow chfn_t cert_t:dir { read getattr lock search ioctl };
	allow chfn_t cert_t:file { read getattr lock ioctl };
	allow chfn_t cert_t:lnk_file { getattr read };

	 	 	 	
##### end miscfiles_read_certs(chfn_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(chfn_t) depth: 2
 	
	
	


	allow chfn_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow chfn_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(chfn_t) depth: 3
 	
	
	


	allow chfn_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(chfn_t) depth: 4
 	
	
	


	allow chfn_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(chfn_t) depth: 4
 	
	
	


	allow chfn_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(chfn_t) depth: 4
 	
	
	


	allow chfn_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow chfn_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(chfn_t) depth: 4
 	
	
	


	allow chfn_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(chfn_t) depth: 4
 	
	
	


	allow chfn_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(chfn_t) depth: 4
 	
	
	


	allow chfn_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(chfn_t) depth: 4
 	
	
	


	allow chfn_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(chfn_t) depth: 4
 	
	
	


	allow chfn_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(chfn_t) depth: 3
 	
	
	


	allow chfn_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(chfn_t) depth: 4
 	
	
	


	allow chfn_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(chfn_t) depth: 4
 	
	
	


	allow chfn_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(chfn_t) depth: 4
 	
	
	


	allow chfn_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(chfn_t) depth: 3
 	
	
	


	allow chfn_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(chfn_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(chfn_t) depth: 3
 	
	
	


	allow chfn_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(chfn_t) depth: 2
 	
	allow chfn_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(chfn_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(chfn_t) depth: 2
 	
	
	
		

	allow chfn_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(chfn_t) depth: 3
 	
	
	


	allow chfn_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(chfn_t) depth: 4
 	
	
	


	allow chfn_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow chfn_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(chfn_t) depth: 4
 	
	
	


	allow chfn_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(chfn_t) depth: 4
 	
	
	


	allow chfn_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(chfn_t) depth: 4
 	
	
	


	allow chfn_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(chfn_t) depth: 3
 	
	
	


	allow chfn_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(chfn_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(chfn_t) depth: 4
 	
	
	


	allow chfn_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(chfn_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(chfn_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(chfn_t) depth: 3
 	
	
	


	allow chfn_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(chfn_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(chfn_t) depth: 3
 	
	
	


	allow chfn_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(chfn_t) depth: 2
 	
	allow chfn_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(chfn_t) depth: 1
 	

	
	
		
	


	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_domtrans_chk_passwd(chfn_t) depth: 0
 	
 	 	 	 	
##### begin auth_dontaudit_read_shadow(chfn_t) depth: 1
 	
	
	


	dontaudit chfn_t shadow_t:file { getattr read };

	 	 	 	
##### end auth_dontaudit_read_shadow(chfn_t) depth: 0
 	

# can exec /sbin/unix_chkpwd
 	 	 	 	
##### begin corecmd_search_bin(chfn_t) depth: 1
 	
	
	


	allow chfn_t bin_t:dir search;

	 	 	 	
##### end corecmd_search_bin(chfn_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_search_sbin(chfn_t) depth: 1
 	
	
	


	allow chfn_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(chfn_t) depth: 0
 	
# allow checking if a shell is executable
 	 	 	 	
##### begin corecmd_check_exec_shell(chfn_t) depth: 1
 	
	
	


	allow chfn_t bin_t:dir { read getattr lock search ioctl };
	allow chfn_t bin_t:lnk_file { read getattr lock ioctl };
	allow chfn_t shell_exec_t:file execute;

	 	 	 	
##### end corecmd_check_exec_shell(chfn_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(chfn_t) depth: 1
 	
	
	


	allow chfn_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(chfn_t) depth: 0
 	

 	 	 	 	
##### begin files_manage_etc_files(chfn_t) depth: 1
 	
	
	


	allow chfn_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow chfn_t etc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow chfn_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_manage_etc_files(chfn_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(chfn_t) depth: 1
 	
	
	


	allow chfn_t etc_t:dir { read getattr lock search ioctl };
	allow chfn_t etc_runtime_t:file { read getattr lock ioctl };
	allow chfn_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(chfn_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_var(chfn_t) depth: 1
 	
	
	


	dontaudit chfn_t var_t:dir search;

	 	 	 	
##### end files_dontaudit_search_var(chfn_t) depth: 0
 	

# /usr/bin/passwd asks for w access to utmp, but it will operate
# correctly without it.  Do not audit write denials to utmp.
 	 	 	 	
##### begin init_dontaudit_rw_utmp(chfn_t) depth: 1
 	
	
	


	dontaudit chfn_t initrc_var_run_t:file { getattr read write append };

	 	 	 	
##### end init_dontaudit_rw_utmp(chfn_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(chfn_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(chfn_t) depth: 2
 	
	
	


	allow chfn_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(chfn_t) depth: 1
 	
	allow chfn_t lib_t:dir { read getattr lock search ioctl };
	allow chfn_t lib_t:lnk_file { read getattr lock ioctl };
	allow chfn_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow chfn_t ld_so_t:file { read getattr lock execute ioctl };
	allow chfn_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(chfn_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(chfn_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(chfn_t) depth: 2
 	
	
	


	allow chfn_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(chfn_t) depth: 1
 	
	allow chfn_t lib_t:dir { read getattr lock search ioctl };
	allow chfn_t lib_t:lnk_file { read getattr lock ioctl };
	allow chfn_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow chfn_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow chfn_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(chfn_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(chfn_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(chfn_t) depth: 2
 	
	
	


	allow chfn_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(chfn_t) depth: 1
 	
	# FIXME: chfn_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(chfn_t) depth: 2
 	
	
	


	allow chfn_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(chfn_t) depth: 1
 	
	allow chfn_t locale_t:dir { read getattr lock search ioctl };
	allow chfn_t locale_t:lnk_file { read getattr lock ioctl };
	allow chfn_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(chfn_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(chfn_t) depth: 3
 	
	
	


	allow chfn_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(chfn_t) depth: 2
 	
	allow chfn_t lib_t:dir { read getattr lock search ioctl };
	allow chfn_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(chfn_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(chfn_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(chfn_t) depth: 1
 	
	
	


	allow chfn_t devlog_t:lnk_file read;
	allow chfn_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow chfn_t syslogd_t:unix_dgram_socket sendto;
	allow chfn_t syslogd_t:unix_stream_socket connectto;
	allow chfn_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow chfn_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(chfn_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(chfn_t) depth: 3
 	
	
	


	allow chfn_t device_t:dir { read getattr lock search ioctl };
	allow chfn_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(chfn_t) depth: 2
 	
	allow chfn_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(chfn_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(chfn_t) depth: 0
 	

# uses unix_chkpwd for checking passwords
 	 	 	 	
##### begin seutil_dontaudit_search_config(chfn_t) depth: 1
 	
	
	


	dontaudit chfn_t selinux_config_t:dir search;

	 	 	 	
##### end seutil_dontaudit_search_config(chfn_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(chfn_t) depth: 1
 	
	
	


	allow chfn_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(chfn_t) depth: 0
 	
# user generally runs this from their home directory, so do not audit a search
# on user home dir
 	 	 	 	
##### begin userdom_dontaudit_search_all_users_home_content(chfn_t) depth: 1
 	
	
	


	dontaudit chfn_t { home_dir_type home_type }:dir { getattr search };

	 	 	 	
##### end userdom_dontaudit_search_all_users_home_content(chfn_t) depth: 0
 	


	
		
	



	
		
	


########################################
#
# Crack local policy
#

allow crack_t self:process { sigkill sigstop signull signal };
allow crack_t self:fifo_file { getattr read write append ioctl lock };

allow crack_t crack_db_t:dir { read getattr lock search ioctl add_name remove_name write };
allow crack_t crack_db_t:file { create ioctl read getattr lock write setattr append link unlink rename };
allow crack_t crack_db_t:lnk_file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_search_var(crack_t) depth: 1
 	
	
	


	allow crack_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(crack_t) depth: 0
 	

allow crack_t crack_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow crack_t crack_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(crack_t,crack_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow crack_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition crack_t tmp_t:{ file dir } crack_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(crack_t,crack_tmp_t,{ file dir }) depth: 0
 	

 	 	 	 	
##### begin kernel_read_system_state(crack_t) depth: 1
 	
	
	


	allow crack_t proc_t:dir { read getattr lock search ioctl };
	allow crack_t proc_t:lnk_file { getattr read };
	allow crack_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(crack_t) depth: 0
 	

# for SSP
 	 	 	 	
##### begin dev_read_urand(crack_t) depth: 1
 	
	
	


	allow crack_t device_t:dir { read getattr lock search ioctl };
	allow crack_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(crack_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(crack_t) depth: 1
 	
	
	


	allow crack_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(crack_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_files(crack_t) depth: 1
 	
	
	


	allow crack_t etc_t:dir { read getattr lock search ioctl };
	allow crack_t etc_t:file { read getattr lock ioctl };
	allow crack_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_read_etc_files(crack_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(crack_t) depth: 1
 	
	
	


	allow crack_t etc_t:dir { read getattr lock search ioctl };
	allow crack_t etc_runtime_t:file { read getattr lock ioctl };
	allow crack_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(crack_t) depth: 0
 	
# for dictionaries
 	 	 	 	
##### begin files_read_usr_files(crack_t) depth: 1
 	
	
	


	allow crack_t usr_t:dir { read getattr lock search ioctl };
	allow crack_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(crack_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_bin(crack_t) depth: 1
 	
	
	


	allow crack_t bin_t:dir { read getattr lock search ioctl };
	allow crack_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow crack_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(crack_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(crack_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(crack_t) depth: 2
 	
	
	


	allow crack_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(crack_t) depth: 1
 	
	allow crack_t lib_t:dir { read getattr lock search ioctl };
	allow crack_t lib_t:lnk_file { read getattr lock ioctl };
	allow crack_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow crack_t ld_so_t:file { read getattr lock execute ioctl };
	allow crack_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(crack_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(crack_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(crack_t) depth: 2
 	
	
	


	allow crack_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(crack_t) depth: 1
 	
	allow crack_t lib_t:dir { read getattr lock search ioctl };
	allow crack_t lib_t:lnk_file { read getattr lock ioctl };
	allow crack_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow crack_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow crack_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(crack_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(crack_t) depth: 1
 	
	
	


	allow crack_t devlog_t:lnk_file read;
	allow crack_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow crack_t syslogd_t:unix_dgram_socket sendto;
	allow crack_t syslogd_t:unix_stream_socket connectto;
	allow crack_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow crack_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(crack_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(crack_t) depth: 3
 	
	
	


	allow crack_t device_t:dir { read getattr lock search ioctl };
	allow crack_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(crack_t) depth: 2
 	
	allow crack_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(crack_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(crack_t) depth: 0
 	

 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(crack_t) depth: 1
 	
	
		
	


		dontaudit crack_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(crack_t) depth: 0
 	


	
		
	 	 	 	 	
##### begin cron_system_entry(crack_t,crack_exec_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin domain_auto_trans(system_crond_t,crack_exec_t,crack_t) depth: 2
 	
	 	 	 	 	
##### begin domain_trans(system_crond_t,crack_exec_t,crack_t) depth: 3
 	
	allow system_crond_t crack_exec_t:file { getattr read execute };
	allow system_crond_t crack_t:process transition;
	dontaudit system_crond_t crack_t:process { noatsecure siginh rlimitinh };
 	 	 	 	
##### end domain_trans(system_crond_t,crack_exec_t,crack_t) depth: 2
 	
	type_transition system_crond_t crack_exec_t:process crack_t;
 	 	 	 	
##### end domain_auto_trans(system_crond_t,crack_exec_t,crack_t) depth: 1
 	

	# cjp: perhaps these four rules from the old
	# domain_auto_trans are not needed?
	allow system_crond_t crack_t:fd use;
	allow crack_t system_crond_t:fd use;
	allow crack_t system_crond_t:fifo_file { getattr read write append ioctl lock };
	allow crack_t system_crond_t:process sigchld;

	allow crack_t crond_t:fifo_file { getattr read write append ioctl lock };
	allow crack_t crond_t:fd use;
	allow crack_t crond_t:process sigchld;

	 	 	 	
##### end cron_system_entry(crack_t,crack_exec_t) depth: 0
 	

	


########################################
#
# Groupadd local policy
#

allow groupadd_t self:capability { dac_override chown kill setuid sys_resource };
dontaudit groupadd_t self:capability fsetid;
allow groupadd_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execheap execstack };
allow groupadd_t self:process { setrlimit setfscreate };
allow groupadd_t self:fd use;
allow groupadd_t self:fifo_file { getattr read write append ioctl lock };
allow groupadd_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow groupadd_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow groupadd_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow groupadd_t self:msg { send receive };
allow groupadd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow groupadd_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow groupadd_t self:unix_dgram_socket sendto;
allow groupadd_t self:unix_stream_socket connectto;
allow groupadd_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

 	 	 	 	
##### begin fs_getattr_xattr_fs(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(groupadd_t) depth: 0
 	

# Allow access to context for shadow file
 	 	 	 	
##### begin selinux_get_fs_mount(groupadd_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t proc_t:dir { read getattr lock search ioctl };
	allow groupadd_t proc_t:lnk_file { getattr read };
	allow groupadd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(groupadd_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t security_t:dir { read search getattr };
	allow groupadd_t security_t:file { getattr read write };
	allow groupadd_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t security_t:dir { read search getattr };
	allow groupadd_t security_t:file { getattr read write };
	allow groupadd_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t security_t:dir { read search getattr };
	allow groupadd_t security_t:file { getattr read write };
	allow groupadd_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t security_t:dir { read search getattr };
	allow groupadd_t security_t:file { getattr read write };
	allow groupadd_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t security_t:dir { read search getattr };
	allow groupadd_t security_t:file { getattr read write };
	allow groupadd_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t device_t:dir { read getattr lock search ioctl };
	allow groupadd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(groupadd_t) depth: 1
 	
	allow groupadd_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t device_t:dir { read getattr lock search ioctl };
	allow groupadd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(groupadd_t) depth: 1
 	
	allow groupadd_t devpts_t:dir { read getattr lock search ioctl };
	allow groupadd_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin init_read_utmp(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t var_t:dir { getattr search };
	allow groupadd_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(groupadd_t) depth: 1
 	
	allow groupadd_t initrc_var_run_t:file { read getattr lock ioctl };

	 	 	 	
##### end init_read_utmp(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin init_dontaudit_write_utmp(groupadd_t) depth: 1
 	
	
	


	dontaudit groupadd_t initrc_var_run_t:file { write lock };

	 	 	 	
##### end init_dontaudit_write_utmp(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin files_manage_etc_files(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow groupadd_t etc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow groupadd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_manage_etc_files(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin files_relabel_etc_files(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t etc_t:dir { getattr search read lock ioctl };
	allow groupadd_t etc_t:file { relabelfrom relabelto };

	 	 	 	
##### end files_relabel_etc_files(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(groupadd_t) depth: 1
 	
	allow groupadd_t lib_t:dir { read getattr lock search ioctl };
	allow groupadd_t lib_t:lnk_file { read getattr lock ioctl };
	allow groupadd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow groupadd_t ld_so_t:file { read getattr lock execute ioctl };
	allow groupadd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(groupadd_t) depth: 1
 	
	allow groupadd_t lib_t:dir { read getattr lock search ioctl };
	allow groupadd_t lib_t:lnk_file { read getattr lock ioctl };
	allow groupadd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow groupadd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow groupadd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(groupadd_t) depth: 0
 	

# Execute /usr/bin/{passwd,chfn,chsh} and /usr/sbin/{useradd,vipw}.
 	 	 	 	
##### begin corecmd_exec_bin(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t bin_t:dir { read getattr lock search ioctl };
	allow groupadd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow groupadd_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t sbin_t:dir { read getattr lock search ioctl };
	allow groupadd_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow groupadd_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t devlog_t:lnk_file read;
	allow groupadd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow groupadd_t syslogd_t:unix_dgram_socket sendto;
	allow groupadd_t syslogd_t:unix_stream_socket connectto;
	allow groupadd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow groupadd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(groupadd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t device_t:dir { read getattr lock search ioctl };
	allow groupadd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(groupadd_t) depth: 2
 	
	allow groupadd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(groupadd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(groupadd_t) depth: 1
 	
	# FIXME: groupadd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(groupadd_t) depth: 1
 	
	allow groupadd_t locale_t:dir { read getattr lock search ioctl };
	allow groupadd_t locale_t:lnk_file { read getattr lock ioctl };
	allow groupadd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(groupadd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(groupadd_t) depth: 2
 	
	allow groupadd_t lib_t:dir { read getattr lock search ioctl };
	allow groupadd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(groupadd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin auth_manage_shadow(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t shadow_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_etc_filetrans(groupadd_t,shadow_t,file) depth: 2
 	
	
	


	allow groupadd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition groupadd_t etc_t:file shadow_t;

	 	 	 	
##### end files_etc_filetrans(groupadd_t,shadow_t,file) depth: 1
 	

	typeattribute groupadd_t can_read_shadow_passwords, can_write_shadow_passwords;

	 	 	 	
##### end auth_manage_shadow(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin auth_relabel_shadow(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(groupadd_t) depth: 1
 	
	allow groupadd_t shadow_t:file { relabelfrom relabelto };
	typeattribute groupadd_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_relabel_shadow(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_lastlog(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(groupadd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(groupadd_t) depth: 2
 	
	allow groupadd_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(groupadd_t) depth: 1
 	
	allow groupadd_t lastlog_t:file { getattr read write setattr };

	 	 	 	
##### end auth_rw_lastlog(groupadd_t) depth: 0
 	
 	 	 	 	
##### begin auth_use_nsswitch(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t var_auth_t:dir { read getattr lock search ioctl };
	allow groupadd_t var_auth_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_list_var_lib(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t var_t:dir { getattr search };
	allow groupadd_t var_lib_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_var_lib(groupadd_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow groupadd_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow groupadd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(groupadd_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(groupadd_t) depth: 2
 	
	allow groupadd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(groupadd_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(groupadd_t) depth: 2
 	
	
	
		

	allow groupadd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow groupadd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(groupadd_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(groupadd_t) depth: 4
 	
	
	


	allow groupadd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(groupadd_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(groupadd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(groupadd_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(groupadd_t) depth: 3
 	
	
	


	allow groupadd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(groupadd_t) depth: 2
 	
	allow groupadd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(groupadd_t) depth: 1
 	

	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_use_nsswitch(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(groupadd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(groupadd_t) depth: 2
 	
	
	


	allow groupadd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(groupadd_t) depth: 1
 	
	allow groupadd_t selinux_config_t:dir { read getattr lock search ioctl };
	allow groupadd_t selinux_config_t:file { read getattr lock ioctl };
	allow groupadd_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(groupadd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(groupadd_t) depth: 1
 	
	
	


	allow groupadd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(groupadd_t) depth: 0
 	
# for when /root is the cwd
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(groupadd_t) depth: 1
 	
	
		
	


		dontaudit groupadd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(groupadd_t) depth: 0
 	


	
		
	



	
		
	



	
		
	


########################################
#
# Passwd local policy
#

allow passwd_t self:capability { chown dac_override fsetid setuid setgid sys_resource audit_control audit_write };
allow passwd_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow passwd_t self:process { setrlimit setfscreate };
allow passwd_t self:fd use;
allow passwd_t self:fifo_file { getattr read write append ioctl lock };
allow passwd_t self:sock_file { read getattr lock ioctl };
allow passwd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow passwd_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow passwd_t self:unix_dgram_socket sendto;
allow passwd_t self:unix_stream_socket connectto;
allow passwd_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };
allow passwd_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow passwd_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow passwd_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow passwd_t self:msg { send receive };

allow passwd_t crack_db_t:dir { read getattr lock search ioctl };
allow passwd_t crack_db_t:file { read getattr lock ioctl };

 	 	 	 	
##### begin kernel_read_kernel_sysctls(passwd_t) depth: 1
 	
	
	


	allow passwd_t proc_t:dir search;
	allow passwd_t sysctl_t:dir { read getattr lock search ioctl };
	allow passwd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow passwd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(passwd_t) depth: 0
 	

# for SSP
 	 	 	 	
##### begin dev_read_urand(passwd_t) depth: 1
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(passwd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(passwd_t) depth: 1
 	
	
	


	allow passwd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(passwd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(passwd_t) depth: 1
 	
	
	


	allow passwd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(passwd_t) depth: 0
 	

 	 	 	 	
##### begin mls_file_write_down(passwd_t) depth: 1
 	
	
	


	typeattribute passwd_t mlsfilewrite;

	 	 	 	
##### end mls_file_write_down(passwd_t) depth: 0
 	
 	 	 	 	
##### begin mls_file_downgrade(passwd_t) depth: 1
 	
	
	


	typeattribute passwd_t mlsfiledowngrade;

	 	 	 	
##### end mls_file_downgrade(passwd_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(passwd_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(passwd_t) depth: 2
 	
	
	


	allow passwd_t proc_t:dir { read getattr lock search ioctl };
	allow passwd_t proc_t:lnk_file { getattr read };
	allow passwd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(passwd_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(passwd_t) depth: 1
 	
	
	


	allow passwd_t security_t:dir { read search getattr };
	allow passwd_t security_t:file { getattr read write };
	allow passwd_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(passwd_t) depth: 1
 	
	
	


	allow passwd_t security_t:dir { read search getattr };
	allow passwd_t security_t:file { getattr read write };
	allow passwd_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(passwd_t) depth: 1
 	
	
	


	allow passwd_t security_t:dir { read search getattr };
	allow passwd_t security_t:file { getattr read write };
	allow passwd_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(passwd_t) depth: 1
 	
	
	


	allow passwd_t security_t:dir { read search getattr };
	allow passwd_t security_t:file { getattr read write };
	allow passwd_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(passwd_t) depth: 1
 	
	
	


	allow passwd_t security_t:dir { read search getattr };
	allow passwd_t security_t:file { getattr read write };
	allow passwd_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(passwd_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(passwd_t) depth: 2
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(passwd_t) depth: 1
 	
	allow passwd_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(passwd_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(passwd_t) depth: 2
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(passwd_t) depth: 1
 	
	allow passwd_t devpts_t:dir { read getattr lock search ioctl };
	allow passwd_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(passwd_t) depth: 0
 	

 	 	 	 	
##### begin auth_manage_shadow(passwd_t) depth: 1
 	
	
	


	allow passwd_t shadow_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_etc_filetrans(passwd_t,shadow_t,file) depth: 2
 	
	
	


	allow passwd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition passwd_t etc_t:file shadow_t;

	 	 	 	
##### end files_etc_filetrans(passwd_t,shadow_t,file) depth: 1
 	

	typeattribute passwd_t can_read_shadow_passwords, can_write_shadow_passwords;

	 	 	 	
##### end auth_manage_shadow(passwd_t) depth: 0
 	
 	 	 	 	
##### begin auth_relabel_shadow(passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(passwd_t) depth: 2
 	
	
	


	allow passwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(passwd_t) depth: 1
 	
	allow passwd_t shadow_t:file { relabelfrom relabelto };
	typeattribute passwd_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_relabel_shadow(passwd_t) depth: 0
 	

# allow checking if a shell is executable
 	 	 	 	
##### begin corecmd_check_exec_shell(passwd_t) depth: 1
 	
	
	


	allow passwd_t bin_t:dir { read getattr lock search ioctl };
	allow passwd_t bin_t:lnk_file { read getattr lock ioctl };
	allow passwd_t shell_exec_t:file execute;

	 	 	 	
##### end corecmd_check_exec_shell(passwd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(passwd_t) depth: 1
 	
	
	


	allow passwd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(passwd_t) depth: 0
 	

 	 	 	 	
##### begin files_read_etc_runtime_files(passwd_t) depth: 1
 	
	
	


	allow passwd_t etc_t:dir { read getattr lock search ioctl };
	allow passwd_t etc_runtime_t:file { read getattr lock ioctl };
	allow passwd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_manage_etc_files(passwd_t) depth: 1
 	
	
	


	allow passwd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow passwd_t etc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow passwd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_manage_etc_files(passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_search_var(passwd_t) depth: 1
 	
	
	


	allow passwd_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_dontaudit_search_pids(passwd_t) depth: 1
 	
	
	


	dontaudit passwd_t var_run_t:dir search;

	 	 	 	
##### end files_dontaudit_search_pids(passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_relabel_etc_files(passwd_t) depth: 1
 	
	
	


	allow passwd_t etc_t:dir { getattr search read lock ioctl };
	allow passwd_t etc_t:file { relabelfrom relabelto };

	 	 	 	
##### end files_relabel_etc_files(passwd_t) depth: 0
 	

# /usr/bin/passwd asks for w access to utmp, but it will operate
# correctly without it.  Do not audit write denials to utmp.
 	 	 	 	
##### begin init_dontaudit_rw_utmp(passwd_t) depth: 1
 	
	
	


	dontaudit passwd_t initrc_var_run_t:file { getattr read write append };

	 	 	 	
##### end init_dontaudit_rw_utmp(passwd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(passwd_t) depth: 2
 	
	
	


	allow passwd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(passwd_t) depth: 1
 	
	allow passwd_t lib_t:dir { read getattr lock search ioctl };
	allow passwd_t lib_t:lnk_file { read getattr lock ioctl };
	allow passwd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow passwd_t ld_so_t:file { read getattr lock execute ioctl };
	allow passwd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(passwd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(passwd_t) depth: 2
 	
	
	


	allow passwd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(passwd_t) depth: 1
 	
	allow passwd_t lib_t:dir { read getattr lock search ioctl };
	allow passwd_t lib_t:lnk_file { read getattr lock ioctl };
	allow passwd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow passwd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow passwd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(passwd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(passwd_t) depth: 1
 	
	
	


	allow passwd_t devlog_t:lnk_file read;
	allow passwd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow passwd_t syslogd_t:unix_dgram_socket sendto;
	allow passwd_t syslogd_t:unix_stream_socket connectto;
	allow passwd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow passwd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(passwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(passwd_t) depth: 3
 	
	
	


	allow passwd_t device_t:dir { read getattr lock search ioctl };
	allow passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(passwd_t) depth: 2
 	
	allow passwd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(passwd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(passwd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(passwd_t) depth: 2
 	
	
	


	allow passwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(passwd_t) depth: 1
 	
	# FIXME: passwd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(passwd_t) depth: 2
 	
	
	


	allow passwd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(passwd_t) depth: 1
 	
	allow passwd_t locale_t:dir { read getattr lock search ioctl };
	allow passwd_t locale_t:lnk_file { read getattr lock ioctl };
	allow passwd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(passwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(passwd_t) depth: 3
 	
	
	


	allow passwd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(passwd_t) depth: 2
 	
	allow passwd_t lib_t:dir { read getattr lock search ioctl };
	allow passwd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(passwd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(passwd_t) depth: 0
 	

 	 	 	 	
##### begin seutil_dontaudit_search_config(passwd_t) depth: 1
 	
	
	


	dontaudit passwd_t selinux_config_t:dir search;

	 	 	 	
##### end seutil_dontaudit_search_config(passwd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(passwd_t) depth: 1
 	
	
	


	allow passwd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(passwd_t) depth: 0
 	
# make sure that getcon succeeds
 	 	 	 	
##### begin userdom_getattr_all_users(passwd_t) depth: 1
 	
	
	


	allow passwd_t userdomain:process getattr;

	 	 	 	
##### end userdom_getattr_all_users(passwd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_read_all_users_state(passwd_t) depth: 1
 	
	
	


	allow passwd_t userdomain:dir { getattr search };
	allow passwd_t userdomain:file { read getattr lock ioctl };
	 	 	 	 	
##### begin kernel_search_proc(passwd_t) depth: 2
 	
	
	


	allow passwd_t proc_t:dir search;

	 	 	 	
##### end kernel_search_proc(passwd_t) depth: 1
 	

	 	 	 	
##### end userdom_read_all_users_state(passwd_t) depth: 0
 	
# user generally runs this from their home directory, so do not audit a search
# on user home dir
 	 	 	 	
##### begin userdom_dontaudit_search_all_users_home_content(passwd_t) depth: 1
 	
	
	


	dontaudit passwd_t { home_dir_type home_type }:dir { getattr search };

	 	 	 	
##### end userdom_dontaudit_search_all_users_home_content(passwd_t) depth: 0
 	


	
		
	



	
		
	


########################################
#
# Password admin local policy
#

allow sysadm_passwd_t self:capability { chown dac_override fsetid setuid setgid sys_resource };
allow sysadm_passwd_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow sysadm_passwd_t self:process { setrlimit setfscreate };
allow sysadm_passwd_t self:fd use;
allow sysadm_passwd_t self:fifo_file { getattr read write append ioctl lock };
allow sysadm_passwd_t self:sock_file { read getattr lock ioctl };
allow sysadm_passwd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow sysadm_passwd_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow sysadm_passwd_t self:unix_dgram_socket sendto;
allow sysadm_passwd_t self:unix_stream_socket connectto;
allow sysadm_passwd_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow sysadm_passwd_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow sysadm_passwd_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow sysadm_passwd_t self:msg { send receive };

# allow vipw to create temporary files under /var/tmp/vi.recover
allow sysadm_passwd_t sysadm_passwd_tmp_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };
allow sysadm_passwd_t sysadm_passwd_tmp_t:file { create ioctl read getattr lock write setattr append link unlink rename };
 	 	 	 	
##### begin files_tmp_filetrans(sysadm_passwd_t,sysadm_passwd_tmp_t,{ file dir }) depth: 1
 	
	
	


	allow sysadm_passwd_t tmp_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition sysadm_passwd_t tmp_t:{ file dir } sysadm_passwd_tmp_t;

	 	 	 	
##### end files_tmp_filetrans(sysadm_passwd_t,sysadm_passwd_tmp_t,{ file dir }) depth: 0
 	
 	 	 	 	
##### begin files_search_var(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin kernel_read_kernel_sysctls(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t proc_t:dir search;
	allow sysadm_passwd_t sysctl_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(sysadm_passwd_t) depth: 0
 	
# for /proc/meminfo
 	 	 	 	
##### begin kernel_read_system_state(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t proc_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t proc_t:lnk_file { getattr read };
	allow sysadm_passwd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin selinux_get_fs_mount(sysadm_passwd_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t proc_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t proc_t:lnk_file { getattr read };
	allow sysadm_passwd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(sysadm_passwd_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t security_t:dir { read search getattr };
	allow sysadm_passwd_t security_t:file { getattr read write };
	allow sysadm_passwd_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t security_t:dir { read search getattr };
	allow sysadm_passwd_t security_t:file { getattr read write };
	allow sysadm_passwd_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t security_t:dir { read search getattr };
	allow sysadm_passwd_t security_t:file { getattr read write };
	allow sysadm_passwd_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t security_t:dir { read search getattr };
	allow sysadm_passwd_t security_t:file { getattr read write };
	allow sysadm_passwd_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t security_t:dir { read search getattr };
	allow sysadm_passwd_t security_t:file { getattr read write };
	allow sysadm_passwd_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(sysadm_passwd_t) depth: 0
 	

# for SSP
 	 	 	 	
##### begin dev_read_urand(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t urandom_device_t:chr_file { read getattr lock ioctl };

	 	 	 	
##### end dev_read_urand(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin fs_getattr_xattr_fs(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin fs_search_auto_mountpoints(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sysadm_passwd_t) depth: 1
 	
	allow sysadm_passwd_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sysadm_passwd_t) depth: 1
 	
	allow sysadm_passwd_t devpts_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin auth_manage_shadow(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t shadow_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_etc_filetrans(sysadm_passwd_t,shadow_t,file) depth: 2
 	
	
	


	allow sysadm_passwd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition sysadm_passwd_t etc_t:file shadow_t;

	 	 	 	
##### end files_etc_filetrans(sysadm_passwd_t,shadow_t,file) depth: 1
 	

	typeattribute sysadm_passwd_t can_read_shadow_passwords, can_write_shadow_passwords;

	 	 	 	
##### end auth_manage_shadow(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin auth_relabel_shadow(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sysadm_passwd_t) depth: 1
 	
	allow sysadm_passwd_t shadow_t:file { relabelfrom relabelto };
	typeattribute sysadm_passwd_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_relabel_shadow(sysadm_passwd_t) depth: 0
 	

# allow checking if a shell is executable
 	 	 	 	
##### begin corecmd_check_exec_shell(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t bin_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t bin_t:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t shell_exec_t:file execute;

	 	 	 	
##### end corecmd_check_exec_shell(sysadm_passwd_t) depth: 0
 	
# allow vipw to exec the editor
 	 	 	 	
##### begin corecmd_search_sbin(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t sbin_t:dir { getattr search };

	 	 	 	
##### end corecmd_search_sbin(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_bin(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t bin_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow sysadm_passwd_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_shell(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t bin_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow sysadm_passwd_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_read_usr_files(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t usr_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t usr_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end files_read_usr_files(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin files_manage_etc_files(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow sysadm_passwd_t etc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow sysadm_passwd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_manage_etc_files(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_relabel_etc_files(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t etc_t:dir { getattr search read lock ioctl };
	allow sysadm_passwd_t etc_t:file { relabelfrom relabelto };

	 	 	 	
##### end files_relabel_etc_files(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin files_read_etc_runtime_files(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t etc_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t etc_runtime_t:file { read getattr lock ioctl };
	allow sysadm_passwd_t etc_runtime_t:lnk_file { getattr read };

	 	 	 	
##### end files_read_etc_runtime_files(sysadm_passwd_t) depth: 0
 	
# for nscd lookups
 	 	 	 	
##### begin files_dontaudit_search_pids(sysadm_passwd_t) depth: 1
 	
	
	


	dontaudit sysadm_passwd_t var_run_t:dir search;

	 	 	 	
##### end files_dontaudit_search_pids(sysadm_passwd_t) depth: 0
 	

# /usr/bin/passwd asks for w access to utmp, but it will operate
# correctly without it.  Do not audit write denials to utmp.
 	 	 	 	
##### begin init_dontaudit_rw_utmp(sysadm_passwd_t) depth: 1
 	
	
	


	dontaudit sysadm_passwd_t initrc_var_run_t:file { getattr read write append };

	 	 	 	
##### end init_dontaudit_rw_utmp(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(sysadm_passwd_t) depth: 1
 	
	allow sysadm_passwd_t lib_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t lib_t:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t ld_so_t:file { read getattr lock execute ioctl };
	allow sysadm_passwd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(sysadm_passwd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(sysadm_passwd_t) depth: 1
 	
	allow sysadm_passwd_t lib_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t lib_t:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow sysadm_passwd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(sysadm_passwd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(sysadm_passwd_t) depth: 1
 	
	# FIXME: sysadm_passwd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(sysadm_passwd_t) depth: 2
 	
	
	


	allow sysadm_passwd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(sysadm_passwd_t) depth: 1
 	
	allow sysadm_passwd_t locale_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t locale_t:lnk_file { read getattr lock ioctl };
	allow sysadm_passwd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(sysadm_passwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(sysadm_passwd_t) depth: 3
 	
	
	


	allow sysadm_passwd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(sysadm_passwd_t) depth: 2
 	
	allow sysadm_passwd_t lib_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(sysadm_passwd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t devlog_t:lnk_file read;
	allow sysadm_passwd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow sysadm_passwd_t syslogd_t:unix_dgram_socket sendto;
	allow sysadm_passwd_t syslogd_t:unix_stream_socket connectto;
	allow sysadm_passwd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow sysadm_passwd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(sysadm_passwd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(sysadm_passwd_t) depth: 3
 	
	
	


	allow sysadm_passwd_t device_t:dir { read getattr lock search ioctl };
	allow sysadm_passwd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(sysadm_passwd_t) depth: 2
 	
	allow sysadm_passwd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(sysadm_passwd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin seutil_dontaudit_search_config(sysadm_passwd_t) depth: 1
 	
	
	


	dontaudit sysadm_passwd_t selinux_config_t:dir search;

	 	 	 	
##### end seutil_dontaudit_search_config(sysadm_passwd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(sysadm_passwd_t) depth: 1
 	
	
	


	allow sysadm_passwd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(sysadm_passwd_t) depth: 0
 	
# user generally runs this from their home directory, so do not audit a search
# on user home dir
 	 	 	 	
##### begin userdom_dontaudit_search_all_users_home_content(sysadm_passwd_t) depth: 1
 	
	
	


	dontaudit sysadm_passwd_t { home_dir_type home_type }:dir { getattr search };

	 	 	 	
##### end userdom_dontaudit_search_all_users_home_content(sysadm_passwd_t) depth: 0
 	


	
		
	


########################################
#
# Useradd local policy
#

allow useradd_t self:capability { dac_override chown kill fowner fsetid setuid sys_resource };
allow useradd_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow useradd_t self:process setfscreate;
allow useradd_t self:fd use;
allow useradd_t self:fifo_file { getattr read write append ioctl lock };
allow useradd_t self:shm { associate getattr setattr create destroy read write lock unix_read unix_write };
allow useradd_t self:sem { associate getattr setattr create destroy read write unix_read unix_write };
allow useradd_t self:msgq { associate getattr setattr create destroy read write enqueue unix_read unix_write };
allow useradd_t self:msg { send receive };
allow useradd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
allow useradd_t self:unix_stream_socket { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } listen accept };
allow useradd_t self:unix_dgram_socket sendto;
allow useradd_t self:unix_stream_socket connectto;
allow useradd_t self:netlink_audit_socket { { { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } nlmsg_relay };

# Allow access to context for shadow file
 	 	 	 	
##### begin selinux_get_fs_mount(useradd_t) depth: 1
 	
	# read /proc/filesystems to see if selinuxfs is supported
	# then read /proc/self/mount to see where selinuxfs is mounted
	 	 	 	 	
##### begin kernel_read_system_state(useradd_t) depth: 2
 	
	
	


	allow useradd_t proc_t:dir { read getattr lock search ioctl };
	allow useradd_t proc_t:lnk_file { getattr read };
	allow useradd_t proc_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_system_state(useradd_t) depth: 1
 	

	 	 	 	
##### end selinux_get_fs_mount(useradd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_validate_context(useradd_t) depth: 1
 	
	
	


	allow useradd_t security_t:dir { read search getattr };
	allow useradd_t security_t:file { getattr read write };
	allow useradd_t security_t:security check_context;

	 	 	 	
##### end selinux_validate_context(useradd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_access_vector(useradd_t) depth: 1
 	
	
	


	allow useradd_t security_t:dir { read search getattr };
	allow useradd_t security_t:file { getattr read write };
	allow useradd_t security_t:security compute_av;

	 	 	 	
##### end selinux_compute_access_vector(useradd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_create_context(useradd_t) depth: 1
 	
	
	


	allow useradd_t security_t:dir { read search getattr };
	allow useradd_t security_t:file { getattr read write };
	allow useradd_t security_t:security compute_create;

	 	 	 	
##### end selinux_compute_create_context(useradd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_relabel_context(useradd_t) depth: 1
 	
	
	


	allow useradd_t security_t:dir { read search getattr };
	allow useradd_t security_t:file { getattr read write };
	allow useradd_t security_t:security compute_relabel;

	 	 	 	
##### end selinux_compute_relabel_context(useradd_t) depth: 0
 	
 	 	 	 	
##### begin selinux_compute_user_contexts(useradd_t) depth: 1
 	
	
	


	allow useradd_t security_t:dir { read search getattr };
	allow useradd_t security_t:file { getattr read write };
	allow useradd_t security_t:security compute_user;

	 	 	 	
##### end selinux_compute_user_contexts(useradd_t) depth: 0
 	
# for getting the number of groups
 	 	 	 	
##### begin kernel_read_kernel_sysctls(useradd_t) depth: 1
 	
	
	


	allow useradd_t proc_t:dir search;
	allow useradd_t sysctl_t:dir { read getattr lock search ioctl };
	allow useradd_t sysctl_kernel_t:dir { read getattr lock search ioctl };
	allow useradd_t sysctl_kernel_t:file { read getattr lock ioctl };

	 	 	 	
##### end kernel_read_kernel_sysctls(useradd_t) depth: 0
 	

 	 	 	 	
##### begin fs_search_auto_mountpoints(useradd_t) depth: 1
 	
	
	


	allow useradd_t autofs_t:dir { getattr search };

	 	 	 	
##### end fs_search_auto_mountpoints(useradd_t) depth: 0
 	
 	 	 	 	
##### begin fs_getattr_xattr_fs(useradd_t) depth: 1
 	
	
	


	allow useradd_t fs_t:filesystem getattr;

	 	 	 	
##### end fs_getattr_xattr_fs(useradd_t) depth: 0
 	

 	 	 	 	
##### begin term_use_all_user_ttys(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(useradd_t) depth: 2
 	
	
	


	allow useradd_t device_t:dir { read getattr lock search ioctl };
	allow useradd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(useradd_t) depth: 1
 	
	allow useradd_t ttynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ttys(useradd_t) depth: 0
 	
 	 	 	 	
##### begin term_use_all_user_ptys(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(useradd_t) depth: 2
 	
	
	


	allow useradd_t device_t:dir { read getattr lock search ioctl };
	allow useradd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(useradd_t) depth: 1
 	
	allow useradd_t devpts_t:dir { read getattr lock search ioctl };
	allow useradd_t ptynode:chr_file { { getattr read write ioctl } lock append };

	 	 	 	
##### end term_use_all_user_ptys(useradd_t) depth: 0
 	

 	 	 	 	
##### begin auth_manage_shadow(useradd_t) depth: 1
 	
	
	


	allow useradd_t shadow_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_etc_filetrans(useradd_t,shadow_t,file) depth: 2
 	
	
	


	allow useradd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition useradd_t etc_t:file shadow_t;

	 	 	 	
##### end files_etc_filetrans(useradd_t,shadow_t,file) depth: 1
 	

	typeattribute useradd_t can_read_shadow_passwords, can_write_shadow_passwords;

	 	 	 	
##### end auth_manage_shadow(useradd_t) depth: 0
 	
 	 	 	 	
##### begin auth_relabel_shadow(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(useradd_t) depth: 2
 	
	
	


	allow useradd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(useradd_t) depth: 1
 	
	allow useradd_t shadow_t:file { relabelfrom relabelto };
	typeattribute useradd_t can_relabelto_shadow_passwords;

	 	 	 	
##### end auth_relabel_shadow(useradd_t) depth: 0
 	
 	 	 	 	
##### begin auth_rw_lastlog(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin logging_search_logs(useradd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_var(useradd_t) depth: 3
 	
	
	


	allow useradd_t var_t:dir { getattr search };

	 	 	 	
##### end files_search_var(useradd_t) depth: 2
 	
	allow useradd_t var_log_t:dir search;

	 	 	 	
##### end logging_search_logs(useradd_t) depth: 1
 	
	allow useradd_t lastlog_t:file { getattr read write setattr };

	 	 	 	
##### end auth_rw_lastlog(useradd_t) depth: 0
 	
 	 	 	 	
##### begin auth_use_nsswitch(useradd_t) depth: 1
 	
	
	


	allow useradd_t var_auth_t:dir { read getattr lock search ioctl };
	allow useradd_t var_auth_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	 	 	 	 	
##### begin files_list_var_lib(useradd_t) depth: 2
 	
	
	


	allow useradd_t var_t:dir { getattr search };
	allow useradd_t var_lib_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_var_lib(useradd_t) depth: 1
 	

	 	 	 	 	
##### begin sysnet_dns_name_resolve(useradd_t) depth: 2
 	
	
	


	allow useradd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow useradd_t self:udp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(useradd_t) depth: 3
 	
	
	


	allow useradd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_if(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_if(useradd_t) depth: 4
 	
	
	


	allow useradd_t netif_type:netif udp_send;

	 	 	 	
##### end corenet_udp_send_all_if(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_if(useradd_t) depth: 4
 	
	
	


	allow useradd_t netif_type:netif udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_if(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_if(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(useradd_t) depth: 4
 	
	
	


	allow useradd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow useradd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(useradd_t) depth: 4
 	
	
	


	allow useradd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(useradd_t) depth: 3
 	
	
	


	allow useradd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_all_nodes(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_all_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t node_type:node udp_send;

	 	 	 	
##### end corenet_udp_send_all_nodes(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_all_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t node_type:node udp_recv;

	 	 	 	
##### end corenet_udp_receive_all_nodes(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_dns_port(useradd_t) depth: 3
 	
	
	


	allow useradd_t dns_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_dns_port(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_sendrecv_dns_port(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_send_dns_port(useradd_t) depth: 4
 	
	
	


	allow useradd_t dns_port_t:udp_socket send_msg;

	 	 	 	
##### end corenet_udp_send_dns_port(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_udp_receive_dns_port(useradd_t) depth: 4
 	
	
	


	allow useradd_t dns_port_t:udp_socket recv_msg;

	 	 	 	
##### end corenet_udp_receive_dns_port(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_udp_sendrecv_dns_port(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(useradd_t) depth: 4
 	
	
	


	allow useradd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(useradd_t) depth: 3
 	
	
	


	allow useradd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_udp_bind_all_nodes(useradd_t) depth: 3
 	
	
	


	allow useradd_t node_type:udp_socket node_bind;

	 	 	 	
##### end corenet_udp_bind_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_dns_port(useradd_t) depth: 3
 	
	
	


	allow useradd_t dns_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_dns_port(useradd_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(useradd_t) depth: 3
 	
	
	


	allow useradd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(useradd_t) depth: 2
 	
	allow useradd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_dns_name_resolve(useradd_t) depth: 1
 	
	 	 	 	 	
##### begin sysnet_use_ldap(useradd_t) depth: 2
 	
	
	
		

	allow useradd_t self:tcp_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_if(useradd_t) depth: 3
 	
	
	


	allow useradd_t netif_type:netif { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_if(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_if(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_if(useradd_t) depth: 4
 	
	
	


	allow useradd_t netif_type:netif rawip_send;

	# cjp: comment out until raw access is
	# is fixed for network users
	#allow useradd_t self:capability net_raw;

	 	 	 	
##### end corenet_raw_send_all_if(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_if(useradd_t) depth: 4
 	
	
	


	allow useradd_t netif_type:netif rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_if(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_if(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_all_nodes(useradd_t) depth: 3
 	
	
	


	allow useradd_t node_type:node { tcp_send tcp_recv };

	 	 	 	
##### end corenet_tcp_sendrecv_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_raw_sendrecv_all_nodes(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_send_all_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t node_type:node rawip_send;

	 	 	 	
##### end corenet_raw_send_all_nodes(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin corenet_raw_receive_all_nodes(useradd_t) depth: 4
 	
	
	


	allow useradd_t node_type:node rawip_recv;

	 	 	 	
##### end corenet_raw_receive_all_nodes(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_raw_sendrecv_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_sendrecv_ldap_port(useradd_t) depth: 3
 	
	
	


	allow useradd_t ldap_port_t:tcp_socket { send_msg recv_msg };

	 	 	 	
##### end corenet_tcp_sendrecv_ldap_port(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_non_ipsec_sendrecv(useradd_t) depth: 3
 	
	 	 	 	 	
##### begin kernel_sendrecv_unlabeled_association(useradd_t) depth: 4
 	
	
	


	allow useradd_t unlabeled_t:association { sendto recvfrom };

	 	 	 	
##### end kernel_sendrecv_unlabeled_association(useradd_t) depth: 3
 	

	 	 	 	
##### end corenet_non_ipsec_sendrecv(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_bind_all_nodes(useradd_t) depth: 3
 	
	
	


	allow useradd_t node_type:tcp_socket node_bind;

	 	 	 	
##### end corenet_tcp_bind_all_nodes(useradd_t) depth: 2
 	
	 	 	 	 	
##### begin corenet_tcp_connect_ldap_port(useradd_t) depth: 3
 	
	
	


	allow useradd_t ldap_port_t:tcp_socket name_connect;

	 	 	 	
##### end corenet_tcp_connect_ldap_port(useradd_t) depth: 2
 	

	 	 	 	 	
##### begin files_search_etc(useradd_t) depth: 3
 	
	
	


	allow useradd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(useradd_t) depth: 2
 	
	allow useradd_t net_conf_t:file { read getattr lock ioctl };

	 	 	 	
##### end sysnet_use_ldap(useradd_t) depth: 1
 	

	
	
		
	


	
	
		
	


	 	 	 	
##### end auth_use_nsswitch(useradd_t) depth: 0
 	

 	 	 	 	
##### begin corecmd_exec_shell(useradd_t) depth: 1
 	
	
	


	allow useradd_t bin_t:dir { read getattr lock search ioctl };
	allow useradd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow useradd_t shell_exec_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_shell(useradd_t) depth: 0
 	
# Execute /usr/bin/{passwd,chfn,chsh} and /usr/sbin/{useradd,vipw}.
 	 	 	 	
##### begin corecmd_exec_bin(useradd_t) depth: 1
 	
	
	


	allow useradd_t bin_t:dir { read getattr lock search ioctl };
	allow useradd_t bin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow useradd_t bin_t:file { { read getattr lock execute ioctl } execute_no_trans };



	 	 	 	
##### end corecmd_exec_bin(useradd_t) depth: 0
 	
 	 	 	 	
##### begin corecmd_exec_sbin(useradd_t) depth: 1
 	
	
	


	allow useradd_t sbin_t:dir { read getattr lock search ioctl };
	allow useradd_t sbin_t:lnk_file { read getattr lock ioctl };
	
	
	


	allow useradd_t sbin_t:file { { read getattr lock execute ioctl } execute_no_trans };


	 	 	 	
##### end corecmd_exec_sbin(useradd_t) depth: 0
 	

 	 	 	 	
##### begin domain_use_interactive_fds(useradd_t) depth: 1
 	
	
	


	allow useradd_t privfd:fd use;

	 	 	 	
##### end domain_use_interactive_fds(useradd_t) depth: 0
 	

 	 	 	 	
##### begin files_manage_etc_files(useradd_t) depth: 1
 	
	
	


	allow useradd_t etc_t:dir { read getattr lock search ioctl add_name remove_name write };
	allow useradd_t etc_t:file { create ioctl read getattr lock write setattr append link unlink rename };
	allow useradd_t etc_t:lnk_file { read getattr lock ioctl };

	 	 	 	
##### end files_manage_etc_files(useradd_t) depth: 0
 	
 	 	 	 	
##### begin files_search_var_lib(useradd_t) depth: 1
 	
	
	


	allow useradd_t { var_t var_lib_t }:dir { getattr search };

	 	 	 	
##### end files_search_var_lib(useradd_t) depth: 0
 	
 	 	 	 	
##### begin files_relabel_etc_files(useradd_t) depth: 1
 	
	
	


	allow useradd_t etc_t:dir { getattr search read lock ioctl };
	allow useradd_t etc_t:file { relabelfrom relabelto };

	 	 	 	
##### end files_relabel_etc_files(useradd_t) depth: 0
 	

 	 	 	 	
##### begin init_use_fds(useradd_t) depth: 1
 	
	
	


	allow useradd_t init_t:fd use;

	 	 	 	
##### end init_use_fds(useradd_t) depth: 0
 	
 	 	 	 	
##### begin init_rw_utmp(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_pids(useradd_t) depth: 2
 	
	
	


	allow useradd_t var_t:dir { getattr search };
	allow useradd_t var_run_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_pids(useradd_t) depth: 1
 	
	allow useradd_t initrc_var_run_t:file { getattr read write append ioctl lock };

	 	 	 	
##### end init_rw_utmp(useradd_t) depth: 0
 	

 	 	 	 	
##### begin libs_use_ld_so(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_etc(useradd_t) depth: 2
 	
	
	


	allow useradd_t etc_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_etc(useradd_t) depth: 1
 	
	allow useradd_t lib_t:dir { read getattr lock search ioctl };
	allow useradd_t lib_t:lnk_file { read getattr lock ioctl };
	allow useradd_t ld_so_t:lnk_file { read getattr lock ioctl };
	allow useradd_t ld_so_t:file { read getattr lock execute ioctl };
	allow useradd_t ld_so_cache_t:file { read getattr lock ioctl };

	 	 	 	
##### end libs_use_ld_so(useradd_t) depth: 0
 	
 	 	 	 	
##### begin libs_use_shared_libs(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_list_usr(useradd_t) depth: 2
 	
	
	


	allow useradd_t usr_t:dir { read getattr lock search ioctl };

	 	 	 	
##### end files_list_usr(useradd_t) depth: 1
 	
	allow useradd_t lib_t:dir { read getattr lock search ioctl };
	allow useradd_t lib_t:lnk_file { read getattr lock ioctl };
	allow useradd_t { shlib_t textrel_shlib_t }:lnk_file { read getattr lock ioctl };
	allow useradd_t { shlib_t textrel_shlib_t }:file { read getattr lock execute ioctl };
	allow useradd_t textrel_shlib_t:file execmod;

	 	 	 	
##### end libs_use_shared_libs(useradd_t) depth: 0
 	

 	 	 	 	
##### begin logging_send_syslog_msg(useradd_t) depth: 1
 	
	
	


	allow useradd_t devlog_t:lnk_file read;
	allow useradd_t devlog_t:sock_file { getattr read write append ioctl lock };

	# the type of socket depends on the syslog daemon
	allow useradd_t syslogd_t:unix_dgram_socket sendto;
	allow useradd_t syslogd_t:unix_stream_socket connectto;
	allow useradd_t self:unix_dgram_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };
	allow useradd_t self:unix_stream_socket { create { ioctl read getattr write setattr append bind connect getopt setopt shutdown } };

	# cjp: this should most likely be removed:
	 	 	 	 	
##### begin term_use_console(useradd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin dev_list_all_dev_nodes(useradd_t) depth: 3
 	
	
	


	allow useradd_t device_t:dir { read getattr lock search ioctl };
	allow useradd_t device_t:lnk_file { getattr read };

	 	 	 	
##### end dev_list_all_dev_nodes(useradd_t) depth: 2
 	
	allow useradd_t console_device_t:chr_file { getattr read write append ioctl lock };

	 	 	 	
##### end term_use_console(useradd_t) depth: 1
 	

	 	 	 	
##### end logging_send_syslog_msg(useradd_t) depth: 0
 	

 	 	 	 	
##### begin miscfiles_read_localization(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(useradd_t) depth: 2
 	
	
	


	allow useradd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(useradd_t) depth: 1
 	
	# FIXME: useradd_t read etc_t:lnk_file here
	 	 	 	 	
##### begin files_search_usr(useradd_t) depth: 2
 	
	
	


	allow useradd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(useradd_t) depth: 1
 	
	allow useradd_t locale_t:dir { read getattr lock search ioctl };
	allow useradd_t locale_t:lnk_file { read getattr lock ioctl };
	allow useradd_t locale_t:file { read getattr lock ioctl };

	# why?
	 	 	 	 	
##### begin libs_read_lib_files(useradd_t) depth: 2
 	
	
	


	 	 	 	 	
##### begin files_search_usr(useradd_t) depth: 3
 	
	
	


	allow useradd_t usr_t:dir search;

	 	 	 	
##### end files_search_usr(useradd_t) depth: 2
 	
	allow useradd_t lib_t:dir { read getattr lock search ioctl };
	allow useradd_t lib_t:{ file lnk_file } { read getattr lock ioctl };

	 	 	 	
##### end libs_read_lib_files(useradd_t) depth: 1
 	

	 	 	 	
##### end miscfiles_read_localization(useradd_t) depth: 0
 	

 	 	 	 	
##### begin seutil_read_config(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(useradd_t) depth: 2
 	
	
	


	allow useradd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(useradd_t) depth: 1
 	
	allow useradd_t selinux_config_t:dir { read getattr lock search ioctl };
	allow useradd_t selinux_config_t:file { read getattr lock ioctl };
	allow useradd_t selinux_config_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_config(useradd_t) depth: 0
 	
 	 	 	 	
##### begin seutil_read_file_contexts(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_etc(useradd_t) depth: 2
 	
	
	


	allow useradd_t etc_t:dir search;

	 	 	 	
##### end files_search_etc(useradd_t) depth: 1
 	
	allow useradd_t selinux_config_t:dir search;
	allow useradd_t file_context_t:dir { read getattr lock search ioctl };
	allow useradd_t file_context_t:file { read getattr lock ioctl };
	allow useradd_t file_context_t:lnk_file { getattr read };

	 	 	 	
##### end seutil_read_file_contexts(useradd_t) depth: 0
 	

 	 	 	 	
##### begin userdom_use_unpriv_users_fds(useradd_t) depth: 1
 	
	
	


	allow useradd_t unpriv_userdomain:fd use;

	 	 	 	
##### end userdom_use_unpriv_users_fds(useradd_t) depth: 0
 	
# for when /root is the cwd
 	 	 	 	
##### begin userdom_dontaudit_search_sysadm_home_dirs(useradd_t) depth: 1
 	
	
		
	


		dontaudit useradd_t user_home_dir_t:dir { getattr search };
	

	 	 	 	
##### end userdom_dontaudit_search_sysadm_home_dirs(useradd_t) depth: 0
 	
# Add/remove user home directories
 	 	 	 	
##### begin userdom_home_filetrans_generic_user_home_dir(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_home_filetrans(useradd_t,user_home_dir_t,dir) depth: 2
 	
	
	


	allow useradd_t home_root_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition useradd_t home_root_t:dir user_home_dir_t;

	 	 	 	
##### end files_home_filetrans(useradd_t,user_home_dir_t,dir) depth: 1
 	

	 	 	 	
##### end userdom_home_filetrans_generic_user_home_dir(useradd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_manage_generic_user_home_content_dirs(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(useradd_t) depth: 2
 	
	
	


	allow useradd_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(useradd_t) depth: 1
 	
	allow useradd_t user_home_dir_t:dir { getattr search };
	allow useradd_t user_home_t:dir { create read getattr lock setattr ioctl link unlink rename search add_name remove_name reparent write rmdir };

	 	 	 	
##### end userdom_manage_generic_user_home_content_dirs(useradd_t) depth: 0
 	
 	 	 	 	
##### begin userdom_generic_user_home_dir_filetrans_generic_user_home_content(useradd_t,{ file lnk_file sock_file fifo_file }) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_home(useradd_t) depth: 2
 	
	
	


	allow useradd_t home_root_t:dir { getattr search };

	 	 	 	
##### end files_search_home(useradd_t) depth: 1
 	
	allow useradd_t user_home_dir_t:dir { read getattr lock search ioctl add_name remove_name write };
	type_transition useradd_t user_home_dir_t:{ file lnk_file sock_file fifo_file } user_home_t;

	 	 	 	
##### end userdom_generic_user_home_dir_filetrans_generic_user_home_content(useradd_t,{ file lnk_file sock_file fifo_file }) depth: 0
 	

 	 	 	 	
##### begin mta_manage_spool(useradd_t) depth: 1
 	
	
	


	 	 	 	 	
##### begin files_search_spool(useradd_t) depth: 2
 	
	
	


	allow useradd_t var_t:dir { getattr search };
	allow useradd_t var_spool_t:dir { getattr search };

	 	 	 	
##### end files_search_spool(useradd_t) depth: 1
 	
	allow useradd_t mail_spool_t:dir { create getattr setattr read write link unlink rename search add_name remove_name reparent rmdir lock ioctl };
	allow useradd_t mail_spool_t:lnk_file { create read getattr setattr link unlink rename };
	allow useradd_t mail_spool_t:file { create getattr setattr read write append rename link unlink ioctl lock };

	 	 	 	
##### end mta_manage_spool(useradd_t) depth: 0
 	


	
		
	



	
		
	



	
		
	

#line 1 "tmp/all_post.conf"

##################################
#
# Core User configuration.
#

#
# gen_user(username, prefix, role_set, mls_defaultlevel, mls_range, [mcs_catetories])
#
# Note: Identities without a prefix wil not be listed
# in the users_extra file used by genhomedircon.

#
# system_u is the user identity for system processes and objects.
# There should be no corresponding Unix user identity for system,
# and a user process should never be assigned the system user
# identity.
#
user system_u roles { system_r };


#
# user_u is a generic user identity for Linux users who have no
# SELinux user identity defined.  The modified daemons will use
# this user identity in the security context if there is no matching
# SELinux user identity for a Linux user.  If you do not want to
# permit any access to such users, then remove this entry.
#

user user_u roles { user_r sysadm_r system_r };



#
# The following users correspond to Unix identities.
# These identities are typically assigned as the user attribute
# when login starts the user shell.  Users with access to the sysadm_r
# role should use the staff_r role instead of the user_r role when
# not in the sysadm_r.
#

	user root roles { user_r sysadm_r system_r };



#
# Define the constraints
#
# constrain class_set perm_set expression ;
#
# expression : ( expression ) 
#	     | not expression
#	     | expression and expression
#	     | expression or expression
#	     | u1 op u2
#	     | r1 role_op r2
#	     | t1 op t2
#	     | u1 op names
#	     | u2 op names
#	     | r1 op names
#	     | r2 op names
#	     | t1 op names
#	     | t2 op names
#
# op : == | != 
# role_op : == | != | eq | dom | domby | incomp
#
# names : name | { name_list }
# name_list : name | name_list name		
#

#
# SELinux process identity change constraint:
#
constrain process transition
	( u1 == u2


	or t1 == can_change_process_identity

);

#
# SELinux process role change constraint:
#
constrain process transition 
	( r1 == r2


	or t1 == can_change_process_role

);

#
# SELinux dynamic transition constraint:
#
constrain process dyntransition
	( u1 == u2 and r1 == r2 );

#
# SElinux object identity change constraint:
#
constrain { dir file lnk_file sock_file fifo_file chr_file blk_file } { create relabelto relabelfrom } 
	( u1 == u2 or t1 == can_change_object_identity );

constrain { tcp_socket udp_socket rawip_socket netlink_socket packet_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket } { create relabelto relabelfrom } 
	( u1 == u2 or t1 == can_change_object_identity );
sid port system_u:object_r:port_t
sid node system_u:object_r:node_t
sid netif system_u:object_r:netif_t
sid devnull system_u:object_r:null_device_t
sid file system_u:object_r:file_t
sid fs system_u:object_r:fs_t
sid kernel system_u:system_r:kernel_t
sid sysctl system_u:object_r:sysctl_t
sid unlabeled system_u:object_r:unlabeled_t
sid any_socket		system_u:object_r:unlabeled_t
sid file_labels		system_u:object_r:unlabeled_t
sid icmp_socket		system_u:object_r:unlabeled_t
sid igmp_packet		system_u:object_r:unlabeled_t
sid init			system_u:object_r:unlabeled_t
sid kmod			system_u:object_r:unlabeled_t
sid netmsg		system_u:object_r:unlabeled_t
sid policy		system_u:object_r:unlabeled_t
sid scmp_packet		system_u:object_r:unlabeled_t
sid sysctl_modprobe 	system_u:object_r:unlabeled_t
sid sysctl_fs		system_u:object_r:unlabeled_t
sid sysctl_kernel	system_u:object_r:unlabeled_t
sid sysctl_net		system_u:object_r:unlabeled_t
sid sysctl_net_unix	system_u:object_r:unlabeled_t
sid sysctl_vm		system_u:object_r:unlabeled_t
sid sysctl_dev		system_u:object_r:unlabeled_t
sid tcp_socket		system_u:object_r:unlabeled_t
sid security system_u:object_r:security_t
fs_use_xattr ext2 system_u:object_r:fs_t;
fs_use_xattr ext3 system_u:object_r:fs_t;
fs_use_xattr gfs system_u:object_r:fs_t;
fs_use_xattr jfs system_u:object_r:fs_t;
fs_use_xattr reiserfs system_u:object_r:fs_t;
fs_use_xattr xfs system_u:object_r:fs_t;
fs_use_task pipefs system_u:object_r:fs_t;
fs_use_task sockfs system_u:object_r:fs_t;
fs_use_trans mqueue system_u:object_r:tmpfs_t;
fs_use_trans shm system_u:object_r:tmpfs_t;
fs_use_trans tmpfs system_u:object_r:tmpfs_t;
fs_use_trans devpts system_u:object_r:devpts_t;
genfscon proc /mtrr system_u:object_r:mtrr_device_t
genfscon sysfs / system_u:object_r:sysfs_t
genfscon usbfs / system_u:object_r:usbfs_t
genfscon usbdevfs / system_u:object_r:usbfs_t
genfscon devfs /usb system_u:object_r:usb_device_t
genfscon rootfs / system_u:object_r:root_t
genfscon bdev / system_u:object_r:bdev_t
genfscon binfmt_misc / system_u:object_r:binfmt_misc_fs_t
genfscon capifs / system_u:object_r:capifs_t
genfscon configfs / system_u:object_r:configfs_t
genfscon eventpollfs / system_u:object_r:eventpollfs_t
genfscon futexfs / system_u:object_r:futexfs_t
genfscon hugetlbfs / system_u:object_r:hugetlbfs_t
genfscon inotifyfs / system_u:object_r:inotifyfs_t
genfscon nfsd / system_u:object_r:nfsd_fs_t
genfscon ramfs / system_u:object_r:ramfs_t
genfscon romfs / system_u:object_r:romfs_t
genfscon cramfs / system_u:object_r:romfs_t
genfscon rpc_pipefs / system_u:object_r:rpc_pipefs_t
genfscon autofs / system_u:object_r:autofs_t
genfscon automount / system_u:object_r:autofs_t
genfscon cifs / system_u:object_r:cifs_t
genfscon smbfs / system_u:object_r:cifs_t
genfscon fat / system_u:object_r:dosfs_t
genfscon msdos / system_u:object_r:dosfs_t
genfscon ntfs / system_u:object_r:dosfs_t
genfscon vfat / system_u:object_r:dosfs_t
genfscon iso9660 / system_u:object_r:iso9660_t
genfscon udf / system_u:object_r:iso9660_t
genfscon nfs / system_u:object_r:nfs_t
genfscon nfs4 / system_u:object_r:nfs_t
genfscon afs / system_u:object_r:nfs_t
genfscon debugfs / system_u:object_r:debugfs_t
genfscon proc / system_u:object_r:proc_t
genfscon proc /sysvipc system_u:object_r:proc_t
genfscon proc /kmsg system_u:object_r:proc_kmsg_t
genfscon proc /kcore system_u:object_r:proc_kcore_t
genfscon proc /mdstat system_u:object_r:proc_mdstat_t
genfscon proc /net system_u:object_r:proc_net_t
genfscon proc /sys system_u:object_r:sysctl_t
genfscon proc /irq system_u:object_r:sysctl_irq_t
genfscon proc /net/rpc system_u:object_r:sysctl_rpc_t
genfscon proc /sys/fs system_u:object_r:sysctl_fs_t
genfscon proc /sys/kernel system_u:object_r:sysctl_kernel_t
genfscon proc /sys/kernel/modprobe system_u:object_r:sysctl_modprobe_t
genfscon proc /sys/kernel/hotplug system_u:object_r:sysctl_hotplug_t
genfscon proc /sys/net system_u:object_r:sysctl_net_t
genfscon proc /sys/net/unix system_u:object_r:sysctl_net_unix_t
genfscon proc /sys/vm system_u:object_r:sysctl_vm_t
genfscon proc /sys/dev system_u:object_r:sysctl_dev_t
genfscon selinuxfs / system_u:object_r:security_t
genfscon devfs /ad -c system_u:object_r:fixed_disk_device_t
portcon udp 7007 system_u:object_r:afs_bos_port_t
portcon tcp 2040 system_u:object_r:afs_fs_port_t
portcon udp 7000 system_u:object_r:afs_fs_port_t
portcon udp 7005 system_u:object_r:afs_fs_port_t
portcon udp 7004 system_u:object_r:afs_ka_port_t
portcon udp 7002 system_u:object_r:afs_pt_port_t
portcon udp 7003 system_u:object_r:afs_vl_port_t
portcon udp 10080 system_u:object_r:amanda_port_t
portcon tcp 10080 system_u:object_r:amanda_port_t
portcon udp 10081 system_u:object_r:amanda_port_t
portcon tcp 10081 system_u:object_r:amanda_port_t
portcon tcp 10082 system_u:object_r:amanda_port_t
portcon tcp 10083 system_u:object_r:amanda_port_t
portcon tcp 10024 system_u:object_r:amavisd_recv_port_t
portcon tcp 10025 system_u:object_r:amavisd_send_port_t
portcon tcp 1720 system_u:object_r:asterisk_port_t
portcon udp 2427 system_u:object_r:asterisk_port_t
portcon udp 2727 system_u:object_r:asterisk_port_t
portcon udp 4569 system_u:object_r:asterisk_port_t
portcon udp 5060 system_u:object_r:asterisk_port_t
portcon tcp 113 system_u:object_r:auth_port_t
portcon tcp 179 system_u:object_r:bgp_port_t
portcon udp 179 system_u:object_r:bgp_port_t
portcon tcp 3310 system_u:object_r:clamd_port_t
portcon udp 4041 system_u:object_r:clockspeed_port_t
portcon udp 512 system_u:object_r:comsat_port_t
portcon tcp 2401 system_u:object_r:cvs_port_t
portcon udp 2401 system_u:object_r:cvs_port_t
portcon udp 6276 system_u:object_r:dcc_port_t
portcon udp 6277 system_u:object_r:dcc_port_t
portcon tcp 1178 system_u:object_r:dbskkd_port_t
portcon udp 68 system_u:object_r:dhcpc_port_t
portcon udp 67 system_u:object_r:dhcpd_port_t
portcon tcp 647 system_u:object_r:dhcpd_port_t
portcon udp 647 system_u:object_r:dhcpd_port_t
portcon tcp 847 system_u:object_r:dhcpd_port_t
portcon udp 847 system_u:object_r:dhcpd_port_t
portcon tcp 2628 system_u:object_r:dict_port_t
portcon tcp 3632 system_u:object_r:distccd_port_t
portcon udp 53 system_u:object_r:dns_port_t
portcon tcp 53 system_u:object_r:dns_port_t
portcon tcp 79 system_u:object_r:fingerd_port_t
portcon tcp 20 system_u:object_r:ftp_data_port_t
portcon tcp 21 system_u:object_r:ftp_port_t
portcon udp 1718 system_u:object_r:gatekeeper_port_t
portcon udp 1719 system_u:object_r:gatekeeper_port_t
portcon tcp 1721 system_u:object_r:gatekeeper_port_t
portcon tcp 7000 system_u:object_r:gatekeeper_port_t
portcon tcp 1213 system_u:object_r:giftd_port_t
portcon tcp 70 system_u:object_r:gopher_port_t
portcon udp 70 system_u:object_r:gopher_port_t
portcon tcp 3128 system_u:object_r:http_cache_port_t
portcon udp 3130 system_u:object_r:http_cache_port_t
portcon tcp 8080 system_u:object_r:http_cache_port_t
portcon tcp 8118 system_u:object_r:http_cache_port_t
portcon tcp 80 system_u:object_r:http_port_t
portcon tcp 443 system_u:object_r:http_port_t
portcon tcp 488 system_u:object_r:http_port_t
portcon tcp 8008 system_u:object_r:http_port_t
portcon tcp 5335 system_u:object_r:howl_port_t
portcon udp 5353 system_u:object_r:howl_port_t
portcon tcp 50000 system_u:object_r:hplip_port_t
portcon tcp 50002 system_u:object_r:hplip_port_t
portcon tcp 9010 system_u:object_r:i18n_input_port_t
portcon tcp 5323 system_u:object_r:imaze_port_t
portcon udp 5323 system_u:object_r:imaze_port_t
portcon tcp 7 system_u:object_r:inetd_child_port_t
portcon udp 7 system_u:object_r:inetd_child_port_t
portcon tcp 9 system_u:object_r:inetd_child_port_t
portcon udp 9 system_u:object_r:inetd_child_port_t
portcon tcp 13 system_u:object_r:inetd_child_port_t
portcon udp 13 system_u:object_r:inetd_child_port_t
portcon tcp 19 system_u:object_r:inetd_child_port_t
portcon udp 19 system_u:object_r:inetd_child_port_t
portcon tcp 37 system_u:object_r:inetd_child_port_t
portcon udp 37 system_u:object_r:inetd_child_port_t
portcon tcp 512 system_u:object_r:inetd_child_port_t
portcon tcp 543 system_u:object_r:inetd_child_port_t
portcon tcp 544 system_u:object_r:inetd_child_port_t
portcon tcp 891 system_u:object_r:inetd_child_port_t
portcon udp 891 system_u:object_r:inetd_child_port_t
portcon tcp 892 system_u:object_r:inetd_child_port_t
portcon udp 892 system_u:object_r:inetd_child_port_t
portcon tcp 2105 system_u:object_r:inetd_child_port_t
portcon tcp 5666 system_u:object_r:inetd_child_port_t
portcon tcp 119 system_u:object_r:innd_port_t
portcon tcp 631 system_u:object_r:ipp_port_t
portcon udp 631 system_u:object_r:ipp_port_t
portcon tcp 6667 system_u:object_r:ircd_port_t
portcon udp 500 system_u:object_r:isakmp_port_t
portcon tcp 5222 system_u:object_r:jabber_client_port_t
portcon tcp 5223 system_u:object_r:jabber_client_port_t
portcon tcp 5269 system_u:object_r:jabber_interserver_port_t
portcon tcp 464 system_u:object_r:kerberos_admin_port_t
portcon udp 464 system_u:object_r:kerberos_admin_port_t
portcon tcp 749 system_u:object_r:kerberos_admin_port_t
portcon tcp 4444 system_u:object_r:kerberos_master_port_t
portcon udp 4444 system_u:object_r:kerberos_master_port_t
portcon tcp 88 system_u:object_r:kerberos_port_t
portcon udp 88 system_u:object_r:kerberos_port_t
portcon tcp 750 system_u:object_r:kerberos_port_t
portcon udp 750 system_u:object_r:kerberos_port_t
portcon udp 517 system_u:object_r:ktalkd_port_t
portcon udp 518 system_u:object_r:ktalkd_port_t
portcon tcp 389 system_u:object_r:ldap_port_t
portcon udp 389 system_u:object_r:ldap_port_t
portcon tcp 636 system_u:object_r:ldap_port_t
portcon udp 636 system_u:object_r:ldap_port_t
portcon tcp 2000 system_u:object_r:mail_port_t
portcon tcp 1234 system_u:object_r:monopd_port_t
portcon tcp 3306 system_u:object_r:mysqld_port_t
portcon tcp 1241 system_u:object_r:nessus_port_t
portcon udp 137 system_u:object_r:nmbd_port_t
portcon udp 138 system_u:object_r:nmbd_port_t
portcon udp 139 system_u:object_r:nmbd_port_t
portcon udp 123 system_u:object_r:ntp_port_t
portcon udp 5000 system_u:object_r:openvpn_port_t
portcon tcp 5988 system_u:object_r:pegasus_http_port_t
portcon tcp 5989 system_u:object_r:pegasus_https_port_t
portcon tcp 106 system_u:object_r:pop_port_t
portcon tcp 109 system_u:object_r:pop_port_t
portcon tcp 110 system_u:object_r:pop_port_t
portcon tcp 143 system_u:object_r:pop_port_t
portcon tcp 220 system_u:object_r:pop_port_t
portcon tcp 993 system_u:object_r:pop_port_t
portcon tcp 995 system_u:object_r:pop_port_t
portcon tcp 1109 system_u:object_r:pop_port_t
portcon udp 111 system_u:object_r:portmap_port_t
portcon tcp 111 system_u:object_r:portmap_port_t
portcon tcp 5432 system_u:object_r:postgresql_port_t
portcon tcp 60000 system_u:object_r:postgrey_port_t
portcon tcp 515 system_u:object_r:printer_port_t
portcon tcp 5703 system_u:object_r:ptal_port_t
portcon udp 4011 system_u:object_r:pxe_port_t
portcon udp 24441 system_u:object_r:pyzor_port_t
portcon udp 1646 system_u:object_r:radacct_port_t
portcon udp 1813 system_u:object_r:radacct_port_t
portcon udp 1645 system_u:object_r:radius_port_t
portcon udp 1812 system_u:object_r:radius_port_t
portcon tcp 2703 system_u:object_r:razor_port_t
portcon tcp 513 system_u:object_r:rlogind_port_t
portcon tcp 953 system_u:object_r:rndc_port_t
portcon udp 520 system_u:object_r:router_port_t
portcon tcp 514 system_u:object_r:rsh_port_t
portcon tcp 873 system_u:object_r:rsync_port_t
portcon udp 873 system_u:object_r:rsync_port_t
portcon tcp 137-139 system_u:object_r:smbd_port_t
portcon tcp 445 system_u:object_r:smbd_port_t
portcon tcp 25 system_u:object_r:smtp_port_t
portcon tcp 465 system_u:object_r:smtp_port_t
portcon tcp 587 system_u:object_r:smtp_port_t
portcon udp 161 system_u:object_r:snmp_port_t
portcon udp 162 system_u:object_r:snmp_port_t
portcon tcp 199 system_u:object_r:snmp_port_t
portcon tcp 783 system_u:object_r:spamd_port_t
portcon tcp 22 system_u:object_r:ssh_port_t
portcon tcp 8000 system_u:object_r:soundd_port_t
portcon tcp 9433 system_u:object_r:soundd_port_t
portcon tcp 901 system_u:object_r:swat_port_t
portcon udp 514 system_u:object_r:syslogd_port_t
portcon tcp 23 system_u:object_r:telnetd_port_t
portcon udp 69 system_u:object_r:tftp_port_t
portcon tcp 8081 system_u:object_r:transproxy_port_t
portcon tcp 540 system_u:object_r:uucpd_port_t
portcon tcp 5900 system_u:object_r:vnc_port_t
portcon tcp 6001 system_u:object_r:xserver_port_t
portcon tcp 6002 system_u:object_r:xserver_port_t
portcon tcp 6003 system_u:object_r:xserver_port_t
portcon tcp 6004 system_u:object_r:xserver_port_t
portcon tcp 6005 system_u:object_r:xserver_port_t
portcon tcp 6006 system_u:object_r:xserver_port_t
portcon tcp 6007 system_u:object_r:xserver_port_t
portcon tcp 6008 system_u:object_r:xserver_port_t
portcon tcp 6009 system_u:object_r:xserver_port_t
portcon tcp 6010 system_u:object_r:xserver_port_t
portcon tcp 6011 system_u:object_r:xserver_port_t
portcon tcp 6012 system_u:object_r:xserver_port_t
portcon tcp 6013 system_u:object_r:xserver_port_t
portcon tcp 6014 system_u:object_r:xserver_port_t
portcon tcp 6015 system_u:object_r:xserver_port_t
portcon tcp 6016 system_u:object_r:xserver_port_t
portcon tcp 6017 system_u:object_r:xserver_port_t
portcon tcp 6018 system_u:object_r:xserver_port_t
portcon tcp 6019 system_u:object_r:xserver_port_t
portcon tcp 2601 system_u:object_r:zebra_port_t
portcon tcp 8021 system_u:object_r:zope_port_t
portcon tcp 1-1023 system_u:object_r:reserved_port_t
portcon udp 1-1023 system_u:object_r:reserved_port_t
nodecon :: ffff:ffff:ffff:ffff:ffff:ffff:: system_u:object_r:compat_ipv4_node_t
nodecon 0.0.0.0 255.255.255.255 system_u:object_r:inaddr_any_node_t
nodecon fe80:: ffff:ffff:ffff:ffff:: system_u:object_r:link_local_node_t
nodecon 127.0.0.1 255.255.255.255 system_u:object_r:lo_node_t
nodecon ::ffff:0000:0000 ffff:ffff:ffff:ffff:ffff:ffff:: system_u:object_r:mapped_ipv4_node_t
nodecon ff00:: ff00:: system_u:object_r:multicast_node_t
nodecon fec0:: ffc0:: system_u:object_r:site_local_node_t
nodecon :: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff system_u:object_r:unspec_node_t
