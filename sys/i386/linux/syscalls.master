 $FreeBSD: src/sys/i386/linux/syscalls.master,v 1.65 2006/03/18 20:47:36 netchild Exp $

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93
; System call name/number master file (or rather, slave, from LINUX).
; Processed to create linux_sysent.c, linux_proto.h and linux_syscall.h.

; Columns: number audit type nargs name alt{name,tag,rtyp}/comments
;	number	system call number, must be in order
;	audit	the audit event associated with the system call
;		A value of AUE_NULL means no auditing, but it also means that
;		there is no audit event for the call at this time. For the
;		case where the event exists, but we don't want auditing, the
;		event should be #defined to AUE_NULL in audit_kevents.h.
;	type	one of STD, OBSOL, UNIMPL
;	name	psuedo-prototype of syscall routine
;		If one of the following alts is different, then all appear:
;	audit   the audit event associated with the system call
;		A value of AUE_NULL means no auditing, but it also means that
;		there is no audit event for the call at this time. For the
;		case where the event exists, but we don't want auditing, the
;		event should be #defined to AUE_NULL in audit_kevents.h.
;	altname	name of system call if different
;	alttag	name of args struct tag if different from [o]`name'"_args"
;	altrtyp	return type if not int (bogus - syscalls always return int)
;		for UNIMPL/OBSOL, name continues with comments

; types:
;	AUE_NULL	STD	always included
;	OBSOL	obsolete, not included in system, only specifies name
;	AUE_NULL	UNIMPL	not implemented, placeholder only

#include <sys/param.h>
#include <sys/sysent.h>
#include <sys/sysproto.h>
#include <compat/linux/linux_sysproto.h>
#include <i386/linux/linux.h>
#include <i386/linux/linux_proto.h>

; Isn't pretty, but there seems to be no other way to trap nosys
#define	nosys	linux_nosys

; #ifdef's, etc. may be included, and are copied to the output files.

0	AUE_NULL	UNIMPL	setup
1	AUE_EXIT	MNOPROTO { void sys_exit(int rval); } exit \
				    sys_exit_args void
2	AUE_FORK	MSTD	{ int linux_fork(void); }
3	AUE_NULL	MNOPROTO { int read(int fd, char *buf, \
				    u_int nbyte); }
4	AUE_NULL	MNOPROTO { int write(int fd, char *buf, \
				    u_int nbyte); }
5	AUE_OPEN_RWTC	MSTD	{ int linux_open(char *path, l_int flags, \
				    l_int mode); }
6	AUE_CLOSE	MNOPROTO { int close(int fd); }
7	AUE_WAIT4	MSTD	{ int linux_waitpid(l_pid_t pid, \
				    l_int *status, l_int options); }
8	AUE_O_CREAT	MSTD	{ int linux_creat(char *path, \
				    l_int mode); }
9	AUE_LINK	MSTD	{ int linux_link(char *path, char *to); }
10	AUE_UNLINK	MSTD	{ int linux_unlink(char *path); }
11	AUE_EXECVE	MSTD	{ int linux_execve(char *path, char **argp, \
				    char **envp); }
12	AUE_CHDIR	MSTD	{ int linux_chdir(char *path); }
13	AUE_NULL	MSTD	{ int linux_time(l_time_t *tm); }
14	AUE_MKNOD	MSTD	{ int linux_mknod(char *path, l_int mode, \
				    l_dev_t dev); }
15	AUE_CHMOD	MSTD	{ int linux_chmod(char *path, \
				    l_mode_t mode); }
16	AUE_LCHOWN	MSTD	{ int linux_lchown16(char *path, \
				    l_uid16_t uid, l_gid16_t gid); }
17	AUE_NULL	UNIMPL	break
18	AUE_STAT	MSTD	{ int linux_stat(char *path, \
				    struct linux_stat *up); }
19	AUE_LSEEK	MSTD	{ int linux_lseek(l_uint fdes, l_off_t off, \
				    l_int whence); }
20	AUE_GETPID	MSTD	{ int linux_getpid(void); }
21	AUE_MOUNT	STD	{ int linux_mount(char *specialfile, \
				    char *dir, char *filesystemtype, \
				    l_ulong rwflag, void *data); }
22	AUE_UMOUNT	STD	{ int linux_oldumount(char *path); }
23	AUE_SETUID	MSTD	{ int linux_setuid16(l_uid16_t uid); }
24	AUE_GETUID	MSTD	{ int linux_getuid16(void); }
25	AUE_SETTIMEOFDAY	MSTD	{ int linux_stime(void); }
26	AUE_PTRACE	MSTD	{ int linux_ptrace(l_long req, l_long pid, \
				    l_long addr, l_long data); }
27	AUE_NULL	MSTD	{ int linux_alarm(l_uint secs); }
28	AUE_FSTAT	MSTD	{ int linux_fstat(l_uint fd, \
				    struct linux_stat *up); }
29	AUE_NULL	MSTD	{ int linux_pause(void); }
30	AUE_UTIME	MSTD	{ int linux_utime(char *fname, \
				    struct l_utimbuf *times); }
31	AUE_NULL	UNIMPL	stty
32	AUE_NULL	UNIMPL	gtty
33	AUE_ACCESS	MSTD	{ int linux_access(char *path, l_int flags); }
34	AUE_NICE	MSTD	{ int linux_nice(l_int inc); }
35	AUE_NULL	UNIMPL	ftime
36	AUE_SYNC	MNOPROTO	{ int sync(void); }
37	AUE_KILL	MSTD	{ int linux_kill(l_int pid, l_int signum); }
38	AUE_RENAME	MSTD	{ int linux_rename(char *from, char *to); }
39	AUE_MKDIR	MSTD	{ int linux_mkdir(char *path, l_int mode); }
40	AUE_RMDIR	MSTD	{ int linux_rmdir(char *path); }
41	AUE_DUP		MNOPROTO { int dup(u_int fd); }
42	AUE_PIPE	MSTD	{ int linux_pipe(l_ulong *pipefds); }
43	AUE_NULL	MSTD	{ int linux_times(struct l_times_argv *buf); }
44	AUE_NULL	UNIMPL	prof
45	AUE_NULL	STD	{ int linux_brk(l_ulong dsend); }
46	AUE_SETGID	MSTD	{ int linux_setgid16(l_gid16_t gid); }
47	AUE_GETGID	MSTD	{ int linux_getgid16(void); }
48	AUE_NULL	MSTD	{ int linux_signal(l_int sig, \
				    l_handler_t handler); }
49	AUE_GETEUID	MSTD	{ int linux_geteuid16(void); }
50	AUE_GETEGID	MSTD	{ int linux_getegid16(void); }
51	AUE_ACCT	MNOPROTO { int acct(char *path); }
52	AUE_UMOUNT	STD	{ int linux_umount(char *path, l_int flags); }
53	AUE_NULL	UNIMPL	lock
54	AUE_IOCTL	STD	{ int linux_ioctl(l_uint fd, l_uint cmd, \
				    l_ulong arg); }
55	AUE_FCNTL	MSTD	{ int linux_fcntl(l_uint fd, l_uint cmd, \
				    l_ulong arg); }
56	AUE_NULL	UNIMPL	mpx
57	AUE_SETPGRP	MNOPROTO { int setpgid(int pid, int pgid); }
58	AUE_NULL	UNIMPL	ulimit
59	AUE_NULL	MSTD	{ int linux_olduname(void); }
60	AUE_UMASK	MNOPROTO { int umask(int newmask); }
61	AUE_CHROOT	MNOPROTO	{ int chroot(char *path); }
62	AUE_NULL	MSTD	{ int linux_ustat(l_dev_t dev, \
				    struct l_ustat *ubuf); }
63	AUE_DUP2	MNOPROTO { int dup2(u_int from, u_int to); }
64	AUE_GETPPID	MNOPROTO { int getppid(void); }
65	AUE_GETPGRP	MNOPROTO { int getpgrp(void); }
66	AUE_SETSID	MNOPROTO { int setsid(void); }
67	AUE_NULL	MSTD	{ int linux_sigaction(l_int sig, \
				    l_osigaction_t *nsa, \
				    l_osigaction_t *osa); }
68	AUE_NULL	MSTD	{ int linux_sgetmask(void); }
69	AUE_NULL	MSTD	{ int linux_ssetmask(l_osigset_t mask); }
70	AUE_SETREUID	MSTD	{ int linux_setreuid16(l_uid16_t ruid, \
				    l_uid16_t euid); }
71	AUE_SETREGID	MSTD	{ int linux_setregid16(l_gid16_t rgid, \
				    l_gid16_t egid); }
72	AUE_NULL	MSTD	{ int linux_sigsuspend(l_int hist0, \
				    l_int hist1, l_osigset_t mask); }
73	AUE_NULL	MSTD	{ int linux_sigpending(l_osigset_t *mask); }
74	AUE_SYSCTL	MSTD	{ int linux_sethostname(char *hostname, \
				    u_int len); }
75	AUE_SETRLIMIT	MSTD	{ int linux_setrlimit(l_uint resource, \
				    struct l_rlimit *rlim); }
76	AUE_GETRLIMIT	MSTD	{ int linux_old_getrlimit(l_uint resource, \
				    struct l_rlimit *rlim); }
77	AUE_GETRUSAGE	MNOPROTO	{ int getrusage(int who, \
				    struct rusage *rusage); }
78	AUE_NULL	MNOPROTO { int gettimeofday( \
				    struct timeval *tp, \
				    struct timezone *tzp); }
79	AUE_SETTIMEOFDAY	MNOPROTO { int settimeofday( \
				    struct timeval *tp, \
				    struct timezone *tzp); }
80	AUE_GETGROUPS	MSTD	{ int linux_getgroups16(l_uint gidsetsize, \
				    l_gid16_t *gidset); }
81	AUE_SETGROUPS	MSTD	{ int linux_setgroups16(l_uint gidsetsize, \
				    l_gid16_t *gidset); }
82	AUE_SELECT	MSTD	{ int linux_old_select( \
				    struct l_old_select_argv *ptr); }
83	AUE_SYMLINK	MSTD	{ int linux_symlink(char *path, char *to); }
84	AUE_STAT	MSTD	{ int linux_lstat(char *path, struct ostat *up); }
85	AUE_READLINK	MSTD	{ int linux_readlink(char *name, char *buf, \
				    l_int count); }
86	AUE_USELIB	STD	{ int linux_uselib(char *library); }
87	AUE_SWAPON	MNOPROTO	{ int swapon(char *name); }
88	AUE_REBOOT	MSTD	{ int linux_reboot(l_int magic1, \
				    l_int magic2, l_uint cmd, void *arg); }
89	AUE_O_GETDENTS	STD	{ int linux_readdir(l_uint fd, \
				    struct l_dirent *dent, l_uint count); }
90	AUE_MMAP	MSTD	{ int linux_mmap(struct l_mmap_argv *ptr); }
91	AUE_MUNMAP	MNOPROTO	{ int munmap(caddr_t addr, int len); }
92	AUE_TRUNCATE	MSTD	{ int linux_truncate(char *path, \
				    l_ulong length); }
93	AUE_FTRUNCATE	MSTD	{ int linux_ftruncate(int fd, long length); }
94	AUE_FCHMOD	MNOPROTO	{ int fchmod(int fd, int mode); }
95	AUE_FCHOWN	MNOPROTO	{ int fchown(int fd, int uid, int gid); }
96	AUE_GETPRIORITY	MSTD	{ int linux_getpriority(int which, int who); }
97	AUE_SETPRIORITY	MNOPROTO { int setpriority(int which, int who, \
				    int prio); }
98	AUE_AUE_PROFILE	UNIMPL	profil
99	AUE_STATFS	MSTD	{ int linux_statfs(char *path, \
				    struct l_statfs_buf *buf); }
100	AUE_FSTATFS	MSTD	{ int linux_fstatfs(l_uint fd, \
				    struct l_statfs_buf *buf); }
101	AUE_NULL	MSTD	{ int linux_ioperm(l_ulong start, \
				    l_ulong length, l_int enable); }
102	AUE_NULL	MSTD	{ int linux_socketcall(l_int what, \
				    l_ulong args); }
103	AUE_NULL	MSTD	{ int linux_syslog(l_int type, char *buf, \
				    l_int len); }
104	AUE_SETITIMER	MSTD	{ int linux_setitimer(l_int which, \
				    struct l_itimerval *itv, \
				    struct l_itimerval *oitv); }
105	AUE_GETITIMER	MSTD	{ int linux_getitimer(l_int which, \
				    struct l_itimerval *itv); }
106	AUE_STAT	MSTD	{ int linux_newstat(char *path, \
				    struct l_newstat *buf); }
107	AUE_LSTAT	MSTD	{ int linux_newlstat(char *path, \
				    struct l_newstat *buf); }
108	AUE_FSTAT	MSTD	{ int linux_newfstat(l_uint fd, \
				    struct l_newstat *buf); }
109	AUE_NULL	MSTD	{ int linux_uname(void); }
110	AUE_NULL	MSTD	{ int linux_iopl(l_ulong level); }
111	AUE_NULL	MSTD	{ int linux_vhangup(void); }
112	AUE_NULL	UNIMPL	idle
113	AUE_NULL	MSTD	{ int linux_vm86old(void); }
114	AUE_WAIT4	MSTD	{ int linux_wait4(l_pid_t pid, \
				    l_uint *status, l_int options, \
				    struct l_rusage *rusage); }
115	AUE_SWAPOFF	MSTD	{ int linux_swapoff(void); }
116	AUE_NULL	MSTD	{ int linux_sysinfo(struct l_sysinfo *info); }
117	AUE_NULL	STD	{ int linux_ipc(l_uint what, l_int arg1, \
				    l_int arg2, l_int arg3, void *ptr, \
				    l_long arg5); }
118	AUE_FSYNC	MNOPROTO	{ int fsync(int fd); }
119	AUE_SIGRETURN	MSTD	{ int linux_sigreturn( \
				    struct l_sigframe *sfp); }
120	AUE_RFORK	MSTD	{ int linux_clone(l_int flags, void *stack); }
121	AUE_SYSCTL	MNOPROTO { int setdomainname(char *name, \
				    int len); }
122	AUE_NULL	MSTD	{ int linux_newuname( \
				    struct l_new_utsname *buf); }
123	AUE_NULL	MSTD	{ int linux_modify_ldt(l_int func, \
				    void *ptr, l_ulong bytecount); }
124	AUE_ADJTIME	MSTD	{ int linux_adjtimex(void); }
125	AUE_MPROTECT	MNOPROTO	{ int mprotect(caddr_t addr, int len, \
				    int prot); }
126	AUE_SIGPROCMASK	MSTD	{ int linux_sigprocmask(l_int how, \
				    l_osigset_t *mask, l_osigset_t *omask); }
127	AUE_NULL	MSTD	{ int linux_create_module(void); }
128	AUE_NULL	MSTD	{ int linux_init_module(void); }
129	AUE_NULL	MSTD	{ int linux_delete_module(void); }
130	AUE_NULL	MSTD	{ int linux_get_kernel_syms(void); }
131	AUE_QUOTACTL	MSTD	{ int linux_quotactl(void); }
132	AUE_GETPGID	MNOPROTO	{ int getpgid(int pid); }
133	AUE_FCHDIR	MNOPROTO	{ int fchdir(int fd); }
134	AUE_BDFLUSH	MSTD	{ int linux_bdflush(void); }
135	AUE_NULL	MSTD	{ int linux_sysfs(l_int option, \
				    l_ulong arg1, l_ulong arg2); }
136	AUE_PERSONALITY	MSTD	{ int linux_personality(l_ulong per); }
137	AUE_NULL	UNIMPL	afs_syscall
138	AUE_SETFSUID	MSTD	{ int linux_setfsuid16(l_uid16_t uid); }
139	AUE_SETFSGID	MSTD	{ int linux_setfsgid16(l_gid16_t gid); }
140	AUE_LSEEK	MSTD	{ int linux_llseek(l_int fd, l_ulong ohigh, \
				    l_ulong olow, l_loff_t *res, \
				    l_uint whence); }
141	AUE_O_GETDENTS	STD	{ int linux_getdents(l_uint fd, void *dent, \
				    l_uint count); }
142	AUE_SELECT	MSTD	{ int linux_select(l_int nfds, \
				    l_fd_set *readfds, l_fd_set *writefds, \
				    l_fd_set *exceptfds, \
				    struct l_timeval *timeout); }
143	AUE_FLOCK	MNOPROTO	{ int flock(int fd, int how); }
144	AUE_MSYNC	MSTD	{ int linux_msync(l_ulong addr, \
				    l_size_t len, l_int fl); }
145	AUE_READV	MNOPROTO	{ int readv(int fd, struct iovec *iovp, \
				    u_int iovcnt); }
146	AUE_WRITEV	MNOPROTO	{ int writev(int fd, struct iovec *iovp, \
				    u_int iovcnt); }
147	AUE_GETSID	MSTD	{ int linux_getsid(l_pid_t pid); }
148	AUE_NULL	MSTD	{ int linux_fdatasync(l_uint fd); }
149	AUE_SYSCTL	MSTD	{ int linux_sysctl( \
				    struct l___sysctl_args *args); }
150	AUE_MLOCK	MNOPROTO { int mlock(const void *addr, size_t len); }
151	AUE_MUNLOCK	MNOPROTO { int munlock(const void *addr, size_t len); }
152	AUE_MLOCKALL	MNOPROTO { int mlockall(int how); }
153	AUE_MUNLOCKALL	MNOPROTO { int munlockall(void); }
154	AUE_SCHED_SETPARAM	MNOPROTO { int sched_setparam(pid_t pid, \
				    const struct sched_param *param); }
155	AUE_SCHED_GETPARAM	MNOPROTO { int sched_getparam(pid_t pid, \
				    struct sched_param *param); }
156	AUE_SCHED_SETSCHEDULER	MSTD	{ int linux_sched_setscheduler(l_pid_t pid, \
				    l_int policy, \
				    struct l_sched_param *param); }
157	AUE_SCHED_GETSCHEDULER	MSTD	{ int linux_sched_getscheduler(l_pid_t pid); }
158	AUE_NULL	MNOPROTO	{ int sched_yield(void); }
159	AUE_SCHED_GET_PRIORITY_MAX	MSTD	{ int linux_sched_get_priority_max( \
				    l_int policy); }
160	AUE_SCHED_GET_PRIORITY_MIN	MSTD	{ int linux_sched_get_priority_min( \
				    l_int policy); }
161	AUE_SCHED_RR_GET_INTERVAL	MNOPROTO { int sched_rr_get_interval(l_pid_t pid, \
				    struct l_timespec *interval); }
162	AUE_NULL	MNOPROTO { int nanosleep( \
				    const struct timespec *rqtp, \
				    struct timespec *rmtp); }
163	AUE_NULL	MSTD	{ int linux_mremap(l_ulong addr, \
				    l_ulong old_len, l_ulong new_len, \
				    l_ulong flags, l_ulong new_addr); }
164	AUE_SETRESUID	MSTD	{ int linux_setresuid16(l_uid16_t ruid, \
				    l_uid16_t euid, l_uid16_t suid); }
165	AUE_GETRESUID	MSTD	{ int linux_getresuid16(l_uid16_t *ruid, \
				    l_uid16_t *euid, l_uid16_t *suid); }
166	AUE_NULL	MSTD	{ int linux_vm86(void); }
167	AUE_NULL	MSTD	{ int linux_query_module(void); }
168	AUE_POLL	MNOPROTO	{ int poll(struct pollfd*, \
				    unsigned int nfds, long timeout); }
169	AUE_NULL	MSTD	{ int linux_nfsservctl(void); }
170	AUE_SETRESGID	MSTD	{ int linux_setresgid16(l_gid16_t rgid, \
				    l_gid16_t egid, l_gid16_t sgid); }
171	AUE_GETRESGID	MSTD	{ int linux_getresgid16(l_gid16_t *rgid, \
				    l_gid16_t *egid, l_gid16_t *sgid); }
172	AUE_PRCTL	MSTD	{ int linux_prctl(void); }
173	AUE_NULL	MSTD	{ int linux_rt_sigreturn( \
				    struct l_ucontext *ucp); }
174	AUE_NULL	MSTD	{ int linux_rt_sigaction(l_int sig, \
				    l_sigaction_t *act, l_sigaction_t *oact, \
				    l_size_t sigsetsize); }
175	AUE_NULL	MSTD	{ int linux_rt_sigprocmask(l_int how, \
				    l_sigset_t *mask, l_sigset_t *omask, \
				    l_size_t sigsetsize); }
176	AUE_NULL	MSTD	{ int linux_rt_sigpending(void); }
177	AUE_NULL	MSTD	{ int linux_rt_sigtimedwait(void); }
178	AUE_NULL	MSTD	{ int linux_rt_sigqueueinfo(void); }
179	AUE_NULL	MSTD	{ int linux_rt_sigsuspend( \
				    l_sigset_t *newset, \
				    l_size_t sigsetsize); }
180	AUE_PREAD	MSTD	{ int linux_pread(l_uint fd, char *buf, \
				    l_size_t nbyte, l_loff_t offset); }
181	AUE_PWRITE	MSTD	{ int linux_pwrite(l_uint fd, char *buf, \
				    l_size_t nbyte, l_loff_t offset); }
182	AUE_CHOWN	MSTD	{ int linux_chown16(char *path, \
				    l_uid16_t uid, l_gid16_t gid); }
183	AUE_GETCWD	MSTD	{ int linux_getcwd(char *buf, \
				    l_ulong bufsize); }
184	AUE_CAPGET	MSTD	{ int linux_capget(void); }
185	AUE_CAPSET	MSTD	{ int linux_capset(void); }
186	AUE_NULL	MSTD	{ int linux_sigaltstack(l_stack_t *uss, \
				    l_stack_t *uoss); }
187	AUE_SENDFILE	MSTD	{ int linux_sendfile(void); }
188	AUE_GETPMSG	UNIMPL	getpmsg
189	AUE_PUTPMSG	UNIMPL	putpmsg
190	AUE_VFORK	MSTD	{ int linux_vfork(void); }
191	AUE_GETRLIMIT	MSTD	{ int linux_getrlimit(l_uint resource, \
				    struct l_rlimit *rlim); }
192	AUE_MMAP	MSTD	{ int linux_mmap2(l_ulong addr, l_ulong len, \
				    l_ulong prot, l_ulong flags, l_ulong fd, \
				    l_ulong pgoff); }
193	AUE_TRUNCATE	MSTD	{ int linux_truncate64(char *path, \
				    l_loff_t length); }
194	AUE_FTRUNCATE	MSTD	{ int linux_ftruncate64(l_uint fd, \
				    l_loff_t length); }
195	AUE_STAT	MSTD	{ int linux_stat64(char *filename, \
				    struct l_stat64 *statbuf, l_long flags); }
196	AUE_LSTAT	MSTD	{ int linux_lstat64(char *filename, \
				    struct l_stat64 *statbuf, l_long flags); }
197	AUE_FSTAT	MSTD	{ int linux_fstat64(l_ulong fd, \
				    struct l_stat64 *statbuf, l_long flags); }
198	AUE_LCHOWN	MSTD	{ int linux_lchown(char *path, l_uid_t uid, \
				    l_gid_t gid); }
199	AUE_GETUID	MSTD	{ int linux_getuid(void); }
200	AUE_GETGID	MSTD	{ int linux_getgid(void); }
201	AUE_GETEUID	MNOPROTO { int geteuid(void); }
202	AUE_GETEGID	MNOPROTO { int getegid(void); }
203	AUE_SETREUID	MNOPROTO { int setreuid(uid_t ruid, uid_t euid); }
204	AUE_SETREGID	MNOPROTO { int setregid(gid_t rgid, gid_t egid); }
205	AUE_GETGROUPS	MSTD	{ int linux_getgroups(l_int gidsetsize, \
				    l_gid_t *grouplist); }
206	AUE_SETGROUPS	MSTD	{ int linux_setgroups(l_int gidsetsize, \
				    l_gid_t *grouplist); }
207	AUE_FCHOWN	NODEF	fchown fchown fchown_args int
208	AUE_SETRESUID	MNOPROTO { int setresuid(uid_t ruid, uid_t euid, \
				    uid_t suid); }
209	AUE_GETRESUID	MNOPROTO { int getresuid(uid_t *ruid, uid_t *euid, \
				    uid_t *suid); }
210	AUE_SETRESGID	MNOPROTO { int setresgid(gid_t rgid, gid_t egid, \
				    gid_t sgid); }
211	AUE_GETRESGID	MNOPROTO { int getresgid(gid_t *rgid, gid_t *egid, \
				    gid_t *sgid); }
212	AUE_CHOWN	MSTD	{ int linux_chown(char *path, l_uid_t uid, \
				    l_gid_t gid); }
213	AUE_SETUID	MNOPROTO { int setuid(uid_t uid); }
214	AUE_SETGID	MNOPROTO { int setgid(gid_t gid); }
215	AUE_SETFSUID	MSTD	{ int linux_setfsuid(l_uid_t uid); }
216	AUE_SETFSGID	MSTD	{ int linux_setfsgid(l_gid_t gid); }
217	AUE_PIVOT_ROOT	MSTD	{ int linux_pivot_root(char *new_root, \
				    char *put_old); }
218	AUE_MINCORE	MSTD	{ int linux_mincore(l_ulong start, \
				    l_size_t len, u_char *vec); }
219	AUE_MADVISE	MNOPROTO { int madvise(void *addr, size_t len, \
				    int behav); }
220	AUE_O_GETDENTS	STD	{ int linux_getdents64(l_uint fd, \
				    void *dirent, l_uint count); }
221	AUE_FCNTL	MSTD	{ int linux_fcntl64(l_uint fd, l_uint cmd, \
				    l_ulong arg); }
222	AUE_NULL	UNIMPL
223	AUE_NULL	UNIMPL
224	AUE_NULL	MSTD	{ long linux_gettid(void); }
225	AUE_NULL	UNIMPL	linux_readahead
226	AUE_NULL	MSTD	{ int linux_setxattr(void); }
227	AUE_NULL	MSTD	{ int linux_lsetxattr(void); }
228	AUE_NULL	MSTD	{ int linux_fsetxattr(void); }
229	AUE_NULL	MSTD	{ int linux_getxattr(void); }
230	AUE_NULL	MSTD	{ int linux_lgetxattr(void); }
231	AUE_NULL	MSTD	{ int linux_fgetxattr(void); }
232	AUE_NULL	MSTD	{ int linux_listxattr(void); }
233	AUE_NULL	MSTD	{ int linux_llistxattr(void); }
234	AUE_NULL	MSTD	{ int linux_flistxattr(void); }
235	AUE_NULL	MSTD	{ int linux_removexattr(void); }
236	AUE_NULL	MSTD	{ int linux_lremovexattr(void); }
237	AUE_NULL	MSTD	{ int linux_fremovexattr(void); }
238	AUE_NULL	MSTD	{ int linux_tkill(int tid, int sig); }
239	AUE_SENDFILE	UNIMPL	linux_sendfile64
240	AUE_NULL	UNIMPL	linux_futex
241	AUE_NULL	UNIMPL	linux_sched_setaffinity
242	AUE_NULL	UNIMPL	linux_sched_getaffinity
243	AUE_NULL	MSTD	{ int linux_set_thread_area(void *entry); }
244	AUE_NULL	UNIMPL	linux_get_thread_area
245	AUE_NULL	UNIMPL	linux_io_setup
246	AUE_NULL	UNIMPL	linux_io_destroy
247	AUE_NULL	UNIMPL	linux_io_getevents
248	AUE_NULL	UNIMPL	linux_io_submit
249	AUE_NULL	UNIMPL	linux_io_cancel
250	AUE_NULL	MSTD	{ int linux_fadvise64(void); }
251	AUE_NULL	UNIMPL
252	AUE_EXIT	MNOPROTO { void sys_exit(int rval); } exit_group \
				    sys_exit_args void
253	AUE_NULL	UNIMPL	linux_lookup_dcookie
254	AUE_NULL	UNIMPL	linux_epoll_create
255	AUE_NULL	UNIMPL	linux_epoll_ctl
256	AUE_NULL	UNIMPL	linux_epoll_wait
257	AUE_NULL	UNIMPL	linux_remap_file_pages
258	AUE_NULL	UNIMPL	linux_set_tid_address
259	AUE_NULL	UNIMPL	linux_timer_create
260	AUE_NULL	UNIMPL	linux_timer_settime
261	AUE_NULL	UNIMPL	linux_timer_gettime
262	AUE_NULL	UNIMPL	linux_timer_getoverrun
263	AUE_NULL	UNIMPL	linux_timer_delete
264	AUE_CLOCK_SETTIME	UNIMPL	linux_clock_settime
265	AUE_NULL	UNIMPL	linux_clock_gettime
266	AUE_NULL	UNIMPL	linux_clock_getres
267	AUE_NULL	UNIMPL	linux_clock_nanosleep
